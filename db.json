{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/ad/source/images/touch-icon.png","path":"images/touch-icon.png","modified":1,"renderable":1},{"_id":"themes/ad/source/images/favicon.ico","path":"images/favicon.ico","modified":1,"renderable":1},{"_id":"themes/ad/source/js/auth.js","path":"js/auth.js","modified":1,"renderable":1},{"_id":"themes/ad/source/js/backTop.js","path":"js/backTop.js","modified":1,"renderable":1},{"_id":"themes/ad/source/js/copy.js","path":"js/copy.js","modified":1,"renderable":1},{"_id":"themes/ad/source/js/header.js","path":"js/header.js","modified":1,"renderable":1},{"_id":"themes/ad/source/js/index.js","path":"js/index.js","modified":1,"renderable":1},{"_id":"themes/ad/source/js/layer.js","path":"js/layer.js","modified":1,"renderable":1},{"_id":"themes/ad/source/js/leancloud.js","path":"js/leancloud.js","modified":1,"renderable":1},{"_id":"themes/ad/source/js/mathjax.js","path":"js/mathjax.js","modified":1,"renderable":1},{"_id":"themes/ad/source/js/passage.js","path":"js/passage.js","modified":1,"renderable":1},{"_id":"themes/ad/source/js/reward.js","path":"js/reward.js","modified":1,"renderable":1},{"_id":"themes/ad/source/js/scroll.js","path":"js/scroll.js","modified":1,"renderable":1},{"_id":"themes/ad/source/js/share.js","path":"js/share.js","modified":1,"renderable":1},{"_id":"themes/ad/source/js/time.js","path":"js/time.js","modified":1,"renderable":1},{"_id":"themes/ad/source/styles/global.scss","path":"styles/global.scss","modified":1,"renderable":1},{"_id":"themes/ad/source/styles/index.scss","path":"styles/index.scss","modified":1,"renderable":1},{"_id":"themes/ad/source/vendor/qrcode.min.js","path":"vendor/qrcode.min.js","modified":1,"renderable":1},{"_id":"themes/ad/source/vendor/sha256.min.js","path":"vendor/sha256.min.js","modified":1,"renderable":1},{"_id":"themes/ad/source/styles/components/bottom-bar.scss","path":"styles/components/bottom-bar.scss","modified":1,"renderable":1},{"_id":"themes/ad/source/styles/components/comment.scss","path":"styles/components/comment.scss","modified":1,"renderable":1},{"_id":"themes/ad/source/styles/components/index.scss","path":"styles/components/index.scss","modified":1,"renderable":1},{"_id":"themes/ad/source/styles/components/share.scss","path":"styles/components/share.scss","modified":1,"renderable":1},{"_id":"themes/ad/source/styles/components/toc.scss","path":"styles/components/toc.scss","modified":1,"renderable":1},{"_id":"themes/ad/source/styles/layout/about.scss","path":"styles/layout/about.scss","modified":1,"renderable":1},{"_id":"themes/ad/source/styles/layout/friend.scss","path":"styles/layout/friend.scss","modified":1,"renderable":1},{"_id":"themes/ad/source/css/index.css","path":"css/index.css","modified":1,"renderable":1},{"_id":"themes/ad/source/styles/layout/index.scss","path":"styles/layout/index.scss","modified":1,"renderable":1},{"_id":"themes/ad/source/styles/components/layer.scss","path":"styles/components/layer.scss","modified":1,"renderable":1},{"_id":"themes/ad/source/styles/layout/home.scss","path":"styles/layout/home.scss","modified":1,"renderable":1},{"_id":"themes/ad/source/styles/layout/passage.scss","path":"styles/layout/passage.scss","modified":1,"renderable":1},{"_id":"themes/ad/source/styles/layout/set.scss","path":"styles/layout/set.scss","modified":1,"renderable":1},{"_id":"themes/ad/source/styles/layout/timeline.scss","path":"styles/layout/timeline.scss","modified":1,"renderable":1},{"_id":"themes/ad/source/styles/mixins/font.scss","path":"styles/mixins/font.scss","modified":1,"renderable":1},{"_id":"themes/ad/source/styles/mixins/index.scss","path":"styles/mixins/index.scss","modified":1,"renderable":1},{"_id":"themes/ad/source/styles/partials/footer.scss","path":"styles/partials/footer.scss","modified":1,"renderable":1},{"_id":"themes/ad/source/styles/partials/index.scss","path":"styles/partials/index.scss","modified":1,"renderable":1},{"_id":"themes/ad/source/styles/mixins/color.scss","path":"styles/mixins/color.scss","modified":1,"renderable":1},{"_id":"themes/ad/source/styles/partials/header.scss","path":"styles/partials/header.scss","modified":1,"renderable":1},{"_id":"themes/ad/source/styles/components/highlight/diff.styl","path":"styles/components/highlight/diff.styl","modified":1,"renderable":1},{"_id":"themes/ad/source/styles/components/highlight/var.styl","path":"styles/components/highlight/var.styl","modified":1,"renderable":1},{"_id":"themes/ad/source/styles/components/highlight/highlight.styl","path":"styles/components/highlight/highlight.styl","modified":1,"renderable":1},{"_id":"themes/ad/source/styles/components/highlight/theme.styl","path":"styles/components/highlight/theme.styl","modified":1,"renderable":1},{"_id":"themes/ad/source/images/alipay.jpg","path":"images/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/ad/source/images/Wanaka.jpg","path":"images/Wanaka.jpg","modified":1,"renderable":1},{"_id":"themes/ad/source/images/wechatme.png","path":"images/wechatme.png","modified":1,"renderable":1}],"Cache":[{"_id":"themes/ad/LICENSE","hash":"3f8a68c846958c6e4dcd7bdacd016c0711553a98","modified":1554285644626},{"_id":"themes/ad/.gitignore","hash":"e20641fcd2ac0626c1dbe4aadfea842836049a5c","modified":1554285644626},{"_id":"themes/ad/_config.yml","hash":"cc7db799fee92749400cb197b281147a53ab0647","modified":1556503583512},{"_id":"themes/ad/package.json","hash":"90b47ed3b531489797112c22e984f00baefac808","modified":1554285644631},{"_id":"themes/ad/.DS_Store","hash":"ac436b1e0d39686278e6f06d1f1de0a729bd9aac","modified":1554781589860},{"_id":"source/template.md","hash":"4e0f74c989748cea07c0a36fa25138cec9343269","modified":1556156132850},{"_id":"themes/ad/.github/ISSUE_TEMPLATE.md","hash":"9607a2be2fe5ecffffa0eabfda6000b510304766","modified":1554285644625},{"_id":"themes/ad/.github/PULL_REQUEST_TEMPLATE.md","hash":"9617456a790f19436d65d063ec77f811a6517b47","modified":1554285644626},{"_id":"themes/ad/layout/about.ejs","hash":"79126abf089aed94d5a2e54dd4b68cd1a122d06d","modified":1554285644627},{"_id":"themes/ad/layout/archive.ejs","hash":"d5b01b0108b300c70375428902033e20557f25de","modified":1554285644627},{"_id":"themes/ad/layout/categories.ejs","hash":"9e87269bab4a4b03049377e2d4fda934c12544e1","modified":1554285644627},{"_id":"themes/ad/layout/category.ejs","hash":"94d5cbba18a3c3bb78c8604df5fd2c965af5399e","modified":1554285644627},{"_id":"themes/ad/layout/friends.ejs","hash":"0e5200c5536c0e1d3d7bbb22405ab82b772cafce","modified":1554285644629},{"_id":"themes/ad/layout/index.ejs","hash":"405c4bcca2a2920d8a0bb323133804905eec027f","modified":1556271846054},{"_id":"themes/ad/layout/layout.ejs","hash":"88c1294cf4778af3ccaf14f2108eb4e0f8455c6d","modified":1556270982029},{"_id":"themes/ad/README.cn.md","hash":"08ee9e4722af0f137ec6eece08f26ec046259d2b","modified":1554285644626},{"_id":"themes/ad/README.md","hash":"9f6b59b2d4de08a08de76aa87ecc6d1a4757ac07","modified":1554285644626},{"_id":"themes/ad/layout/post.ejs","hash":"ef7268667a62fcbd79536ed27c8e9fcfc0a271f1","modified":1554285644631},{"_id":"themes/ad/layout/tags.ejs","hash":"b33acb595fb0c2336f5c7d3d311192afc74dad2e","modified":1554285644631},{"_id":"themes/ad/layout/tag.ejs","hash":"14de99514531f8f38b0045d1a0426cbdebea7eda","modified":1554285644631},{"_id":"themes/ad/scripts/filter.js","hash":"d8970c0dbb64193988fa7328dfc4b799c4553710","modified":1554285644631},{"_id":"source/_posts/.DS_Store","hash":"37345f8e3ce6b3a0c73077e86a2f092042e7d7ac","modified":1554286838669},{"_id":"source/_posts/2018-09-28-js-array-method.md","hash":"edf4400ee89fe65fcd0812215314258bb224f35a","modified":1554884051236},{"_id":"source/_posts/2018-10-20-webpack-learning.md","hash":"11aa71a033bd4e607b04a29c104cba7245351d9d","modified":1555901650758},{"_id":"source/_posts/2018-11-02-cropperJs.md","hash":"c8fb6e8993c2af52fca359545bdfc66cac08b512","modified":1555902681694},{"_id":"themes/ad/layout/passage.ejs","hash":"678a0c82405a8503ae9436a3ce7d511a317f37a8","modified":1556273435963},{"_id":"source/.DS_Store","hash":"37390ec775882523f12dba8624b23d0e80dd03b2","modified":1554286934589},{"_id":"source/_posts/2018-12-10-数组中对象的提取分类.md","hash":"afabc47b722ed6de28cd9ce577d0c28c7ad25386","modified":1556086720886},{"_id":"source/_posts/2018-12-18-Dplay.md","hash":"6c990c99e20f489eb3b5a069723215108b02fe54","modified":1556012919773},{"_id":"source/_posts/2018-11-07-require-and-import.md","hash":"482f9c0e1aba7798dbeb62e4a3de53b751e5b165","modified":1556086550961},{"_id":"source/_posts/2019-01-02-常见的css布局.md","hash":"446a6ed556c875226e34d39a22f284f14668f16a","modified":1556086847934},{"_id":"source/_posts/2019-01-03-阿里软电话SDK前端.md","hash":"254a9dce97346298ea8c6f818d3d4bb26ca286c7","modified":1556087102549},{"_id":"source/_posts/2018-12-20-vuex.md","hash":"a61bd4a18d25d29e993686952176ed9e1f12ef7c","modified":1556086853942},{"_id":"source/_posts/2019-03-08-cookie和token.md","hash":"3a8a05dba4dff100aebe8559fe9e0622383c56c5","modified":1554884596301},{"_id":"source/_posts/2019-03-11-charles.md","hash":"c9a152410d7f20c2b0926ddc06c14dc97a774ee0","modified":1556087706731},{"_id":"source/_posts/2019-03-14-移动端适配.md","hash":"a841c22033d98abcdf3613dc3260b5f4c23477e3","modified":1554884651017},{"_id":"source/_posts/2019-04-05-promis封装400电话API.md","hash":"4c4c1f11175c90fdcd7b600b2524a7eb6ce6aa24","modified":1555901197867},{"_id":"source/_posts/2019-03-07-antd-vue.md","hash":"c7ec2008756b96afbe5b771a9cbc0fa06fc5d117","modified":1556087669089},{"_id":"source/_posts/2018-11-20-mpvue.md","hash":"f5723352a6b3f3edcd4168d45c18ef27a342a7cf","modified":1556086579104},{"_id":"source/_posts/2019-04-11全局挂载公用组件.md","hash":"924caf1c5376c36709ebb003305834c986b63934","modified":1556156132849},{"_id":"source/_posts/2019-04-08-vue中模版文件动态插入HTML.md","hash":"9e9c37487865d8738140c3455db839aa28032e58","modified":1557048679422},{"_id":"source/_posts/2019-04-09-吸顶效果和防抖节流.md","hash":"cc97ee313ef40a4a77576a8d158572e4f4195ee4","modified":1557054490680},{"_id":"source/about/index.md","hash":"133757bf27c1dcc8c82c8d05a4000e2665df7e4d","modified":1554781500303},{"_id":"source/categories/index.md","hash":"0d9db58cd5165a8d91f3b18b244f41b255038afd","modified":1554780733566},{"_id":"source/friends/index.md","hash":"e8490776b45b6ed9ba797a526625ad523b3168f7","modified":1554783235217},{"_id":"source/demo/2019-04-25-vue组件通信.md","hash":"26a035b13c482900bb0cc71551bffa66305125b9","modified":1556517155638},{"_id":"source/tags/index.md","hash":"3777757b6b0212f6d70a25277068f815439be67b","modified":1554780747024},{"_id":"themes/ad/layout/components/analytics.ejs","hash":"8ba4c4396b4c7c5b9ecb7c8654dc6bea35d58d14","modified":1556244630173},{"_id":"themes/ad/layout/components/bottom-bar.ejs","hash":"91959c7b00865722ca43a0e962d7723cdcc74503","modified":1554285644628},{"_id":"themes/ad/layout/components/comment.ejs","hash":"2765528e51e250d99561ce40993302e7f41d55d5","modified":1554285644628},{"_id":"themes/ad/layout/components/config.ejs","hash":"361cbdcd2b912cd1c1f47570b9b1a7ac10596a9b","modified":1554285644629},{"_id":"themes/ad/layout/components/home-button.ejs","hash":"b44b9e9b95f2d2fc241c447e221dca01d461ee02","modified":1556273124065},{"_id":"themes/ad/layout/components/layer.ejs","hash":"bb8a0dd20ee1c5dfe9bcf6c32d9129b53bd7dee3","modified":1554285644629},{"_id":"themes/ad/layout/components/share.ejs","hash":"edc5d7ce0390634d6c1af809ba0e1477842f0b5a","modified":1554285644629},{"_id":"themes/ad/layout/components/toc.ejs","hash":"80169c8926818d28005f9177d625ffc3688b3d96","modified":1554285644629},{"_id":"themes/ad/layout/partials/footer.ejs","hash":"c74421c3ba46b2840f822ca628a4e0f9a1f9512f","modified":1556271202352},{"_id":"themes/ad/layout/partials/head.ejs","hash":"289d258b9b96fecf47d6d0899e5c69775a24c11d","modified":1556270832483},{"_id":"themes/ad/layout/partials/header.ejs","hash":"5e663c7c295c060446a0f268c213f34662f7fdf3","modified":1554285644630},{"_id":"source/_posts/2018-11-25-wxLogin.md","hash":"d4bd1c3d755af3598321f636295c13297e401ed3","modified":1556086720886},{"_id":"source/_posts/杂记.md","hash":"04a4c5bb43961c5c83dd761c6a96de9cb52831c7","modified":1556176902738},{"_id":"source/_posts/2019-04-18-Nuxt.md","hash":"094a88c3ba4b855dce48a7faf074eb1c91d95f70","modified":1556086507565},{"_id":"themes/ad/source/images/touch-icon.png","hash":"df5a490c2e8d549ca767505fbe46eed3cbe3df43","modified":1554285644633},{"_id":"themes/ad/source/images/favicon.ico","hash":"cc7c201861748e92f4809507096df74a40ef496a","modified":1554285644632},{"_id":"themes/ad/source/js/auth.js","hash":"18c3235fce3861782fc9d19bd1ecca1f6f94030d","modified":1556503222274},{"_id":"themes/ad/source/js/backTop.js","hash":"237a50a872e2fe8343353bbe18fabb3c1681f0d0","modified":1554285644633},{"_id":"themes/ad/source/js/copy.js","hash":"902fe6c84d2ebbfb37e1f91f37646bea20db8c05","modified":1554285644633},{"_id":"themes/ad/source/js/header.js","hash":"c758cb821ed923f45fae608d333c6935adc38f3d","modified":1554285644634},{"_id":"themes/ad/source/js/index.js","hash":"2575e6a1cd7d30e006862bedbefc034220401da0","modified":1554285644634},{"_id":"themes/ad/source/js/layer.js","hash":"dc17348c7bef8a78f9a258d2f25864853ee4a576","modified":1554285644634},{"_id":"themes/ad/source/js/leancloud.js","hash":"c2ee6078429b81a76be3555a806da3fb58a72db1","modified":1556246261179},{"_id":"themes/ad/source/js/mathjax.js","hash":"3c58ffe041c6e124c5d927d0e7127659b562cfd8","modified":1554285644634},{"_id":"themes/ad/source/js/passage.js","hash":"cff41ceccdeefb44473d0b928c8c7f695502896a","modified":1554285644634},{"_id":"themes/ad/source/js/reward.js","hash":"6b7cec619073de3380a7e3d0b4f96f6c22db93d4","modified":1554285644634},{"_id":"themes/ad/source/js/scroll.js","hash":"938dd852f6ac214f8ad0135fce7a8b126c36ef7c","modified":1554285644635},{"_id":"themes/ad/source/js/share.js","hash":"4fcb58fe1d5332cb59f3d559401231ba8106ee2b","modified":1554285644635},{"_id":"themes/ad/source/js/time.js","hash":"4b86b54eea0bbdd8870af6c70443b852393c457b","modified":1554285644635},{"_id":"themes/ad/source/styles/global.scss","hash":"e57778be87e9e750c3de5406e361cac85d5f07c3","modified":1554285644637},{"_id":"themes/ad/source/styles/index.scss","hash":"157f920a729437f0d3599d73bc211935e7d942c7","modified":1554285644637},{"_id":"themes/ad/source/vendor/qrcode.min.js","hash":"2d06c1f823f34c19981c6ae0b0eb0f5861c5e14b","modified":1554285644640},{"_id":"themes/ad/source/vendor/sha256.min.js","hash":"3c5ff30e1f6d37786a336c407defaf5bb7bb258a","modified":1554285644640},{"_id":"source/_posts/Vue/2019-04-25-computed-methods和watch.md","hash":"fa63d2290d41862d7668a30afbb23eea582c5cf2","modified":1556166823907},{"_id":"themes/ad/source/styles/components/bottom-bar.scss","hash":"f000e077744775c12c278af3b3b5200445a46370","modified":1554285644635},{"_id":"themes/ad/source/styles/components/comment.scss","hash":"1b9621b1d70c715a694d28517987e73bf2784d1a","modified":1554285644635},{"_id":"themes/ad/source/styles/components/index.scss","hash":"59a07eb2af79a13b2d0ffed99f6a9f73d7d4dc51","modified":1554285644636},{"_id":"themes/ad/source/styles/components/share.scss","hash":"82907f1f237eba3ac6ac33cf0208fc8fce8a52c5","modified":1554285644636},{"_id":"themes/ad/source/styles/components/toc.scss","hash":"4d724a87b55edca2c124f107550a2a0852eb301e","modified":1554285644637},{"_id":"themes/ad/source/styles/layout/about.scss","hash":"5653765541ecab79cf22099d12b33bb43cd1df9f","modified":1554285644637},{"_id":"themes/ad/source/styles/layout/friend.scss","hash":"6e0a87d8cf670946df1a9bc58183dc2cf455d3b8","modified":1554285644637},{"_id":"themes/ad/source/css/index.css","hash":"2058f99dcc0efd10531c3e46c9993e55d2b598ec","modified":1556273307224},{"_id":"themes/ad/source/styles/layout/index.scss","hash":"1b3c2e2c3ad6d838e6486b5dfacc7b68ebbebb94","modified":1554285644637},{"_id":"themes/ad/source/styles/components/layer.scss","hash":"c65d4eba57c3332bb72257e949df1f2e02376c11","modified":1554285644636},{"_id":"themes/ad/source/styles/layout/home.scss","hash":"74377081d7065bb2f9819463bbcebd719a5423bf","modified":1554285644637},{"_id":"themes/ad/source/styles/layout/passage.scss","hash":"0d2550448537c73c81c934c243ac391ec193b59f","modified":1554285644638},{"_id":"themes/ad/source/styles/layout/set.scss","hash":"ed99c8ff9778815dd15d8649676957c893b0ecf2","modified":1554285644638},{"_id":"themes/ad/source/styles/layout/timeline.scss","hash":"e4b7d6ce2508e986faf2e8cc4c3d975ffb096e92","modified":1554285644638},{"_id":"themes/ad/source/styles/mixins/font.scss","hash":"4e3320626526b26cb9a95043cc3cad3c4b0ac17d","modified":1554285644638},{"_id":"themes/ad/source/styles/mixins/index.scss","hash":"0a92b657aeb5d176501bb2dc5a9b2d4137f23192","modified":1554285644639},{"_id":"themes/ad/source/styles/partials/footer.scss","hash":"3c664b6e9dae7f9c70faffa6884bc8109254b020","modified":1554285644639},{"_id":"themes/ad/source/styles/partials/index.scss","hash":"40d727b8b464e174a1f0fa2da16aa28ce7792cc7","modified":1554285644639},{"_id":"themes/ad/source/styles/mixins/color.scss","hash":"fc9b234fd5a55167ee6df0d15b620af987584be5","modified":1554285644638},{"_id":"themes/ad/source/styles/partials/header.scss","hash":"66dbe05cff7ca389ba33617fbed33ca77b20c6ef","modified":1554285644639},{"_id":"themes/ad/source/styles/components/highlight/diff.styl","hash":"0e7e77c4d13b436d67411c743b2de0a4c9d629c2","modified":1554285644635},{"_id":"themes/ad/source/styles/components/highlight/var.styl","hash":"3c84c1b2ea98abc97490190ae8f85b5a865b24e3","modified":1554285644636},{"_id":"themes/ad/source/styles/components/highlight/highlight.styl","hash":"afa8fa51efef45911720a6f18b7696c608fdd7c2","modified":1554285644636},{"_id":"themes/ad/source/styles/components/highlight/theme.styl","hash":"3559fdc4d9a39abdb78077383de8237fe31c2d84","modified":1554285644636},{"_id":"themes/ad/source/images/alipay.jpg","hash":"72c4faf642c59707d5c4e27005776adb12068737","modified":1554807100254},{"_id":"themes/ad/source/images/Wanaka.jpg","hash":"573ac8f2404f9be03716a630b9095141750eb6ce","modified":1554783205004},{"_id":"themes/ad/source/images/wechatme.png","hash":"de5b4a2bce440b6e35bee9fea6942c6a62b4784e","modified":1554807437151}],"Category":[{"name":"JavaScript","_id":"cjvbyxkhe0005w0oozymcwhas"},{"name":"视频播放器","_id":"cjvbyxkhk000cw0oo9zg4o76e"},{"name":"ES6","_id":"cjvbyxkho000iw0oo0x60wnx1"},{"name":"css","_id":"cjvbyxkhr000nw0oo7jgazjzm"},{"name":"云呼叫","_id":"cjvbyxkhv000uw0oo4m6qbndt"},{"name":"vuex","_id":"cjvbyxkhz0012w0ood0d37nxb"},{"name":"前端","_id":"cjvbyxki20018w0ooknll3887"},{"name":"抓包工具","_id":"cjvbyxki3001bw0oo45260uid"},{"name":"移动端","_id":"cjvbyxki4001fw0oo58r15m3o"},{"name":"CRM","_id":"cjvbyxki5001kw0oojwddi4m1"},{"name":"antd","_id":"cjvbyxki5001ow0oo8n22v5q2"},{"name":"mpvue","_id":"cjvbyxki6001sw0ooi6g2lut3"},{"name":"nuxt","_id":"cjvbyxki7001vw0oozg9t38ud"},{"name":"webpack","_id":"cjvbyxkim003lw0oorz4svj8t"},{"name":"weChat","_id":"cjvbyxkiz0040w0oo7vlw5pbg"},{"name":"blog","_id":"cjvbyxkj20045w0oojevz8sny"},{"name":"vue","_id":"cjvbyxkj7004gw0ood7tceoox"}],"Data":[],"Page":[{"title":"template","date":"2019-04-25T01:35:32.850Z","categories":"template","tags":["标签1","标签2","标签3"],"passwords":["efe07af7441da2b69c4a41e42e73be4db47f66010a56900788a458354a7373ec"],"_content":"\n文章摘要写在前面，支持 markdown 左右语法。\n\n<!-- more -->\n\n文章正文写在这里。\n\n\n### 0.1 + 0.2 ！= 0.3\n\n浮点数比较方法：使用最小精度值\n`Math.abs(0.1+0.2-0.3) <= Number.EPSILON`","source":"template.md","raw":"---\ntitle: 'template'\ndate: 201x-xx-xx\ncategories: template # 分类只能有1个\ntags: # 标签可以有多个\n  - 标签1\n  - 标签2\n  - 标签3\n# cover: \"https://text.com/demo.png\" # 文章封面图片URL\npasswords:\n  - efe07af7441da2b69c4a41e42e73be4db47f66010a56900788a458354a7373ec\n---\n\n文章摘要写在前面，支持 markdown 左右语法。\n\n<!-- more -->\n\n文章正文写在这里。\n\n\n### 0.1 + 0.2 ！= 0.3\n\n浮点数比较方法：使用最小精度值\n`Math.abs(0.1+0.2-0.3) <= Number.EPSILON`","updated":"2019-04-25T01:35:32.850Z","path":"template.html","comments":1,"layout":"page","_id":"cjvbyxkgv0000w0oo6xmathx4","content":"<p>文章摘要写在前面，支持 markdown 左右语法。</p>\n<a id=\"more\"></a>\n<p>文章正文写在这里。</p>\n<h3 id=\"0-1-0-2-！-0-3\"><a href=\"#0-1-0-2-！-0-3\" class=\"headerlink\" title=\"0.1 + 0.2 ！= 0.3\"></a>0.1 + 0.2 ！= 0.3</h3><p>浮点数比较方法：使用最小精度值<br><code>Math.abs(0.1+0.2-0.3) &lt;= Number.EPSILON</code></p>\n","site":{"data":{}},"excerpt":"<p>文章摘要写在前面，支持 markdown 左右语法。</p>","more":"<p>文章正文写在这里。</p>\n<h3 id=\"0-1-0-2-！-0-3\"><a href=\"#0-1-0-2-！-0-3\" class=\"headerlink\" title=\"0.1 + 0.2 ！= 0.3\"></a>0.1 + 0.2 ！= 0.3</h3><p>浮点数比较方法：使用最小精度值<br><code>Math.abs(0.1+0.2-0.3) &lt;= Number.EPSILON</code></p>"},{"title":"about","date":"2019-04-09T03:34:39.000Z","type":"about","_content":"\n个人简介\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2019-04-09 11:34:39\ntype: 'about' # 必须显式设置为\"about\"\n---\n\n个人简介\n","updated":"2019-04-09T03:45:00.303Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjvbyxkha0002w0oo3fwqfol9","content":"<p>个人简介</p>\n","site":{"data":{}},"excerpt":"","more":"<p>个人简介</p>\n"},{"title":"categories","date":"2019-04-09T03:32:01.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-04-09 11:32:01\ntype: 'categories' # 必须显式设置为\"categories\"\n---\n","updated":"2019-04-09T03:32:13.566Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjvbyxkhd0004w0ooobcm73em","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"friends","date":"2019-04-09T03:33:11.000Z","type":"friends","_content":"","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2019-04-09 11:33:11\ntype: 'friends' # 必须显式设置为\"friends\"\n---\n","updated":"2019-04-09T04:13:55.217Z","path":"friends/index.html","comments":1,"layout":"page","_id":"cjvbyxkhg0008w0oo3uxz43j1","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"vue 组件通信","date":"2019-04-24T16:00:00.000Z","categories":"vue","tags":["vue","组件","vuex"],"passwords":["efe07af7441da2b69c4a41e42e73be4db47f66010a56900788a458354a7373ec"],"_content":"\n`vue` 组件通信\n最后更新时间 2019-04-25\n\n<!-- more -->\n\n主要通信的方法\n\n- 父子 `props/event $parent/$children ref provide/inject`\n- 兄弟 `bus vuex`\n- 跨级 `bus vuex provide inject`\n","source":"demo/2019-04-25-vue组件通信.md","raw":"---\ntitle: 'vue 组件通信'\ndate: 2019-04-25\ncategories: vue\ntags:\n  - vue\n  - 组件\n  - vuex\npasswords:\n  - efe07af7441da2b69c4a41e42e73be4db47f66010a56900788a458354a7373ec\n---\n\n`vue` 组件通信\n最后更新时间 2019-04-25\n\n<!-- more -->\n\n主要通信的方法\n\n- 父子 `props/event $parent/$children ref provide/inject`\n- 兄弟 `bus vuex`\n- 跨级 `bus vuex provide inject`\n","updated":"2019-04-29T05:52:35.638Z","path":"demo/2019-04-25-vue组件通信.html","comments":1,"layout":"page","_id":"cjvbyxkhh000aw0oob9oumifg","content":"<p><code>vue</code> 组件通信<br>最后更新时间 2019-04-25</p>\n<a id=\"more\"></a>\n<p>主要通信的方法</p>\n<ul>\n<li>父子 <code>props/event $parent/$children ref provide/inject</code></li>\n<li>兄弟 <code>bus vuex</code></li>\n<li>跨级 <code>bus vuex provide inject</code></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><code>vue</code> 组件通信<br>最后更新时间 2019-04-25</p>","more":"<p>主要通信的方法</p>\n<ul>\n<li>父子 <code>props/event $parent/$children ref provide/inject</code></li>\n<li>兄弟 <code>bus vuex</code></li>\n<li>跨级 <code>bus vuex provide inject</code></li>\n</ul>"},{"title":"tags","date":"2019-04-09T03:27:46.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-04-09 11:27:46\ntype: 'tags' # 必须显式设置为\"tags\"\n---\n","updated":"2019-04-09T03:32:27.024Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjvbyxkhl000ew0oon6zvq464","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"layout":"post","title":"数据处理和分类","date":"2018-12-09T16:00:00.000Z","_content":"\n数据处理和分类\n\n最后修改日期 2019-04-23\n\n<!-- more -->\n\n## 数组分组\n\n### 使用 `forEach` 遍历分组\n\n```js\nconst list = [\n  { label: 'a', value: 1 },\n  { label: 'c', value: 3 },\n  { label: 'b', value: 1 },\n  { label: 'a', value: 3 },\n  { label: 'c', value: 2 }\n]\nconst collect = {}\nlist.forEach(item => {\n  // console.log(item)\n  if (!collect[item.label]) {\n    collect[item.label] = []\n  }\n  collect[item.label].push(item)\n})\n\n// 处理后的数据\ncollect = {\n  a: [1, 3],\n  b: [1],\n  c: [3, 2]\n}\n\n// 可以使用entries(),keys(),values()来获取所需要的值\n```\n\n### 使用 `30 seconds of code` 里 `reduce` 的方法\n\n```js\nconst groupBy = (arr, fn) =>\n  arr\n    .map(typeof fn === 'function' ? fn : val => val[fn])\n    .reduce((acc, val, i) => {\n      acc[val] = (acc[val] || []).concat(arr[i])\n      return acc\n    }, {})\nconst collect = groupBy(list, item => item.label)\n```\n","source":"_posts/2018-12-10-数组中对象的提取分类.md","raw":"---\nlayout: post\ntitle: 数据处理和分类\ndate: 2018-12-10\ncategories: JavaScript\ntags:\n  - JavaScript\n  - 前端\n  - ES6\n---\n\n数据处理和分类\n\n最后修改日期 2019-04-23\n\n<!-- more -->\n\n## 数组分组\n\n### 使用 `forEach` 遍历分组\n\n```js\nconst list = [\n  { label: 'a', value: 1 },\n  { label: 'c', value: 3 },\n  { label: 'b', value: 1 },\n  { label: 'a', value: 3 },\n  { label: 'c', value: 2 }\n]\nconst collect = {}\nlist.forEach(item => {\n  // console.log(item)\n  if (!collect[item.label]) {\n    collect[item.label] = []\n  }\n  collect[item.label].push(item)\n})\n\n// 处理后的数据\ncollect = {\n  a: [1, 3],\n  b: [1],\n  c: [3, 2]\n}\n\n// 可以使用entries(),keys(),values()来获取所需要的值\n```\n\n### 使用 `30 seconds of code` 里 `reduce` 的方法\n\n```js\nconst groupBy = (arr, fn) =>\n  arr\n    .map(typeof fn === 'function' ? fn : val => val[fn])\n    .reduce((acc, val, i) => {\n      acc[val] = (acc[val] || []).concat(arr[i])\n      return acc\n    }, {})\nconst collect = groupBy(list, item => item.label)\n```\n","slug":"2018-12-10-数组中对象的提取分类","published":1,"updated":"2019-04-24T06:18:40.886Z","comments":1,"photos":[],"link":"","_id":"cjvbyxkh70001w0oo9za9fcro","content":"<p>数据处理和分类</p>\n<p>最后修改日期 2019-04-23</p>\n<a id=\"more\"></a>\n<h2 id=\"数组分组\"><a href=\"#数组分组\" class=\"headerlink\" title=\"数组分组\"></a>数组分组</h2><h3 id=\"使用-forEach-遍历分组\"><a href=\"#使用-forEach-遍历分组\" class=\"headerlink\" title=\"使用 forEach 遍历分组\"></a>使用 <code>forEach</code> 遍历分组</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> list = [</span><br><span class=\"line\">  &#123; <span class=\"attr\">label</span>: <span class=\"string\">'a'</span>, <span class=\"attr\">value</span>: <span class=\"number\">1</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">label</span>: <span class=\"string\">'c'</span>, <span class=\"attr\">value</span>: <span class=\"number\">3</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">label</span>: <span class=\"string\">'b'</span>, <span class=\"attr\">value</span>: <span class=\"number\">1</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">label</span>: <span class=\"string\">'a'</span>, <span class=\"attr\">value</span>: <span class=\"number\">3</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">label</span>: <span class=\"string\">'c'</span>, <span class=\"attr\">value</span>: <span class=\"number\">2</span> &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"keyword\">const</span> collect = &#123;&#125;</span><br><span class=\"line\">list.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// console.log(item)</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!collect[item.label]) &#123;</span><br><span class=\"line\">    collect[item.label] = []</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  collect[item.label].push(item)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 处理后的数据</span></span><br><span class=\"line\">collect = &#123;</span><br><span class=\"line\">  a: [<span class=\"number\">1</span>, <span class=\"number\">3</span>],</span><br><span class=\"line\">  b: [<span class=\"number\">1</span>],</span><br><span class=\"line\">  c: [<span class=\"number\">3</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 可以使用entries(),keys(),values()来获取所需要的值</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"使用-30-seconds-of-code-里-reduce-的方法\"><a href=\"#使用-30-seconds-of-code-里-reduce-的方法\" class=\"headerlink\" title=\"使用 30 seconds of code 里 reduce 的方法\"></a>使用 <code>30 seconds of code</code> 里 <code>reduce</code> 的方法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> groupBy = <span class=\"function\">(<span class=\"params\">arr, fn</span>) =&gt;</span></span><br><span class=\"line\">  arr</span><br><span class=\"line\">    .map(<span class=\"keyword\">typeof</span> fn === <span class=\"string\">'function'</span> ? fn : <span class=\"function\"><span class=\"params\">val</span> =&gt;</span> val[fn])</span><br><span class=\"line\">    .reduce(<span class=\"function\">(<span class=\"params\">acc, val, i</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      acc[val] = (acc[val] || []).concat(arr[i])</span><br><span class=\"line\">      <span class=\"keyword\">return</span> acc</span><br><span class=\"line\">    &#125;, &#123;&#125;)</span><br><span class=\"line\"><span class=\"keyword\">const</span> collect = groupBy(list, item =&gt; item.label)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>数据处理和分类</p>\n<p>最后修改日期 2019-04-23</p>","more":"<h2 id=\"数组分组\"><a href=\"#数组分组\" class=\"headerlink\" title=\"数组分组\"></a>数组分组</h2><h3 id=\"使用-forEach-遍历分组\"><a href=\"#使用-forEach-遍历分组\" class=\"headerlink\" title=\"使用 forEach 遍历分组\"></a>使用 <code>forEach</code> 遍历分组</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> list = [</span><br><span class=\"line\">  &#123; <span class=\"attr\">label</span>: <span class=\"string\">'a'</span>, <span class=\"attr\">value</span>: <span class=\"number\">1</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">label</span>: <span class=\"string\">'c'</span>, <span class=\"attr\">value</span>: <span class=\"number\">3</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">label</span>: <span class=\"string\">'b'</span>, <span class=\"attr\">value</span>: <span class=\"number\">1</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">label</span>: <span class=\"string\">'a'</span>, <span class=\"attr\">value</span>: <span class=\"number\">3</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">label</span>: <span class=\"string\">'c'</span>, <span class=\"attr\">value</span>: <span class=\"number\">2</span> &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"keyword\">const</span> collect = &#123;&#125;</span><br><span class=\"line\">list.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// console.log(item)</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!collect[item.label]) &#123;</span><br><span class=\"line\">    collect[item.label] = []</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  collect[item.label].push(item)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 处理后的数据</span></span><br><span class=\"line\">collect = &#123;</span><br><span class=\"line\">  a: [<span class=\"number\">1</span>, <span class=\"number\">3</span>],</span><br><span class=\"line\">  b: [<span class=\"number\">1</span>],</span><br><span class=\"line\">  c: [<span class=\"number\">3</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 可以使用entries(),keys(),values()来获取所需要的值</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"使用-30-seconds-of-code-里-reduce-的方法\"><a href=\"#使用-30-seconds-of-code-里-reduce-的方法\" class=\"headerlink\" title=\"使用 30 seconds of code 里 reduce 的方法\"></a>使用 <code>30 seconds of code</code> 里 <code>reduce</code> 的方法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> groupBy = <span class=\"function\">(<span class=\"params\">arr, fn</span>) =&gt;</span></span><br><span class=\"line\">  arr</span><br><span class=\"line\">    .map(<span class=\"keyword\">typeof</span> fn === <span class=\"string\">'function'</span> ? fn : <span class=\"function\"><span class=\"params\">val</span> =&gt;</span> val[fn])</span><br><span class=\"line\">    .reduce(<span class=\"function\">(<span class=\"params\">acc, val, i</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      acc[val] = (acc[val] || []).concat(arr[i])</span><br><span class=\"line\">      <span class=\"keyword\">return</span> acc</span><br><span class=\"line\">    &#125;, &#123;&#125;)</span><br><span class=\"line\"><span class=\"keyword\">const</span> collect = groupBy(list, item =&gt; item.label)</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"视频播放器之Dplay","date":"2018-12-17T16:00:00.000Z","description":null,"_content":"\n视频播放器之 Dplay\n最后更新日期 2019 年 01 月 03 日\n\n<!-- more -->\n\n只是为了单独的记录一下使用方法\n\n## Dplay 简介\n\n- github 地址： `https://github.com/MoePlayer/DPlayer`\n- 简介： HTML5 danmaku 视频播放器\n- \b 支持格式： `HLS` `FLV` `MD5`\n- 中文文档地址：`http://dplayer.js.org/#/zh-Hans/`\n\n## 带背景图的组件\n\n```html\n\b<template>\n  <div class=\"full\">\n    <div class=\"dplayer-container\" ref=\"player\"></div>\n    <div\n      v-if=\"poster && posterIsShow\"\n      @click=\"play\"\n      class=\"cover-wraper\"\n      style=\"z-index: 10000\"\n    >\n      <img v-if=\"poster\" class=\"poster\" :src=\"poster\" alt=\"poster\" />\n      <img class=\"play-btn\" src=\"./play_icon.png\" />\n    </div>\n  </div>\n</template>\n```\n\n实例化所使用的 js\n\n```js\nwindow.Hls = require('hls.js')\nimport 'dplayer/dist/DPlayer.min.css' // 引入样式css\nimport DPlayer from 'dplayer'\n\nexport default {\n  props: {\n    urls: {\n      type: Array,\n      default: () => [] // [{url: '', name: ''}]\n    },\n    src: {\n      type: String,\n      default: ''\n    },\n    poster: {\n      type: String, // pointer主动显示播放按钮，所以添加一个图片封面\n      default: ''\n    },\n    label: {\n      type: String,\n      default: ''\n    }\n  },\n  data() {\n    return {\n      posterIsShow: true\n    }\n  },\n  computed: {\n    quality() {\n      // 多\n      const names = {\n        FD: '超清',\n        LD: '高清',\n        SD: '流畅'\n      }\n      return this.urls.map(item => ({\n        url: item.play_url,\n        name: names[item.definition] || item.definition\n      }))\n    }\n  },\n  mounted() {\n    this.init()\n  },\n  beforeDestroy() {\n    if (this.dp) {\n      this.dp.destroy()\n    }\n  },\n  methods: {\n    init() {\n      const urlObj = this.src ? { url: this.src } : { quality: this.quality }\n      this.dp = new DPlayer({\n        container: this.$refs.player,\n        preload: 'none',\n        autoplay: false,\n        video: {\n          ...urlObj,\n          defaultQuality: 0,\n          pic: this.poster,\n          thumbnails: this.poster\n        }\n        // screenshot: true, // 截图\n      })\n      // this.dp.on('ended', () => {\n      //   this.posterIsShow = true\n      // });\n      this.dp.on('play', () => {\n        this.posterIsShow = false\n      })\n      // this.dp.on('pause', () => {\n      //   this.posterIsShow = false\n      // });\n    },\n    play() {\n      if (this.dp) {\n        this.dp.play()\n      }\n    }\n  }\n}\n```\n\n### demo\n\n```js\n<template>\n  <div class=\"full\">\n    <dplayer\n      :label=\"label\"\n      ref=\"dplayer\"\n      v-if=\"src || urls.length\"\n      :urls=\"urls\"\n      :src=\"src\"\n      :poster=\"poster\"\n    />\n    <img v-else class=\"play-btn\" src=\"./play_icon.png\" />\n  </div>\n</template>\n\n<script>\nimport Dplayer from './Dplayer.vue'\n\nexport default {\n  components: {\n    Dplayer\n  },\n  props: {\n    urls: {\n      type: Array,\n      default: () => []\n    },\n    src: {\n      type: String,\n      default: ''\n    },\n    poster: {\n      type: String, // pointer主动显示播放按钮，所以添加一个图片封面\n      default: ''\n    },\n    label: {\n      type: String,\n      default: ''\n    }\n  },\n  methods: {\n    play() {\n      if (this.$refs.dplayer) {\n        this.$refs.dplayer.play()\n      }\n    }\n  }\n}\n</script>\n\n<style scoped lang=\"scss\">\n.full {\n  background-color: #f5f5f5;\n  position: relative;\n  .play-btn {\n    position: absolute;\n    left: 0;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    margin: auto;\n    width: 70px;\n    height: 70px;\n  }\n}\n</style>\n```\n","source":"_posts/2018-12-18-Dplay.md","raw":"---\nlayout: post\ntitle: 视频播放器之Dplay\ndate: 2018-12-18\ncategories: 视频播放器\ntags:\n  - 视频播放器\n  - 前端\ndescription:\n---\n\n视频播放器之 Dplay\n最后更新日期 2019 年 01 月 03 日\n\n<!-- more -->\n\n只是为了单独的记录一下使用方法\n\n## Dplay 简介\n\n- github 地址： `https://github.com/MoePlayer/DPlayer`\n- 简介： HTML5 danmaku 视频播放器\n- \b 支持格式： `HLS` `FLV` `MD5`\n- 中文文档地址：`http://dplayer.js.org/#/zh-Hans/`\n\n## 带背景图的组件\n\n```html\n\b<template>\n  <div class=\"full\">\n    <div class=\"dplayer-container\" ref=\"player\"></div>\n    <div\n      v-if=\"poster && posterIsShow\"\n      @click=\"play\"\n      class=\"cover-wraper\"\n      style=\"z-index: 10000\"\n    >\n      <img v-if=\"poster\" class=\"poster\" :src=\"poster\" alt=\"poster\" />\n      <img class=\"play-btn\" src=\"./play_icon.png\" />\n    </div>\n  </div>\n</template>\n```\n\n实例化所使用的 js\n\n```js\nwindow.Hls = require('hls.js')\nimport 'dplayer/dist/DPlayer.min.css' // 引入样式css\nimport DPlayer from 'dplayer'\n\nexport default {\n  props: {\n    urls: {\n      type: Array,\n      default: () => [] // [{url: '', name: ''}]\n    },\n    src: {\n      type: String,\n      default: ''\n    },\n    poster: {\n      type: String, // pointer主动显示播放按钮，所以添加一个图片封面\n      default: ''\n    },\n    label: {\n      type: String,\n      default: ''\n    }\n  },\n  data() {\n    return {\n      posterIsShow: true\n    }\n  },\n  computed: {\n    quality() {\n      // 多\n      const names = {\n        FD: '超清',\n        LD: '高清',\n        SD: '流畅'\n      }\n      return this.urls.map(item => ({\n        url: item.play_url,\n        name: names[item.definition] || item.definition\n      }))\n    }\n  },\n  mounted() {\n    this.init()\n  },\n  beforeDestroy() {\n    if (this.dp) {\n      this.dp.destroy()\n    }\n  },\n  methods: {\n    init() {\n      const urlObj = this.src ? { url: this.src } : { quality: this.quality }\n      this.dp = new DPlayer({\n        container: this.$refs.player,\n        preload: 'none',\n        autoplay: false,\n        video: {\n          ...urlObj,\n          defaultQuality: 0,\n          pic: this.poster,\n          thumbnails: this.poster\n        }\n        // screenshot: true, // 截图\n      })\n      // this.dp.on('ended', () => {\n      //   this.posterIsShow = true\n      // });\n      this.dp.on('play', () => {\n        this.posterIsShow = false\n      })\n      // this.dp.on('pause', () => {\n      //   this.posterIsShow = false\n      // });\n    },\n    play() {\n      if (this.dp) {\n        this.dp.play()\n      }\n    }\n  }\n}\n```\n\n### demo\n\n```js\n<template>\n  <div class=\"full\">\n    <dplayer\n      :label=\"label\"\n      ref=\"dplayer\"\n      v-if=\"src || urls.length\"\n      :urls=\"urls\"\n      :src=\"src\"\n      :poster=\"poster\"\n    />\n    <img v-else class=\"play-btn\" src=\"./play_icon.png\" />\n  </div>\n</template>\n\n<script>\nimport Dplayer from './Dplayer.vue'\n\nexport default {\n  components: {\n    Dplayer\n  },\n  props: {\n    urls: {\n      type: Array,\n      default: () => []\n    },\n    src: {\n      type: String,\n      default: ''\n    },\n    poster: {\n      type: String, // pointer主动显示播放按钮，所以添加一个图片封面\n      default: ''\n    },\n    label: {\n      type: String,\n      default: ''\n    }\n  },\n  methods: {\n    play() {\n      if (this.$refs.dplayer) {\n        this.$refs.dplayer.play()\n      }\n    }\n  }\n}\n</script>\n\n<style scoped lang=\"scss\">\n.full {\n  background-color: #f5f5f5;\n  position: relative;\n  .play-btn {\n    position: absolute;\n    left: 0;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    margin: auto;\n    width: 70px;\n    height: 70px;\n  }\n}\n</style>\n```\n","slug":"2018-12-18-Dplay","published":1,"updated":"2019-04-23T09:48:39.773Z","comments":1,"photos":[],"link":"","_id":"cjvbyxkhb0003w0oow0ytqjpx","content":"<p>视频播放器之 Dplay<br>最后更新日期 2019 年 01 月 03 日</p>\n<a id=\"more\"></a>\n<p>只是为了单独的记录一下使用方法</p>\n<h2 id=\"Dplay-简介\"><a href=\"#Dplay-简介\" class=\"headerlink\" title=\"Dplay 简介\"></a>Dplay 简介</h2><ul>\n<li>github 地址： <code>https://github.com/MoePlayer/DPlayer</code></li>\n<li>简介： HTML5 danmaku 视频播放器</li>\n<li>\b 支持格式： <code>HLS</code> <code>FLV</code> <code>MD5</code></li>\n<li>中文文档地址：<code>http://dplayer.js.org/#/zh-Hans/</code></li>\n</ul>\n<h2 id=\"带背景图的组件\"><a href=\"#带背景图的组件\" class=\"headerlink\" title=\"带背景图的组件\"></a>带背景图的组件</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\b<span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"full\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"dplayer-container\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"player\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">v-if</span>=<span class=\"string\">\"poster &amp;&amp; posterIsShow\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      @<span class=\"attr\">click</span>=<span class=\"string\">\"play\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">class</span>=<span class=\"string\">\"cover-wraper\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">style</span>=<span class=\"string\">\"z-index: 10000\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"poster\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"poster\"</span> <span class=\"attr\">:src</span>=<span class=\"string\">\"poster\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"poster\"</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">\"play-btn\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./play_icon.png\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>实例化所使用的 js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.Hls = <span class=\"built_in\">require</span>(<span class=\"string\">'hls.js'</span>)</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'dplayer/dist/DPlayer.min.css'</span> <span class=\"comment\">// 引入样式css</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> DPlayer <span class=\"keyword\">from</span> <span class=\"string\">'dplayer'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    urls: &#123;</span><br><span class=\"line\">      type: <span class=\"built_in\">Array</span>,</span><br><span class=\"line\">      <span class=\"keyword\">default</span>: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> [] <span class=\"comment\">// [&#123;url: '', name: ''&#125;]</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    src: &#123;</span><br><span class=\"line\">      type: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">      <span class=\"keyword\">default</span>: <span class=\"string\">''</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    poster: &#123;</span><br><span class=\"line\">      type: <span class=\"built_in\">String</span>, <span class=\"comment\">// pointer主动显示播放按钮，所以添加一个图片封面</span></span><br><span class=\"line\">      <span class=\"keyword\">default</span>: <span class=\"string\">''</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    label: &#123;</span><br><span class=\"line\">      type: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">      <span class=\"keyword\">default</span>: <span class=\"string\">''</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      posterIsShow: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  computed: &#123;</span><br><span class=\"line\">    quality() &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 多</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> names = &#123;</span><br><span class=\"line\">        FD: <span class=\"string\">'超清'</span>,</span><br><span class=\"line\">        LD: <span class=\"string\">'高清'</span>,</span><br><span class=\"line\">        SD: <span class=\"string\">'流畅'</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.urls.map(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> (&#123;</span><br><span class=\"line\">        url: item.play_url,</span><br><span class=\"line\">        name: names[item.definition] || item.definition</span><br><span class=\"line\">      &#125;))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mounted() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.init()</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  beforeDestroy() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.dp) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.dp.destroy()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    init() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> urlObj = <span class=\"keyword\">this</span>.src ? &#123; <span class=\"attr\">url</span>: <span class=\"keyword\">this</span>.src &#125; : &#123; <span class=\"attr\">quality</span>: <span class=\"keyword\">this</span>.quality &#125;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.dp = <span class=\"keyword\">new</span> DPlayer(&#123;</span><br><span class=\"line\">        container: <span class=\"keyword\">this</span>.$refs.player,</span><br><span class=\"line\">        preload: <span class=\"string\">'none'</span>,</span><br><span class=\"line\">        autoplay: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        video: &#123;</span><br><span class=\"line\">          ...urlObj,</span><br><span class=\"line\">          defaultQuality: <span class=\"number\">0</span>,</span><br><span class=\"line\">          pic: <span class=\"keyword\">this</span>.poster,</span><br><span class=\"line\">          thumbnails: <span class=\"keyword\">this</span>.poster</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// screenshot: true, // 截图</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      <span class=\"comment\">// this.dp.on('ended', () =&gt; &#123;</span></span><br><span class=\"line\">      <span class=\"comment\">//   this.posterIsShow = true</span></span><br><span class=\"line\">      <span class=\"comment\">// &#125;);</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.dp.on(<span class=\"string\">'play'</span>, () =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.posterIsShow = <span class=\"literal\">false</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      <span class=\"comment\">// this.dp.on('pause', () =&gt; &#123;</span></span><br><span class=\"line\">      <span class=\"comment\">//   this.posterIsShow = false</span></span><br><span class=\"line\">      <span class=\"comment\">// &#125;);</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    play() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.dp) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.dp.play()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"full\"</span>&gt;</span><br><span class=\"line\">    &lt;dplayer</span><br><span class=\"line\">      :label=<span class=\"string\">\"label\"</span></span><br><span class=\"line\">      ref=<span class=\"string\">\"dplayer\"</span></span><br><span class=\"line\">      v-<span class=\"keyword\">if</span>=<span class=\"string\">\"src || urls.length\"</span></span><br><span class=\"line\">      :urls=<span class=\"string\">\"urls\"</span></span><br><span class=\"line\">      :src=<span class=\"string\">\"src\"</span></span><br><span class=\"line\">      :poster=<span class=\"string\">\"poster\"</span></span><br><span class=\"line\">    /&gt;</span><br><span class=\"line\">    &lt;img v-<span class=\"keyword\">else</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"play-btn\"</span> src=<span class=\"string\">\"./play_icon.png\"</span> /&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Dplayer <span class=\"keyword\">from</span> <span class=\"string\">'./Dplayer.vue'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    Dplayer</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    urls: &#123;</span><br><span class=\"line\">      type: <span class=\"built_in\">Array</span>,</span><br><span class=\"line\">      <span class=\"keyword\">default</span>: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> []</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    src: &#123;</span><br><span class=\"line\">      type: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">      <span class=\"keyword\">default</span>: <span class=\"string\">''</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    poster: &#123;</span><br><span class=\"line\">      type: <span class=\"built_in\">String</span>, <span class=\"comment\">// pointer主动显示播放按钮，所以添加一个图片封面</span></span><br><span class=\"line\">      <span class=\"keyword\">default</span>: <span class=\"string\">''</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    label: &#123;</span><br><span class=\"line\">      type: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">      <span class=\"keyword\">default</span>: <span class=\"string\">''</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    play() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.$refs.dplayer) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.$refs.dplayer.play()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&lt;style scoped lang=\"scss\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">.full &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  background-color: #f5f5f5;</span></span><br><span class=\"line\"><span class=\"regexp\">  position: relative;</span></span><br><span class=\"line\"><span class=\"regexp\">  .play-btn &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    position: absolute;</span></span><br><span class=\"line\"><span class=\"regexp\">    left: 0;</span></span><br><span class=\"line\"><span class=\"regexp\">    top: 0;</span></span><br><span class=\"line\"><span class=\"regexp\">    right: 0;</span></span><br><span class=\"line\"><span class=\"regexp\">    bottom: 0;</span></span><br><span class=\"line\"><span class=\"regexp\">    margin: auto;</span></span><br><span class=\"line\"><span class=\"regexp\">    width: 70px;</span></span><br><span class=\"line\"><span class=\"regexp\">    height: 70px;</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>视频播放器之 Dplay<br>最后更新日期 2019 年 01 月 03 日</p>","more":"<p>只是为了单独的记录一下使用方法</p>\n<h2 id=\"Dplay-简介\"><a href=\"#Dplay-简介\" class=\"headerlink\" title=\"Dplay 简介\"></a>Dplay 简介</h2><ul>\n<li>github 地址： <code>https://github.com/MoePlayer/DPlayer</code></li>\n<li>简介： HTML5 danmaku 视频播放器</li>\n<li>\b 支持格式： <code>HLS</code> <code>FLV</code> <code>MD5</code></li>\n<li>中文文档地址：<code>http://dplayer.js.org/#/zh-Hans/</code></li>\n</ul>\n<h2 id=\"带背景图的组件\"><a href=\"#带背景图的组件\" class=\"headerlink\" title=\"带背景图的组件\"></a>带背景图的组件</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\b<span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"full\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"dplayer-container\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"player\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">v-if</span>=<span class=\"string\">\"poster &amp;&amp; posterIsShow\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      @<span class=\"attr\">click</span>=<span class=\"string\">\"play\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">class</span>=<span class=\"string\">\"cover-wraper\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">style</span>=<span class=\"string\">\"z-index: 10000\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"poster\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"poster\"</span> <span class=\"attr\">:src</span>=<span class=\"string\">\"poster\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"poster\"</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">\"play-btn\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./play_icon.png\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>实例化所使用的 js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.Hls = <span class=\"built_in\">require</span>(<span class=\"string\">'hls.js'</span>)</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'dplayer/dist/DPlayer.min.css'</span> <span class=\"comment\">// 引入样式css</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> DPlayer <span class=\"keyword\">from</span> <span class=\"string\">'dplayer'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    urls: &#123;</span><br><span class=\"line\">      type: <span class=\"built_in\">Array</span>,</span><br><span class=\"line\">      <span class=\"keyword\">default</span>: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> [] <span class=\"comment\">// [&#123;url: '', name: ''&#125;]</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    src: &#123;</span><br><span class=\"line\">      type: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">      <span class=\"keyword\">default</span>: <span class=\"string\">''</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    poster: &#123;</span><br><span class=\"line\">      type: <span class=\"built_in\">String</span>, <span class=\"comment\">// pointer主动显示播放按钮，所以添加一个图片封面</span></span><br><span class=\"line\">      <span class=\"keyword\">default</span>: <span class=\"string\">''</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    label: &#123;</span><br><span class=\"line\">      type: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">      <span class=\"keyword\">default</span>: <span class=\"string\">''</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      posterIsShow: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  computed: &#123;</span><br><span class=\"line\">    quality() &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 多</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> names = &#123;</span><br><span class=\"line\">        FD: <span class=\"string\">'超清'</span>,</span><br><span class=\"line\">        LD: <span class=\"string\">'高清'</span>,</span><br><span class=\"line\">        SD: <span class=\"string\">'流畅'</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.urls.map(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> (&#123;</span><br><span class=\"line\">        url: item.play_url,</span><br><span class=\"line\">        name: names[item.definition] || item.definition</span><br><span class=\"line\">      &#125;))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mounted() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.init()</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  beforeDestroy() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.dp) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.dp.destroy()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    init() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> urlObj = <span class=\"keyword\">this</span>.src ? &#123; <span class=\"attr\">url</span>: <span class=\"keyword\">this</span>.src &#125; : &#123; <span class=\"attr\">quality</span>: <span class=\"keyword\">this</span>.quality &#125;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.dp = <span class=\"keyword\">new</span> DPlayer(&#123;</span><br><span class=\"line\">        container: <span class=\"keyword\">this</span>.$refs.player,</span><br><span class=\"line\">        preload: <span class=\"string\">'none'</span>,</span><br><span class=\"line\">        autoplay: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        video: &#123;</span><br><span class=\"line\">          ...urlObj,</span><br><span class=\"line\">          defaultQuality: <span class=\"number\">0</span>,</span><br><span class=\"line\">          pic: <span class=\"keyword\">this</span>.poster,</span><br><span class=\"line\">          thumbnails: <span class=\"keyword\">this</span>.poster</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// screenshot: true, // 截图</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      <span class=\"comment\">// this.dp.on('ended', () =&gt; &#123;</span></span><br><span class=\"line\">      <span class=\"comment\">//   this.posterIsShow = true</span></span><br><span class=\"line\">      <span class=\"comment\">// &#125;);</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.dp.on(<span class=\"string\">'play'</span>, () =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.posterIsShow = <span class=\"literal\">false</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      <span class=\"comment\">// this.dp.on('pause', () =&gt; &#123;</span></span><br><span class=\"line\">      <span class=\"comment\">//   this.posterIsShow = false</span></span><br><span class=\"line\">      <span class=\"comment\">// &#125;);</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    play() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.dp) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.dp.play()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"full\"</span>&gt;</span><br><span class=\"line\">    &lt;dplayer</span><br><span class=\"line\">      :label=<span class=\"string\">\"label\"</span></span><br><span class=\"line\">      ref=<span class=\"string\">\"dplayer\"</span></span><br><span class=\"line\">      v-<span class=\"keyword\">if</span>=<span class=\"string\">\"src || urls.length\"</span></span><br><span class=\"line\">      :urls=<span class=\"string\">\"urls\"</span></span><br><span class=\"line\">      :src=<span class=\"string\">\"src\"</span></span><br><span class=\"line\">      :poster=<span class=\"string\">\"poster\"</span></span><br><span class=\"line\">    /&gt;</span><br><span class=\"line\">    &lt;img v-<span class=\"keyword\">else</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"play-btn\"</span> src=<span class=\"string\">\"./play_icon.png\"</span> /&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Dplayer <span class=\"keyword\">from</span> <span class=\"string\">'./Dplayer.vue'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    Dplayer</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    urls: &#123;</span><br><span class=\"line\">      type: <span class=\"built_in\">Array</span>,</span><br><span class=\"line\">      <span class=\"keyword\">default</span>: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> []</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    src: &#123;</span><br><span class=\"line\">      type: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">      <span class=\"keyword\">default</span>: <span class=\"string\">''</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    poster: &#123;</span><br><span class=\"line\">      type: <span class=\"built_in\">String</span>, <span class=\"comment\">// pointer主动显示播放按钮，所以添加一个图片封面</span></span><br><span class=\"line\">      <span class=\"keyword\">default</span>: <span class=\"string\">''</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    label: &#123;</span><br><span class=\"line\">      type: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">      <span class=\"keyword\">default</span>: <span class=\"string\">''</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    play() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.$refs.dplayer) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.$refs.dplayer.play()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&lt;style scoped lang=\"scss\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">.full &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  background-color: #f5f5f5;</span></span><br><span class=\"line\"><span class=\"regexp\">  position: relative;</span></span><br><span class=\"line\"><span class=\"regexp\">  .play-btn &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    position: absolute;</span></span><br><span class=\"line\"><span class=\"regexp\">    left: 0;</span></span><br><span class=\"line\"><span class=\"regexp\">    top: 0;</span></span><br><span class=\"line\"><span class=\"regexp\">    right: 0;</span></span><br><span class=\"line\"><span class=\"regexp\">    bottom: 0;</span></span><br><span class=\"line\"><span class=\"regexp\">    margin: auto;</span></span><br><span class=\"line\"><span class=\"regexp\">    width: 70px;</span></span><br><span class=\"line\"><span class=\"regexp\">    height: 70px;</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"require和import","date":"2018-11-06T16:00:00.000Z","_content":"\n`require` 和 `import`\n最后更新日期 2018 年 11 月 07 日\n\n<!-- more  -->\n\n# 模块化\n\n> 定义： 模块是自动运行在严格模式下并且没有那么办法退出的 `JavaScript` 代码。 与共享一切框架相反的是，在模块顶部创建的变量不会自动添加到全局共享作用域，而且模块必须导出一些外部代码可以访问的元素（变量或者函数）\n\n- 模块中 `this` 的值是 `undefined`\n- 可以支持导入和导出\n- 不支持 `HTML` 格式的注释\n\n## 先谈导出\n\n关键字 `export`\n\n> 可以通过 `export` 将任何变量、函数或类导出\n\n```js\nlet template = ''\n//  导出变量\nexport template\n//  导出函数\nexport function name() {}\n// 到处类\nexport class Test{\n  constructor(...) {\n    ...\n  }\n}\n----------------------\nfunction test() {\n  ...\n}\nexport test\n\n```\n\n模块的默认值（在学习 node 中了解的）\n\n**_ 通过 `default` 关键字导出 _**\n\n```js\n// template.js 导出方法或变量\nexport default function test(a) {\n    ...\n}\n\n// index.js  引入方法\nimport {test} from './template.js'\n\n```\n\n> default: 其实就是语法糖， 好处在于 import 引入的时候可以省去{}\n\n```js\n// test.js\nexport default function () {}\n\n// 引入\nimport test from './test.js'\ntest()\n\n// 等同于\nfunction test () {}\nexport {test as default}  //向外界暴露的是test这个变量\n\n//\nimport {default as test} from './test.js'\ntest()\n```\n\n## require 模块\n\n> node 中最重要的思想之一：模块。node 的 module 遵循 CommonJs 规范，requierjs 遵循 AMD，seajs 遵循 CMD，都是使代码风格保持一致的手段\n\n```js\n// node\nmodule.exports = {\n  // module.exports 要加上s,但是并不是模块化的规范，只是node的一个私有属性\n  test: function(a) {\n    console.log(a)\n  }\n}\n// 引入\nconst a = requier('./test')\na.test(1) // 1\n\n// AMD or CMD\ndefine(function(require, exports, module) {\n  module.exports = {\n    test: function(a) {\n      console.log(a)\n    }\n  }\n})\n// 引入\ndefine(function(require, exports, module) {\n  const a = requier('./test')\n  a.test(1) // 1\n})\n\n// 区别在于最外层是够使用了define提供的闭包函数\n```\n\n> 区别：  \n> import 是编译时加载的,不会添加多余的变量，性能上也较好;require 是代码实际运行是加载的，所以 require 可以在代码的任何地方使用\n\n```js\nrequier('./test.js')()\n```\n","source":"_posts/2018-11-07-require-and-import.md","raw":"---\nlayout: post\ntitle: require和import\ndate: 2018-11-07\ncategories: ES6\ntags:\n  - JavaScript\n  - 前端\n  - ES6\n---\n\n`require` 和 `import`\n最后更新日期 2018 年 11 月 07 日\n\n<!-- more  -->\n\n# 模块化\n\n> 定义： 模块是自动运行在严格模式下并且没有那么办法退出的 `JavaScript` 代码。 与共享一切框架相反的是，在模块顶部创建的变量不会自动添加到全局共享作用域，而且模块必须导出一些外部代码可以访问的元素（变量或者函数）\n\n- 模块中 `this` 的值是 `undefined`\n- 可以支持导入和导出\n- 不支持 `HTML` 格式的注释\n\n## 先谈导出\n\n关键字 `export`\n\n> 可以通过 `export` 将任何变量、函数或类导出\n\n```js\nlet template = ''\n//  导出变量\nexport template\n//  导出函数\nexport function name() {}\n// 到处类\nexport class Test{\n  constructor(...) {\n    ...\n  }\n}\n----------------------\nfunction test() {\n  ...\n}\nexport test\n\n```\n\n模块的默认值（在学习 node 中了解的）\n\n**_ 通过 `default` 关键字导出 _**\n\n```js\n// template.js 导出方法或变量\nexport default function test(a) {\n    ...\n}\n\n// index.js  引入方法\nimport {test} from './template.js'\n\n```\n\n> default: 其实就是语法糖， 好处在于 import 引入的时候可以省去{}\n\n```js\n// test.js\nexport default function () {}\n\n// 引入\nimport test from './test.js'\ntest()\n\n// 等同于\nfunction test () {}\nexport {test as default}  //向外界暴露的是test这个变量\n\n//\nimport {default as test} from './test.js'\ntest()\n```\n\n## require 模块\n\n> node 中最重要的思想之一：模块。node 的 module 遵循 CommonJs 规范，requierjs 遵循 AMD，seajs 遵循 CMD，都是使代码风格保持一致的手段\n\n```js\n// node\nmodule.exports = {\n  // module.exports 要加上s,但是并不是模块化的规范，只是node的一个私有属性\n  test: function(a) {\n    console.log(a)\n  }\n}\n// 引入\nconst a = requier('./test')\na.test(1) // 1\n\n// AMD or CMD\ndefine(function(require, exports, module) {\n  module.exports = {\n    test: function(a) {\n      console.log(a)\n    }\n  }\n})\n// 引入\ndefine(function(require, exports, module) {\n  const a = requier('./test')\n  a.test(1) // 1\n})\n\n// 区别在于最外层是够使用了define提供的闭包函数\n```\n\n> 区别：  \n> import 是编译时加载的,不会添加多余的变量，性能上也较好;require 是代码实际运行是加载的，所以 require 可以在代码的任何地方使用\n\n```js\nrequier('./test.js')()\n```\n","slug":"2018-11-07-require-and-import","published":1,"updated":"2019-04-24T06:15:50.961Z","comments":1,"photos":[],"link":"","_id":"cjvbyxkhf0007w0oopzll33nc","content":"<p><code>require</code> 和 <code>import</code><br>最后更新日期 2018 年 11 月 07 日</p>\n<a id=\"more\"></a>\n<h1 id=\"模块化\"><a href=\"#模块化\" class=\"headerlink\" title=\"模块化\"></a>模块化</h1><blockquote>\n<p>定义： 模块是自动运行在严格模式下并且没有那么办法退出的 <code>JavaScript</code> 代码。 与共享一切框架相反的是，在模块顶部创建的变量不会自动添加到全局共享作用域，而且模块必须导出一些外部代码可以访问的元素（变量或者函数）</p>\n</blockquote>\n<ul>\n<li>模块中 <code>this</code> 的值是 <code>undefined</code></li>\n<li>可以支持导入和导出</li>\n<li>不支持 <code>HTML</code> 格式的注释</li>\n</ul>\n<h2 id=\"先谈导出\"><a href=\"#先谈导出\" class=\"headerlink\" title=\"先谈导出\"></a>先谈导出</h2><p>关键字 <code>export</code></p>\n<blockquote>\n<p>可以通过 <code>export</code> 将任何变量、函数或类导出</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> template = <span class=\"string\">''</span></span><br><span class=\"line\"><span class=\"comment\">//  导出变量</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> template</span><br><span class=\"line\"><span class=\"comment\">//  导出函数</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">name</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">// 到处类</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(...) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">----------------------</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> test</span><br></pre></td></tr></table></figure>\n<p>模块的默认值（在学习 node 中了解的）</p>\n<p><strong>_ 通过 <code>default</code> 关键字导出 _</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// template.js 导出方法或变量</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">a</span>) </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// index.js  引入方法</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;test&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./template.js'</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>default: 其实就是语法糖， 好处在于 import 引入的时候可以省去{}</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// test.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 引入</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> test <span class=\"keyword\">from</span> <span class=\"string\">'./test.js'</span></span><br><span class=\"line\">test()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;test <span class=\"keyword\">as</span> <span class=\"keyword\">default</span>&#125;  <span class=\"comment\">//向外界暴露的是test这个变量</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;<span class=\"keyword\">default</span> <span class=\"keyword\">as</span> test&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./test.js'</span></span><br><span class=\"line\">test()</span><br></pre></td></tr></table></figure>\n<h2 id=\"require-模块\"><a href=\"#require-模块\" class=\"headerlink\" title=\"require 模块\"></a>require 模块</h2><blockquote>\n<p>node 中最重要的思想之一：模块。node 的 module 遵循 CommonJs 规范，requierjs 遵循 AMD，seajs 遵循 CMD，都是使代码风格保持一致的手段</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// node</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// module.exports 要加上s,但是并不是模块化的规范，只是node的一个私有属性</span></span><br><span class=\"line\">  test: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 引入</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> a = requier(<span class=\"string\">'./test'</span>)</span><br><span class=\"line\">a.test(<span class=\"number\">1</span>) <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// AMD or CMD</span></span><br><span class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require, exports, module</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    test: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(a)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 引入</span></span><br><span class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require, exports, module</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> a = requier(<span class=\"string\">'./test'</span>)</span><br><span class=\"line\">  a.test(<span class=\"number\">1</span>) <span class=\"comment\">// 1</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 区别在于最外层是够使用了define提供的闭包函数</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>区别：<br>import 是编译时加载的,不会添加多余的变量，性能上也较好;require 是代码实际运行是加载的，所以 require 可以在代码的任何地方使用</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">requier(<span class=\"string\">'./test.js'</span>)()</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p><code>require</code> 和 <code>import</code><br>最后更新日期 2018 年 11 月 07 日</p>","more":"<h1 id=\"模块化\"><a href=\"#模块化\" class=\"headerlink\" title=\"模块化\"></a>模块化</h1><blockquote>\n<p>定义： 模块是自动运行在严格模式下并且没有那么办法退出的 <code>JavaScript</code> 代码。 与共享一切框架相反的是，在模块顶部创建的变量不会自动添加到全局共享作用域，而且模块必须导出一些外部代码可以访问的元素（变量或者函数）</p>\n</blockquote>\n<ul>\n<li>模块中 <code>this</code> 的值是 <code>undefined</code></li>\n<li>可以支持导入和导出</li>\n<li>不支持 <code>HTML</code> 格式的注释</li>\n</ul>\n<h2 id=\"先谈导出\"><a href=\"#先谈导出\" class=\"headerlink\" title=\"先谈导出\"></a>先谈导出</h2><p>关键字 <code>export</code></p>\n<blockquote>\n<p>可以通过 <code>export</code> 将任何变量、函数或类导出</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> template = <span class=\"string\">''</span></span><br><span class=\"line\"><span class=\"comment\">//  导出变量</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> template</span><br><span class=\"line\"><span class=\"comment\">//  导出函数</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">name</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">// 到处类</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(...) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">----------------------</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> test</span><br></pre></td></tr></table></figure>\n<p>模块的默认值（在学习 node 中了解的）</p>\n<p><strong>_ 通过 <code>default</code> 关键字导出 _</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// template.js 导出方法或变量</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">a</span>) </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// index.js  引入方法</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;test&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./template.js'</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>default: 其实就是语法糖， 好处在于 import 引入的时候可以省去{}</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// test.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 引入</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> test <span class=\"keyword\">from</span> <span class=\"string\">'./test.js'</span></span><br><span class=\"line\">test()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;test <span class=\"keyword\">as</span> <span class=\"keyword\">default</span>&#125;  <span class=\"comment\">//向外界暴露的是test这个变量</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;<span class=\"keyword\">default</span> <span class=\"keyword\">as</span> test&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./test.js'</span></span><br><span class=\"line\">test()</span><br></pre></td></tr></table></figure>\n<h2 id=\"require-模块\"><a href=\"#require-模块\" class=\"headerlink\" title=\"require 模块\"></a>require 模块</h2><blockquote>\n<p>node 中最重要的思想之一：模块。node 的 module 遵循 CommonJs 规范，requierjs 遵循 AMD，seajs 遵循 CMD，都是使代码风格保持一致的手段</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// node</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// module.exports 要加上s,但是并不是模块化的规范，只是node的一个私有属性</span></span><br><span class=\"line\">  test: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 引入</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> a = requier(<span class=\"string\">'./test'</span>)</span><br><span class=\"line\">a.test(<span class=\"number\">1</span>) <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// AMD or CMD</span></span><br><span class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require, exports, module</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    test: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(a)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 引入</span></span><br><span class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require, exports, module</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> a = requier(<span class=\"string\">'./test'</span>)</span><br><span class=\"line\">  a.test(<span class=\"number\">1</span>) <span class=\"comment\">// 1</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 区别在于最外层是够使用了define提供的闭包函数</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>区别：<br>import 是编译时加载的,不会添加多余的变量，性能上也较好;require 是代码实际运行是加载的，所以 require 可以在代码的任何地方使用</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">requier(<span class=\"string\">'./test.js'</span>)()</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"常见的css布局","date":"2019-01-01T16:00:00.000Z","_content":"\n列表项布局\n最后更新时间 2019-01-02\n\n<!-- more -->\n\n# 列表项布局\n\n使用 `last-child()` 来控制右边和下边的边距\n\n```html\n<div class=\"container\">\n  <div class=\"item\">宽度已知，最多放三个</div>\n  <div class=\"item\">宽度已知，最多放三个</div>\n  <div class=\"item\">宽度已知，最多放三个</div>\n  ...\n</div>\n\n<style>\n  /* scss code */\n  .container {\n    .item {\n      margin-right: 30px;\n      margin-bottom: 20px;\n\n      &:nth-child(3n) {\n        margin-right: 0;\n      }\n      &:nth-last-child(-n + 3) {\n        margin-bottom: 0;\n      }\n    }\n  }\n</style>\n```\n\n## flex 和 负 margin 布局\n\nflex 布局的 justify-content 主轴属性来控制元素的间距\n\n```html\n<div class=\"wrapper\">\n  <div class=\"container\">\n    <div class=\"item\">两个才能成一行呀</div>\n    <div class=\"item\">两个才能成一行呀</div>\n    <div class=\"item\">这三个字</div>\n    <div class=\"item\">独成一行呀独成一行呀独成一行呀独</div>\n    <div class=\"item\">两个才能成一行呀</div>\n    <div class=\"item\">四个</div>\n  </div>\n</div>\n\n<style>\n  /* scss code */\n  .wrapper {\n    padding: 10px;\n    border: 2px solid rgb(240, 103, 103);\n\n    .container {\n      display: flex;\n      flex-wrap: wrap;\n      margin-right: -30px;\n      margin-bottom: -20px;\n\n      .item {\n        margin-right: 30px;\n        margin-bottom: 20px;\n      }\n    }\n  }\n</style>\n```\n\n## flex 详解\n\n主要使用：\n\n- 父容器： justify-content 和 align-items\n- 子容器： flex 和 align-self\n\n```css\n/* 父容器 */\njustify-content: flex-top;\n/* flex-end center space-between space-around */\nalign-items: flex-top;\n/* flex-end center baseline stretch */\nflex-wrap: wrap;\n/* wrap换行 nowrap不换行 wrap-reversefan x w w */\n\n/* 子容器: 有弹性，会自动填充剩余空间*/\nflex: none;\n/* flex是多个属性的缩写，允许1-3个值连用 */\nalign-self: center;\n```\n","source":"_posts/2019-01-02-常见的css布局.md","raw":"---\nlayout: post\ntitle: 常见的css布局\ndate: 2019-01-02\ncategories: css\ntags:\n  - css\n  - 前端\n---\n\n列表项布局\n最后更新时间 2019-01-02\n\n<!-- more -->\n\n# 列表项布局\n\n使用 `last-child()` 来控制右边和下边的边距\n\n```html\n<div class=\"container\">\n  <div class=\"item\">宽度已知，最多放三个</div>\n  <div class=\"item\">宽度已知，最多放三个</div>\n  <div class=\"item\">宽度已知，最多放三个</div>\n  ...\n</div>\n\n<style>\n  /* scss code */\n  .container {\n    .item {\n      margin-right: 30px;\n      margin-bottom: 20px;\n\n      &:nth-child(3n) {\n        margin-right: 0;\n      }\n      &:nth-last-child(-n + 3) {\n        margin-bottom: 0;\n      }\n    }\n  }\n</style>\n```\n\n## flex 和 负 margin 布局\n\nflex 布局的 justify-content 主轴属性来控制元素的间距\n\n```html\n<div class=\"wrapper\">\n  <div class=\"container\">\n    <div class=\"item\">两个才能成一行呀</div>\n    <div class=\"item\">两个才能成一行呀</div>\n    <div class=\"item\">这三个字</div>\n    <div class=\"item\">独成一行呀独成一行呀独成一行呀独</div>\n    <div class=\"item\">两个才能成一行呀</div>\n    <div class=\"item\">四个</div>\n  </div>\n</div>\n\n<style>\n  /* scss code */\n  .wrapper {\n    padding: 10px;\n    border: 2px solid rgb(240, 103, 103);\n\n    .container {\n      display: flex;\n      flex-wrap: wrap;\n      margin-right: -30px;\n      margin-bottom: -20px;\n\n      .item {\n        margin-right: 30px;\n        margin-bottom: 20px;\n      }\n    }\n  }\n</style>\n```\n\n## flex 详解\n\n主要使用：\n\n- 父容器： justify-content 和 align-items\n- 子容器： flex 和 align-self\n\n```css\n/* 父容器 */\njustify-content: flex-top;\n/* flex-end center space-between space-around */\nalign-items: flex-top;\n/* flex-end center baseline stretch */\nflex-wrap: wrap;\n/* wrap换行 nowrap不换行 wrap-reversefan x w w */\n\n/* 子容器: 有弹性，会自动填充剩余空间*/\nflex: none;\n/* flex是多个属性的缩写，允许1-3个值连用 */\nalign-self: center;\n```\n","slug":"2019-01-02-常见的css布局","published":1,"updated":"2019-04-24T06:20:47.934Z","comments":1,"photos":[],"link":"","_id":"cjvbyxkhh0009w0oowt7ar3kt","content":"<p>列表项布局<br>最后更新时间 2019-01-02</p>\n<a id=\"more\"></a>\n<h1 id=\"列表项布局\"><a href=\"#列表项布局\" class=\"headerlink\" title=\"列表项布局\"></a>列表项布局</h1><p>使用 <code>last-child()</code> 来控制右边和下边的边距</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span>宽度已知，最多放三个<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span>宽度已知，最多放三个<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span>宽度已知，最多放三个<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">  /* scss code */</span></span><br><span class=\"line\"><span class=\"undefined\">  .container &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    .item &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      margin-right: 30px;</span></span><br><span class=\"line\"><span class=\"undefined\">      margin-bottom: 20px;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">      &amp;:nth-child(3n) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        margin-right: 0;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">      &amp;:nth-last-child(-n + 3) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        margin-bottom: 0;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"flex-和-负-margin-布局\"><a href=\"#flex-和-负-margin-布局\" class=\"headerlink\" title=\"flex 和 负 margin 布局\"></a>flex 和 负 margin 布局</h2><p>flex 布局的 justify-content 主轴属性来控制元素的间距</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrapper\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span>两个才能成一行呀<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span>两个才能成一行呀<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span>这三个字<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span>独成一行呀独成一行呀独成一行呀独<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span>两个才能成一行呀<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span>四个<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">  /* scss code */</span></span><br><span class=\"line\"><span class=\"undefined\">  .wrapper &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    padding: 10px;</span></span><br><span class=\"line\"><span class=\"undefined\">    border: 2px solid rgb(240, 103, 103);</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    .container &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      display: flex;</span></span><br><span class=\"line\"><span class=\"undefined\">      flex-wrap: wrap;</span></span><br><span class=\"line\"><span class=\"undefined\">      margin-right: -30px;</span></span><br><span class=\"line\"><span class=\"undefined\">      margin-bottom: -20px;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">      .item &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        margin-right: 30px;</span></span><br><span class=\"line\"><span class=\"undefined\">        margin-bottom: 20px;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"flex-详解\"><a href=\"#flex-详解\" class=\"headerlink\" title=\"flex 详解\"></a>flex 详解</h2><p>主要使用：</p>\n<ul>\n<li>父容器： justify-content 和 align-items</li>\n<li>子容器： flex 和 align-self</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 父容器 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">justify-content</span>: <span class=\"selector-tag\">flex-top</span>;</span><br><span class=\"line\"><span class=\"comment\">/* flex-end center space-between space-around */</span></span><br><span class=\"line\"><span class=\"selector-tag\">align-items</span>: <span class=\"selector-tag\">flex-top</span>;</span><br><span class=\"line\"><span class=\"comment\">/* flex-end center baseline stretch */</span></span><br><span class=\"line\"><span class=\"selector-tag\">flex-wrap</span>: <span class=\"selector-tag\">wrap</span>;</span><br><span class=\"line\"><span class=\"comment\">/* wrap换行 nowrap不换行 wrap-reversefan x w w */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 子容器: 有弹性，会自动填充剩余空间*/</span></span><br><span class=\"line\"><span class=\"selector-tag\">flex</span>: <span class=\"selector-tag\">none</span>;</span><br><span class=\"line\"><span class=\"comment\">/* flex是多个属性的缩写，允许1-3个值连用 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">align-self</span>: <span class=\"selector-tag\">center</span>;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>列表项布局<br>最后更新时间 2019-01-02</p>","more":"<h1 id=\"列表项布局\"><a href=\"#列表项布局\" class=\"headerlink\" title=\"列表项布局\"></a>列表项布局</h1><p>使用 <code>last-child()</code> 来控制右边和下边的边距</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span>宽度已知，最多放三个<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span>宽度已知，最多放三个<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span>宽度已知，最多放三个<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">  /* scss code */</span></span><br><span class=\"line\"><span class=\"undefined\">  .container &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    .item &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      margin-right: 30px;</span></span><br><span class=\"line\"><span class=\"undefined\">      margin-bottom: 20px;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">      &amp;:nth-child(3n) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        margin-right: 0;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">      &amp;:nth-last-child(-n + 3) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        margin-bottom: 0;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"flex-和-负-margin-布局\"><a href=\"#flex-和-负-margin-布局\" class=\"headerlink\" title=\"flex 和 负 margin 布局\"></a>flex 和 负 margin 布局</h2><p>flex 布局的 justify-content 主轴属性来控制元素的间距</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrapper\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span>两个才能成一行呀<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span>两个才能成一行呀<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span>这三个字<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span>独成一行呀独成一行呀独成一行呀独<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span>两个才能成一行呀<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span>四个<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">  /* scss code */</span></span><br><span class=\"line\"><span class=\"undefined\">  .wrapper &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    padding: 10px;</span></span><br><span class=\"line\"><span class=\"undefined\">    border: 2px solid rgb(240, 103, 103);</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    .container &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      display: flex;</span></span><br><span class=\"line\"><span class=\"undefined\">      flex-wrap: wrap;</span></span><br><span class=\"line\"><span class=\"undefined\">      margin-right: -30px;</span></span><br><span class=\"line\"><span class=\"undefined\">      margin-bottom: -20px;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">      .item &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        margin-right: 30px;</span></span><br><span class=\"line\"><span class=\"undefined\">        margin-bottom: 20px;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"flex-详解\"><a href=\"#flex-详解\" class=\"headerlink\" title=\"flex 详解\"></a>flex 详解</h2><p>主要使用：</p>\n<ul>\n<li>父容器： justify-content 和 align-items</li>\n<li>子容器： flex 和 align-self</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 父容器 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">justify-content</span>: <span class=\"selector-tag\">flex-top</span>;</span><br><span class=\"line\"><span class=\"comment\">/* flex-end center space-between space-around */</span></span><br><span class=\"line\"><span class=\"selector-tag\">align-items</span>: <span class=\"selector-tag\">flex-top</span>;</span><br><span class=\"line\"><span class=\"comment\">/* flex-end center baseline stretch */</span></span><br><span class=\"line\"><span class=\"selector-tag\">flex-wrap</span>: <span class=\"selector-tag\">wrap</span>;</span><br><span class=\"line\"><span class=\"comment\">/* wrap换行 nowrap不换行 wrap-reversefan x w w */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 子容器: 有弹性，会自动填充剩余空间*/</span></span><br><span class=\"line\"><span class=\"selector-tag\">flex</span>: <span class=\"selector-tag\">none</span>;</span><br><span class=\"line\"><span class=\"comment\">/* flex是多个属性的缩写，允许1-3个值连用 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">align-self</span>: <span class=\"selector-tag\">center</span>;</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"阿里云云呼叫软电话SDK前端接入","date":"2019-01-01T16:00:00.000Z","_content":"\n400 客服电话实现思路\n\n<!-- more -->\n\n# 软电话 SDK 简介\n\n[官方文档](https://help.aliyun.com/document_detail/59970.html?spm=a2c4g.11186623.6.542.49955ebfOKew89)\n\n> 云呼叫中心配备了交互式语音应答（IVR），自动呼叫分配（ACD）和大量提升效率的应用。实现 CRM 系统完成客服接听和呼叫用户功能。\n\n实现逻辑：\n\n- 首先需要进行权限判断（只有客服才可以主动和拨打电话和接听电话）在登陆的时候判断当前用户是否时客服，如果是客服，手动分配坐席（\b 使用后台配置的 \b 阿里呼叫中心的登陆账号和密码）\b 隐式触发两个登陆链接，最后手抖判断是否绑定阿里呼叫中心账号 \b。（实现 \b 思路：\b 使用进度条展示，每次点击下一步虚拟化创建一个 iframe,）\n","source":"_posts/2019-01-03-阿里软电话SDK前端.md","raw":"---\nlayout: post\ntitle: 阿里云云呼叫软电话SDK前端接入\ndate: 2019-01-02\ncategories: 云呼叫\ntags:\n  - SDK\n  - 云呼叫\n  - 前端\n---\n\n400 客服电话实现思路\n\n<!-- more -->\n\n# 软电话 SDK 简介\n\n[官方文档](https://help.aliyun.com/document_detail/59970.html?spm=a2c4g.11186623.6.542.49955ebfOKew89)\n\n> 云呼叫中心配备了交互式语音应答（IVR），自动呼叫分配（ACD）和大量提升效率的应用。实现 CRM 系统完成客服接听和呼叫用户功能。\n\n实现逻辑：\n\n- 首先需要进行权限判断（只有客服才可以主动和拨打电话和接听电话）在登陆的时候判断当前用户是否时客服，如果是客服，手动分配坐席（\b 使用后台配置的 \b 阿里呼叫中心的登陆账号和密码）\b 隐式触发两个登陆链接，最后手抖判断是否绑定阿里呼叫中心账号 \b。（实现 \b 思路：\b 使用进度条展示，每次点击下一步虚拟化创建一个 iframe,）\n","slug":"2019-01-03-阿里软电话SDK前端","published":1,"updated":"2019-04-24T06:25:02.549Z","comments":1,"photos":[],"link":"","_id":"cjvbyxkhj000bw0ool8leoct3","content":"<p>400 客服电话实现思路</p>\n<a id=\"more\"></a>\n<h1 id=\"软电话-SDK-简介\"><a href=\"#软电话-SDK-简介\" class=\"headerlink\" title=\"软电话 SDK 简介\"></a>软电话 SDK 简介</h1><p><a href=\"https://help.aliyun.com/document_detail/59970.html?spm=a2c4g.11186623.6.542.49955ebfOKew89\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n<blockquote>\n<p>云呼叫中心配备了交互式语音应答（IVR），自动呼叫分配（ACD）和大量提升效率的应用。实现 CRM 系统完成客服接听和呼叫用户功能。</p>\n</blockquote>\n<p>实现逻辑：</p>\n<ul>\n<li>首先需要进行权限判断（只有客服才可以主动和拨打电话和接听电话）在登陆的时候判断当前用户是否时客服，如果是客服，手动分配坐席（\b 使用后台配置的 \b 阿里呼叫中心的登陆账号和密码）\b 隐式触发两个登陆链接，最后手抖判断是否绑定阿里呼叫中心账号 \b。（实现 \b 思路：\b 使用进度条展示，每次点击下一步虚拟化创建一个 iframe,）</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>400 客服电话实现思路</p>","more":"<h1 id=\"软电话-SDK-简介\"><a href=\"#软电话-SDK-简介\" class=\"headerlink\" title=\"软电话 SDK 简介\"></a>软电话 SDK 简介</h1><p><a href=\"https://help.aliyun.com/document_detail/59970.html?spm=a2c4g.11186623.6.542.49955ebfOKew89\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n<blockquote>\n<p>云呼叫中心配备了交互式语音应答（IVR），自动呼叫分配（ACD）和大量提升效率的应用。实现 CRM 系统完成客服接听和呼叫用户功能。</p>\n</blockquote>\n<p>实现逻辑：</p>\n<ul>\n<li>首先需要进行权限判断（只有客服才可以主动和拨打电话和接听电话）在登陆的时候判断当前用户是否时客服，如果是客服，手动分配坐席（\b 使用后台配置的 \b 阿里呼叫中心的登陆账号和密码）\b 隐式触发两个登陆链接，最后手抖判断是否绑定阿里呼叫中心账号 \b。（实现 \b 思路：\b 使用进度条展示，每次点击下一步虚拟化创建一个 iframe,）</li>\n</ul>"},{"layout":"post","title":"vuex","date":"2018-12-17T16:00:00.000Z","_content":"\n未完待续\n最后跟新时间 2018-12-18\n\n<!-- more -->\n\n# 状态管理(state)\n\n把组件之间需要共享的状态抽取出来，遵循特定的约定，统一来管理，让状态的变化可以预测\n\n## require.context（vuex 全局注入 store）\n\n创建自己的（模块）上下文， 它允许您传入一个目录进行搜索，一个标志指示是否应该搜索子目录，还有一个正则表达式来匹配文件。这个方法有 3 个参数（通俗的来说可以通过这个方法筛选出来需要的文件并读取）\n\n- 要搜索的文件夹目录\n- 是否还搜索它的子目录\n- 一个匹配文件的正则表达式\n\n```js\n/**\n* @param directory 要搜索的文件夹目录不能是变量，否则在编译阶段无法定位目录\n* @param useSubdirectories  是否搜索子目录\n* @param regExp 匹配文件的正则表达式\n* @return function 返回一个具有 resolve, keys, id 三个属性的方法\n          resolve() 它返回请求被解析后得到的模块 id,keys() 它返回一个数组，由所有符合上下文模块处理的请求组成。\n          id 是上下文模块里面所包含的模块 id. 它可能在你使用 module.hot.accept 的时候被用到\n*/\nrequire.context('./modules', (useSubdirectories = false), (regExp = /\\.js$/))\n// (创建了）一个包含了 demo 文件夹（不包含子目录）下面的、所有文件名以 `js` 结尾的、能被 require 请求到的文件的上下文。\n```\n\n> require.context('./modules', false, /\\.js/)\n\n## \b 全局注入 modules 里所有的 store，一起实例化\n\n> 如果一个文件内需要引入多个 store，可以直接引入 index，最后直接使用暴露出来的方法\n\n```js\nimport Vue from 'vue'\nimport Vuex from 'vuex'\n\nVue.use(Vuex)\n\n// 自动引入modules\nconst modules = {}\nfunction requireAll(r) {\n  return r.keys().map(key => {\n    // console.log(key) //./app.js ./user.js ....\n    // console.log(r(key).default) // 每个store里面default出来的函数或者值\n    const k = key.replace('./', '').replace('.js', '')\n    modules[k] = r(key).default\n    // console.log(modules)\n  })\n}\nrequireAll(require.context('./modules', false, /\\.js/))\n\nconst getters = {}\n\n// 最后\b实例化所有的store\nconst store = new Vuex.Store({\n  modules,\n  getters\n})\n\nexport default store\n```\n\n## modules 文件下单个文件的 store\n\n```js\nimport * as fetch from '@/api/index'\n\nconst state = {\n  list: []\n}\n\nconst mutations = {\n  SET_DATA(state, payload = {}) {\n    // Object.entries() 返回的是每个key和value(list 和 [...])\n    Object.entries(payload).forEach(([key, value]) => {\n      state[key] = value\n      // 给state赋值\n    })\n  }\n}\n\nconst actions = {\n  async fetchData({ state, commit }) {\n    const { list } = await fetch.getData()\n    commit('SET_DATA', {\n      list\n    })\n    return list\n  }\n}\n\nexport default {\n  state,\n  mutations,\n  actions\n}\n```\n","source":"_posts/2018-12-20-vuex.md","raw":"---\nlayout: post\ntitle: vuex\ndate: 2018-12-18\ncategories: vuex\ntags:\n  - vuex\n  - webpack\n  - JavaScript\n---\n\n未完待续\n最后跟新时间 2018-12-18\n\n<!-- more -->\n\n# 状态管理(state)\n\n把组件之间需要共享的状态抽取出来，遵循特定的约定，统一来管理，让状态的变化可以预测\n\n## require.context（vuex 全局注入 store）\n\n创建自己的（模块）上下文， 它允许您传入一个目录进行搜索，一个标志指示是否应该搜索子目录，还有一个正则表达式来匹配文件。这个方法有 3 个参数（通俗的来说可以通过这个方法筛选出来需要的文件并读取）\n\n- 要搜索的文件夹目录\n- 是否还搜索它的子目录\n- 一个匹配文件的正则表达式\n\n```js\n/**\n* @param directory 要搜索的文件夹目录不能是变量，否则在编译阶段无法定位目录\n* @param useSubdirectories  是否搜索子目录\n* @param regExp 匹配文件的正则表达式\n* @return function 返回一个具有 resolve, keys, id 三个属性的方法\n          resolve() 它返回请求被解析后得到的模块 id,keys() 它返回一个数组，由所有符合上下文模块处理的请求组成。\n          id 是上下文模块里面所包含的模块 id. 它可能在你使用 module.hot.accept 的时候被用到\n*/\nrequire.context('./modules', (useSubdirectories = false), (regExp = /\\.js$/))\n// (创建了）一个包含了 demo 文件夹（不包含子目录）下面的、所有文件名以 `js` 结尾的、能被 require 请求到的文件的上下文。\n```\n\n> require.context('./modules', false, /\\.js/)\n\n## \b 全局注入 modules 里所有的 store，一起实例化\n\n> 如果一个文件内需要引入多个 store，可以直接引入 index，最后直接使用暴露出来的方法\n\n```js\nimport Vue from 'vue'\nimport Vuex from 'vuex'\n\nVue.use(Vuex)\n\n// 自动引入modules\nconst modules = {}\nfunction requireAll(r) {\n  return r.keys().map(key => {\n    // console.log(key) //./app.js ./user.js ....\n    // console.log(r(key).default) // 每个store里面default出来的函数或者值\n    const k = key.replace('./', '').replace('.js', '')\n    modules[k] = r(key).default\n    // console.log(modules)\n  })\n}\nrequireAll(require.context('./modules', false, /\\.js/))\n\nconst getters = {}\n\n// 最后\b实例化所有的store\nconst store = new Vuex.Store({\n  modules,\n  getters\n})\n\nexport default store\n```\n\n## modules 文件下单个文件的 store\n\n```js\nimport * as fetch from '@/api/index'\n\nconst state = {\n  list: []\n}\n\nconst mutations = {\n  SET_DATA(state, payload = {}) {\n    // Object.entries() 返回的是每个key和value(list 和 [...])\n    Object.entries(payload).forEach(([key, value]) => {\n      state[key] = value\n      // 给state赋值\n    })\n  }\n}\n\nconst actions = {\n  async fetchData({ state, commit }) {\n    const { list } = await fetch.getData()\n    commit('SET_DATA', {\n      list\n    })\n    return list\n  }\n}\n\nexport default {\n  state,\n  mutations,\n  actions\n}\n```\n","slug":"2018-12-20-vuex","published":1,"updated":"2019-04-24T06:20:53.942Z","comments":1,"photos":[],"link":"","_id":"cjvbyxkhm000fw0ooqqrrz6yn","content":"<p>未完待续<br>最后跟新时间 2018-12-18</p>\n<a id=\"more\"></a>\n<h1 id=\"状态管理-state\"><a href=\"#状态管理-state\" class=\"headerlink\" title=\"状态管理(state)\"></a>状态管理(state)</h1><p>把组件之间需要共享的状态抽取出来，遵循特定的约定，统一来管理，让状态的变化可以预测</p>\n<h2 id=\"require-context（vuex-全局注入-store）\"><a href=\"#require-context（vuex-全局注入-store）\" class=\"headerlink\" title=\"require.context（vuex 全局注入 store）\"></a>require.context（vuex 全局注入 store）</h2><p>创建自己的（模块）上下文， 它允许您传入一个目录进行搜索，一个标志指示是否应该搜索子目录，还有一个正则表达式来匹配文件。这个方法有 3 个参数（通俗的来说可以通过这个方法筛选出来需要的文件并读取）</p>\n<ul>\n<li>要搜索的文件夹目录</li>\n<li>是否还搜索它的子目录</li>\n<li>一个匹配文件的正则表达式</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* @param directory 要搜索的文件夹目录不能是变量，否则在编译阶段无法定位目录</span></span><br><span class=\"line\"><span class=\"comment\">* @param useSubdirectories  是否搜索子目录</span></span><br><span class=\"line\"><span class=\"comment\">* @param regExp 匹配文件的正则表达式</span></span><br><span class=\"line\"><span class=\"comment\">* @return function 返回一个具有 resolve, keys, id 三个属性的方法</span></span><br><span class=\"line\"><span class=\"comment\">          resolve() 它返回请求被解析后得到的模块 id,keys() 它返回一个数组，由所有符合上下文模块处理的请求组成。</span></span><br><span class=\"line\"><span class=\"comment\">          id 是上下文模块里面所包含的模块 id. 它可能在你使用 module.hot.accept 的时候被用到</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>.context(<span class=\"string\">'./modules'</span>, (useSubdirectories = <span class=\"literal\">false</span>), (regExp = <span class=\"regexp\">/\\.js$/</span>))</span><br><span class=\"line\"><span class=\"comment\">// (创建了）一个包含了 demo 文件夹（不包含子目录）下面的、所有文件名以 `js` 结尾的、能被 require 请求到的文件的上下文。</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>require.context(‘./modules’, false, /.js/)</p>\n</blockquote>\n<h2 id=\"全局注入-modules-里所有的-store，一起实例化\"><a href=\"#全局注入-modules-里所有的-store，一起实例化\" class=\"headerlink\" title=\"\b 全局注入 modules 里所有的 store，一起实例化\"></a>\b 全局注入 modules 里所有的 store，一起实例化</h2><blockquote>\n<p>如果一个文件内需要引入多个 store，可以直接引入 index，最后直接使用暴露出来的方法</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vuex <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(Vuex)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 自动引入modules</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> modules = &#123;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">requireAll</span>(<span class=\"params\">r</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> r.keys().map(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// console.log(key) //./app.js ./user.js ....</span></span><br><span class=\"line\">    <span class=\"comment\">// console.log(r(key).default) // 每个store里面default出来的函数或者值</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> k = key.replace(<span class=\"string\">'./'</span>, <span class=\"string\">''</span>).replace(<span class=\"string\">'.js'</span>, <span class=\"string\">''</span>)</span><br><span class=\"line\">    modules[k] = r(key).default</span><br><span class=\"line\">    <span class=\"comment\">// console.log(modules)</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">requireAll(<span class=\"built_in\">require</span>.context(<span class=\"string\">'./modules'</span>, <span class=\"literal\">false</span>, /\\.js/))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getters = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 最后\b实例化所有的store</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  modules,</span><br><span class=\"line\">  getters</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> store</span><br></pre></td></tr></table></figure>\n<h2 id=\"modules-文件下单个文件的-store\"><a href=\"#modules-文件下单个文件的-store\" class=\"headerlink\" title=\"modules 文件下单个文件的 store\"></a>modules 文件下单个文件的 store</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> fetch <span class=\"keyword\">from</span> <span class=\"string\">'@/api/index'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> state = &#123;</span><br><span class=\"line\">  list: []</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> mutations = &#123;</span><br><span class=\"line\">  SET_DATA(state, payload = &#123;&#125;) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Object.entries() 返回的是每个key和value(list 和 [...])</span></span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.entries(payload).forEach(<span class=\"function\">(<span class=\"params\">[key, value]</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      state[key] = value</span><br><span class=\"line\">      <span class=\"comment\">// 给state赋值</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> actions = &#123;</span><br><span class=\"line\">  <span class=\"keyword\">async</span> fetchData(&#123; state, commit &#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; list &#125; = <span class=\"keyword\">await</span> fetch.getData()</span><br><span class=\"line\">    commit(<span class=\"string\">'SET_DATA'</span>, &#123;</span><br><span class=\"line\">      list</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> list</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  state,</span><br><span class=\"line\">  mutations,</span><br><span class=\"line\">  actions</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>未完待续<br>最后跟新时间 2018-12-18</p>","more":"<h1 id=\"状态管理-state\"><a href=\"#状态管理-state\" class=\"headerlink\" title=\"状态管理(state)\"></a>状态管理(state)</h1><p>把组件之间需要共享的状态抽取出来，遵循特定的约定，统一来管理，让状态的变化可以预测</p>\n<h2 id=\"require-context（vuex-全局注入-store）\"><a href=\"#require-context（vuex-全局注入-store）\" class=\"headerlink\" title=\"require.context（vuex 全局注入 store）\"></a>require.context（vuex 全局注入 store）</h2><p>创建自己的（模块）上下文， 它允许您传入一个目录进行搜索，一个标志指示是否应该搜索子目录，还有一个正则表达式来匹配文件。这个方法有 3 个参数（通俗的来说可以通过这个方法筛选出来需要的文件并读取）</p>\n<ul>\n<li>要搜索的文件夹目录</li>\n<li>是否还搜索它的子目录</li>\n<li>一个匹配文件的正则表达式</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* @param directory 要搜索的文件夹目录不能是变量，否则在编译阶段无法定位目录</span></span><br><span class=\"line\"><span class=\"comment\">* @param useSubdirectories  是否搜索子目录</span></span><br><span class=\"line\"><span class=\"comment\">* @param regExp 匹配文件的正则表达式</span></span><br><span class=\"line\"><span class=\"comment\">* @return function 返回一个具有 resolve, keys, id 三个属性的方法</span></span><br><span class=\"line\"><span class=\"comment\">          resolve() 它返回请求被解析后得到的模块 id,keys() 它返回一个数组，由所有符合上下文模块处理的请求组成。</span></span><br><span class=\"line\"><span class=\"comment\">          id 是上下文模块里面所包含的模块 id. 它可能在你使用 module.hot.accept 的时候被用到</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>.context(<span class=\"string\">'./modules'</span>, (useSubdirectories = <span class=\"literal\">false</span>), (regExp = <span class=\"regexp\">/\\.js$/</span>))</span><br><span class=\"line\"><span class=\"comment\">// (创建了）一个包含了 demo 文件夹（不包含子目录）下面的、所有文件名以 `js` 结尾的、能被 require 请求到的文件的上下文。</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>require.context(‘./modules’, false, /.js/)</p>\n</blockquote>\n<h2 id=\"全局注入-modules-里所有的-store，一起实例化\"><a href=\"#全局注入-modules-里所有的-store，一起实例化\" class=\"headerlink\" title=\"\b 全局注入 modules 里所有的 store，一起实例化\"></a>\b 全局注入 modules 里所有的 store，一起实例化</h2><blockquote>\n<p>如果一个文件内需要引入多个 store，可以直接引入 index，最后直接使用暴露出来的方法</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vuex <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(Vuex)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 自动引入modules</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> modules = &#123;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">requireAll</span>(<span class=\"params\">r</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> r.keys().map(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// console.log(key) //./app.js ./user.js ....</span></span><br><span class=\"line\">    <span class=\"comment\">// console.log(r(key).default) // 每个store里面default出来的函数或者值</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> k = key.replace(<span class=\"string\">'./'</span>, <span class=\"string\">''</span>).replace(<span class=\"string\">'.js'</span>, <span class=\"string\">''</span>)</span><br><span class=\"line\">    modules[k] = r(key).default</span><br><span class=\"line\">    <span class=\"comment\">// console.log(modules)</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">requireAll(<span class=\"built_in\">require</span>.context(<span class=\"string\">'./modules'</span>, <span class=\"literal\">false</span>, /\\.js/))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getters = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 最后\b实例化所有的store</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  modules,</span><br><span class=\"line\">  getters</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> store</span><br></pre></td></tr></table></figure>\n<h2 id=\"modules-文件下单个文件的-store\"><a href=\"#modules-文件下单个文件的-store\" class=\"headerlink\" title=\"modules 文件下单个文件的 store\"></a>modules 文件下单个文件的 store</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> fetch <span class=\"keyword\">from</span> <span class=\"string\">'@/api/index'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> state = &#123;</span><br><span class=\"line\">  list: []</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> mutations = &#123;</span><br><span class=\"line\">  SET_DATA(state, payload = &#123;&#125;) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Object.entries() 返回的是每个key和value(list 和 [...])</span></span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.entries(payload).forEach(<span class=\"function\">(<span class=\"params\">[key, value]</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      state[key] = value</span><br><span class=\"line\">      <span class=\"comment\">// 给state赋值</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> actions = &#123;</span><br><span class=\"line\">  <span class=\"keyword\">async</span> fetchData(&#123; state, commit &#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; list &#125; = <span class=\"keyword\">await</span> fetch.getData()</span><br><span class=\"line\">    commit(<span class=\"string\">'SET_DATA'</span>, &#123;</span><br><span class=\"line\">      list</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> list</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  state,</span><br><span class=\"line\">  mutations,</span><br><span class=\"line\">  actions</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"cookie 和 token","date":"2019-03-06T16:00:00.000Z","description":"cookie 和 token","_content":"\n# cookie 和 token\n\n[cookie 和 token](https://www.jianshu.com/p/ce9802589143)\n`cookie` 服务员看你的身份证，给你一个编号，以后，进行任何操作，都出示编号后服务员去看查你是谁。\n\n`token` 直接给服务员看自己身份证\n\n## Cookie 与 Cookie 劫持\n\n[Cookie 与 Cookie 劫持](https://g2ex.github.io/2015/06/29/Cookie-and-Cookie-Injection/)\n\n## cooki 劫持\n\n1. 攻击者通过 xss 拿到用户的 cookie 然后就可以伪造 cookie 了。\n\n2. 或者通过 csrf 在同个浏览器下面通过浏览器会自动带上 cookie 的特性\n   在通过 用户网站-攻击者网站-攻击者请求用户网站的方式 浏览器会自动带上 cookie\n\n## token\n\n- 随着单页面应用程序的流行，以及 Web API 和物联网的兴起，基于 token 的身份机制越来越被大家广泛采用。\n- `token`是无状态的，后端服务不需要记录 token。每个令牌都是独立的。\n- 服务器不记录哪些用户已登陆或者已经发布了哪些 JWT。对服务器的每个请求都需要带上验证请求的签名`token`。该标记既可以加在 header 中，可以在 POST 请求的主体中发送，也可以作为查询参数发送。不会被浏览器自动携带， `cooli #2`问题解决\n- 服务器对 JWT 进行解码，如果 token 有效，则处理该请求\n- token 是放在 jwtJSON Web Tokens(jwt)里面下发给客户端的而且不一定存储在哪里（可以存在 local storage，或者 cookie 中） 不能通过 document.cookie 直接拿到，通过 jwt+ip 的方式可以防止 被劫持即使被劫持也是无效的 jwt\n\n最后更新日期 2019-03-07\n","source":"_posts/2019-03-08-cookie和token.md","raw":"---\nlayout: post\ntitle: cookie 和 token\ndate: 2019-03-07\ncategories: 前端\ntags: [cookie, token, 前端]\ndescription: cookie 和 token\n---\n\n# cookie 和 token\n\n[cookie 和 token](https://www.jianshu.com/p/ce9802589143)\n`cookie` 服务员看你的身份证，给你一个编号，以后，进行任何操作，都出示编号后服务员去看查你是谁。\n\n`token` 直接给服务员看自己身份证\n\n## Cookie 与 Cookie 劫持\n\n[Cookie 与 Cookie 劫持](https://g2ex.github.io/2015/06/29/Cookie-and-Cookie-Injection/)\n\n## cooki 劫持\n\n1. 攻击者通过 xss 拿到用户的 cookie 然后就可以伪造 cookie 了。\n\n2. 或者通过 csrf 在同个浏览器下面通过浏览器会自动带上 cookie 的特性\n   在通过 用户网站-攻击者网站-攻击者请求用户网站的方式 浏览器会自动带上 cookie\n\n## token\n\n- 随着单页面应用程序的流行，以及 Web API 和物联网的兴起，基于 token 的身份机制越来越被大家广泛采用。\n- `token`是无状态的，后端服务不需要记录 token。每个令牌都是独立的。\n- 服务器不记录哪些用户已登陆或者已经发布了哪些 JWT。对服务器的每个请求都需要带上验证请求的签名`token`。该标记既可以加在 header 中，可以在 POST 请求的主体中发送，也可以作为查询参数发送。不会被浏览器自动携带， `cooli #2`问题解决\n- 服务器对 JWT 进行解码，如果 token 有效，则处理该请求\n- token 是放在 jwtJSON Web Tokens(jwt)里面下发给客户端的而且不一定存储在哪里（可以存在 local storage，或者 cookie 中） 不能通过 document.cookie 直接拿到，通过 jwt+ip 的方式可以防止 被劫持即使被劫持也是无效的 jwt\n\n最后更新日期 2019-03-07\n","slug":"2019-03-08-cookie和token","published":1,"updated":"2019-04-10T08:23:16.301Z","comments":1,"photos":[],"link":"","_id":"cjvbyxkhn000gw0oooebrf85h","content":"<h1 id=\"cookie-和-token\"><a href=\"#cookie-和-token\" class=\"headerlink\" title=\"cookie 和 token\"></a>cookie 和 token</h1><p><a href=\"https://www.jianshu.com/p/ce9802589143\" target=\"_blank\" rel=\"noopener\">cookie 和 token</a><br><code>cookie</code> 服务员看你的身份证，给你一个编号，以后，进行任何操作，都出示编号后服务员去看查你是谁。</p>\n<p><code>token</code> 直接给服务员看自己身份证</p>\n<h2 id=\"Cookie-与-Cookie-劫持\"><a href=\"#Cookie-与-Cookie-劫持\" class=\"headerlink\" title=\"Cookie 与 Cookie 劫持\"></a>Cookie 与 Cookie 劫持</h2><p><a href=\"https://g2ex.github.io/2015/06/29/Cookie-and-Cookie-Injection/\" target=\"_blank\" rel=\"noopener\">Cookie 与 Cookie 劫持</a></p>\n<h2 id=\"cooki-劫持\"><a href=\"#cooki-劫持\" class=\"headerlink\" title=\"cooki 劫持\"></a>cooki 劫持</h2><ol>\n<li><p>攻击者通过 xss 拿到用户的 cookie 然后就可以伪造 cookie 了。</p>\n</li>\n<li><p>或者通过 csrf 在同个浏览器下面通过浏览器会自动带上 cookie 的特性<br>在通过 用户网站-攻击者网站-攻击者请求用户网站的方式 浏览器会自动带上 cookie</p>\n</li>\n</ol>\n<h2 id=\"token\"><a href=\"#token\" class=\"headerlink\" title=\"token\"></a>token</h2><ul>\n<li>随着单页面应用程序的流行，以及 Web API 和物联网的兴起，基于 token 的身份机制越来越被大家广泛采用。</li>\n<li><code>token</code>是无状态的，后端服务不需要记录 token。每个令牌都是独立的。</li>\n<li>服务器不记录哪些用户已登陆或者已经发布了哪些 JWT。对服务器的每个请求都需要带上验证请求的签名<code>token</code>。该标记既可以加在 header 中，可以在 POST 请求的主体中发送，也可以作为查询参数发送。不会被浏览器自动携带， <code>cooli #2</code>问题解决</li>\n<li>服务器对 JWT 进行解码，如果 token 有效，则处理该请求</li>\n<li>token 是放在 jwtJSON Web Tokens(jwt)里面下发给客户端的而且不一定存储在哪里（可以存在 local storage，或者 cookie 中） 不能通过 document.cookie 直接拿到，通过 jwt+ip 的方式可以防止 被劫持即使被劫持也是无效的 jwt</li>\n</ul>\n<p>最后更新日期 2019-03-07</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"cookie-和-token\"><a href=\"#cookie-和-token\" class=\"headerlink\" title=\"cookie 和 token\"></a>cookie 和 token</h1><p><a href=\"https://www.jianshu.com/p/ce9802589143\" target=\"_blank\" rel=\"noopener\">cookie 和 token</a><br><code>cookie</code> 服务员看你的身份证，给你一个编号，以后，进行任何操作，都出示编号后服务员去看查你是谁。</p>\n<p><code>token</code> 直接给服务员看自己身份证</p>\n<h2 id=\"Cookie-与-Cookie-劫持\"><a href=\"#Cookie-与-Cookie-劫持\" class=\"headerlink\" title=\"Cookie 与 Cookie 劫持\"></a>Cookie 与 Cookie 劫持</h2><p><a href=\"https://g2ex.github.io/2015/06/29/Cookie-and-Cookie-Injection/\" target=\"_blank\" rel=\"noopener\">Cookie 与 Cookie 劫持</a></p>\n<h2 id=\"cooki-劫持\"><a href=\"#cooki-劫持\" class=\"headerlink\" title=\"cooki 劫持\"></a>cooki 劫持</h2><ol>\n<li><p>攻击者通过 xss 拿到用户的 cookie 然后就可以伪造 cookie 了。</p>\n</li>\n<li><p>或者通过 csrf 在同个浏览器下面通过浏览器会自动带上 cookie 的特性<br>在通过 用户网站-攻击者网站-攻击者请求用户网站的方式 浏览器会自动带上 cookie</p>\n</li>\n</ol>\n<h2 id=\"token\"><a href=\"#token\" class=\"headerlink\" title=\"token\"></a>token</h2><ul>\n<li>随着单页面应用程序的流行，以及 Web API 和物联网的兴起，基于 token 的身份机制越来越被大家广泛采用。</li>\n<li><code>token</code>是无状态的，后端服务不需要记录 token。每个令牌都是独立的。</li>\n<li>服务器不记录哪些用户已登陆或者已经发布了哪些 JWT。对服务器的每个请求都需要带上验证请求的签名<code>token</code>。该标记既可以加在 header 中，可以在 POST 请求的主体中发送，也可以作为查询参数发送。不会被浏览器自动携带， <code>cooli #2</code>问题解决</li>\n<li>服务器对 JWT 进行解码，如果 token 有效，则处理该请求</li>\n<li>token 是放在 jwtJSON Web Tokens(jwt)里面下发给客户端的而且不一定存储在哪里（可以存在 local storage，或者 cookie 中） 不能通过 document.cookie 直接拿到，通过 jwt+ip 的方式可以防止 被劫持即使被劫持也是无效的 jwt</li>\n</ul>\n<p>最后更新日期 2019-03-07</p>\n"},{"layout":"post","title":"Charles","date":"2019-03-10T16:00:00.000Z","description":"Charles是一款用于HTTP信息抓包工具","_content":"\n# Charles 简介\n\n> Charles 是一款用于 HTTP 信息抓包工具，可以快速有效的获得 HTTP 信息，非常利于开发者的网页开发和调试修改等！Charles 有着可视化的操作界面，非常利用编辑者的使用和调试！\n\n`mac` 上的分享链接 [Charles](https://xclient.info/s/charles.html)\n\n附上[使用方式](https://zhile.io/2017/07/07/charles-proxy-usage-and-license.html)\n\n## 简单的使用\n\n`google` 去吧, 网上一大把教程\n\n最后更新日期 2019-03-11\n","source":"_posts/2019-03-11-charles.md","raw":"---\nlayout: post\ntitle: Charles\ndate: 2019-03-11\ncategories: 抓包工具\ntags: [Charles, 抓包工具]\ndescription: Charles是一款用于HTTP信息抓包工具\n---\n\n# Charles 简介\n\n> Charles 是一款用于 HTTP 信息抓包工具，可以快速有效的获得 HTTP 信息，非常利于开发者的网页开发和调试修改等！Charles 有着可视化的操作界面，非常利用编辑者的使用和调试！\n\n`mac` 上的分享链接 [Charles](https://xclient.info/s/charles.html)\n\n附上[使用方式](https://zhile.io/2017/07/07/charles-proxy-usage-and-license.html)\n\n## 简单的使用\n\n`google` 去吧, 网上一大把教程\n\n最后更新日期 2019-03-11\n","slug":"2019-03-11-charles","published":1,"updated":"2019-04-24T06:35:06.731Z","comments":1,"photos":[],"link":"","_id":"cjvbyxkhp000kw0oox0n6j989","content":"<h1 id=\"Charles-简介\"><a href=\"#Charles-简介\" class=\"headerlink\" title=\"Charles 简介\"></a>Charles 简介</h1><blockquote>\n<p>Charles 是一款用于 HTTP 信息抓包工具，可以快速有效的获得 HTTP 信息，非常利于开发者的网页开发和调试修改等！Charles 有着可视化的操作界面，非常利用编辑者的使用和调试！</p>\n</blockquote>\n<p><code>mac</code> 上的分享链接 <a href=\"https://xclient.info/s/charles.html\" target=\"_blank\" rel=\"noopener\">Charles</a></p>\n<p>附上<a href=\"https://zhile.io/2017/07/07/charles-proxy-usage-and-license.html\" target=\"_blank\" rel=\"noopener\">使用方式</a></p>\n<h2 id=\"简单的使用\"><a href=\"#简单的使用\" class=\"headerlink\" title=\"简单的使用\"></a>简单的使用</h2><p><code>google</code> 去吧, 网上一大把教程</p>\n<p>最后更新日期 2019-03-11</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Charles-简介\"><a href=\"#Charles-简介\" class=\"headerlink\" title=\"Charles 简介\"></a>Charles 简介</h1><blockquote>\n<p>Charles 是一款用于 HTTP 信息抓包工具，可以快速有效的获得 HTTP 信息，非常利于开发者的网页开发和调试修改等！Charles 有着可视化的操作界面，非常利用编辑者的使用和调试！</p>\n</blockquote>\n<p><code>mac</code> 上的分享链接 <a href=\"https://xclient.info/s/charles.html\" target=\"_blank\" rel=\"noopener\">Charles</a></p>\n<p>附上<a href=\"https://zhile.io/2017/07/07/charles-proxy-usage-and-license.html\" target=\"_blank\" rel=\"noopener\">使用方式</a></p>\n<h2 id=\"简单的使用\"><a href=\"#简单的使用\" class=\"headerlink\" title=\"简单的使用\"></a>简单的使用</h2><p><code>google</code> 去吧, 网上一大把教程</p>\n<p>最后更新日期 2019-03-11</p>\n"},{"layout":"post","title":"移动端适配","date":"2019-03-13T16:00:00.000Z","description":"移动端适配","_content":"\n# viewport\n\n- PC 端： 浏览器可视区的大小\n- 移动端，绝大多数情况下 viewport 都大于浏览器可视区，保证 PC 页面在移动浏览器上面的可视性\n\n通过在 meta 标签中配置`viewport`特性，定义适口的各种行为\n\n主要参考资料 [viewport 详解](https://segmentfault.com/a/1190000004978598) [移动端适配总结](https://juejin.im/post/5c0dd7ac6fb9a049c43d7edc#comment)\n\n## view 详解\n\n1. layout viewport\n   虚拟的布局入口，大于实际屏幕， 元素的宽度继承于 `layout viewport`，用于保证网站的外观特性与桌面浏览器一样。`layout viewport` 到底多宽，每个浏览器不同。Android 和 iPhone 基本上都为 980px，可以通过 `document.documentElement.clientWidth` 获取\n\n2. visual viewport\n   用来承载 `layout viewport` 的视口，当前显示在屏幕上的页面，即浏览器可视区域的宽度，`visual viewport` 的尺寸不会是一个固定的值，甚至每款设备都可能不同，所以无法进行任何修改和设置，几种常见设备的 visual viewport 尺寸：\n\n   - iPhone4~iPhone5S: 320\\*480px\n   - iPhone6~iPhone6S: 375\\*627px\n   - iPhone6 Plus~iPhone6S Plus: 414\\*736px\n\n3. ideal viewport\n   它类似于布局视口，但宽度和视觉视口相同，这就是完美视口 `ideal viewport` ，为浏览器定义的可完美适配移动端的理想 `viewport`，固定不变，可以认为是设备视口宽度。比如 `iphone7` 为 375px, `iphone7p` 为 414px。，用户不用缩放和拖动网页就能够很好的进行网页浏览。而完美视口也是通过 `viewport meta` 的某种设置来达到。\n\n## 适配\n\n```html\n<meta\n  name=\"viewport\"\n  content=\"width=device-width,initial-scale=1,user-scale=no\"\n/>\n```\n\n- `width` 用来定义 `layout viewport` 的宽度，如果不指定该属性（或者移除 `viewport meta`标签），则 `layout viewport` 宽度为默认值。\n\n- `width=device-width` 此时的`layout viewport`将成为`ideal viewport`，因为`layout viewport`宽度与设备视觉视口宽度一致了， 这是移动端适配不可或缺的步骤\n\n- `initial-scale` 设置页面的初始缩放值，并且这个初始缩放值是相对于 `ideal viewport` 缩放的，最终得到的结果不仅会决定 `visual viewport`，还会影响到 `layout viewport`\n\n- `user-scalable` 是否允许用户进行缩放的设置\n\n## 设备像素比 dpr 与 rem 的适配方案\n\n> rem 是相对于根元素 html 的 font-size 来做计算。通常在页面初始化时加载时通过对 document.documentElement.style.fontSize 设置来实现。\n\n最后更新日期 2019-03-14\n","source":"_posts/2019-03-14-移动端适配.md","raw":"---\nlayout: post\ntitle: 移动端适配\ndate: 2019-03-14\ncategories: 移动端\ntags: [H5, 移动端]\ndescription: 移动端适配\n---\n\n# viewport\n\n- PC 端： 浏览器可视区的大小\n- 移动端，绝大多数情况下 viewport 都大于浏览器可视区，保证 PC 页面在移动浏览器上面的可视性\n\n通过在 meta 标签中配置`viewport`特性，定义适口的各种行为\n\n主要参考资料 [viewport 详解](https://segmentfault.com/a/1190000004978598) [移动端适配总结](https://juejin.im/post/5c0dd7ac6fb9a049c43d7edc#comment)\n\n## view 详解\n\n1. layout viewport\n   虚拟的布局入口，大于实际屏幕， 元素的宽度继承于 `layout viewport`，用于保证网站的外观特性与桌面浏览器一样。`layout viewport` 到底多宽，每个浏览器不同。Android 和 iPhone 基本上都为 980px，可以通过 `document.documentElement.clientWidth` 获取\n\n2. visual viewport\n   用来承载 `layout viewport` 的视口，当前显示在屏幕上的页面，即浏览器可视区域的宽度，`visual viewport` 的尺寸不会是一个固定的值，甚至每款设备都可能不同，所以无法进行任何修改和设置，几种常见设备的 visual viewport 尺寸：\n\n   - iPhone4~iPhone5S: 320\\*480px\n   - iPhone6~iPhone6S: 375\\*627px\n   - iPhone6 Plus~iPhone6S Plus: 414\\*736px\n\n3. ideal viewport\n   它类似于布局视口，但宽度和视觉视口相同，这就是完美视口 `ideal viewport` ，为浏览器定义的可完美适配移动端的理想 `viewport`，固定不变，可以认为是设备视口宽度。比如 `iphone7` 为 375px, `iphone7p` 为 414px。，用户不用缩放和拖动网页就能够很好的进行网页浏览。而完美视口也是通过 `viewport meta` 的某种设置来达到。\n\n## 适配\n\n```html\n<meta\n  name=\"viewport\"\n  content=\"width=device-width,initial-scale=1,user-scale=no\"\n/>\n```\n\n- `width` 用来定义 `layout viewport` 的宽度，如果不指定该属性（或者移除 `viewport meta`标签），则 `layout viewport` 宽度为默认值。\n\n- `width=device-width` 此时的`layout viewport`将成为`ideal viewport`，因为`layout viewport`宽度与设备视觉视口宽度一致了， 这是移动端适配不可或缺的步骤\n\n- `initial-scale` 设置页面的初始缩放值，并且这个初始缩放值是相对于 `ideal viewport` 缩放的，最终得到的结果不仅会决定 `visual viewport`，还会影响到 `layout viewport`\n\n- `user-scalable` 是否允许用户进行缩放的设置\n\n## 设备像素比 dpr 与 rem 的适配方案\n\n> rem 是相对于根元素 html 的 font-size 来做计算。通常在页面初始化时加载时通过对 document.documentElement.style.fontSize 设置来实现。\n\n最后更新日期 2019-03-14\n","slug":"2019-03-14-移动端适配","published":1,"updated":"2019-04-10T08:24:11.017Z","comments":1,"photos":[],"link":"","_id":"cjvbyxkhq000lw0oon6l174a1","content":"<h1 id=\"viewport\"><a href=\"#viewport\" class=\"headerlink\" title=\"viewport\"></a>viewport</h1><ul>\n<li>PC 端： 浏览器可视区的大小</li>\n<li>移动端，绝大多数情况下 viewport 都大于浏览器可视区，保证 PC 页面在移动浏览器上面的可视性</li>\n</ul>\n<p>通过在 meta 标签中配置<code>viewport</code>特性，定义适口的各种行为</p>\n<p>主要参考资料 <a href=\"https://segmentfault.com/a/1190000004978598\" target=\"_blank\" rel=\"noopener\">viewport 详解</a> <a href=\"https://juejin.im/post/5c0dd7ac6fb9a049c43d7edc#comment\" target=\"_blank\" rel=\"noopener\">移动端适配总结</a></p>\n<h2 id=\"view-详解\"><a href=\"#view-详解\" class=\"headerlink\" title=\"view 详解\"></a>view 详解</h2><ol>\n<li><p>layout viewport<br>虚拟的布局入口，大于实际屏幕， 元素的宽度继承于 <code>layout viewport</code>，用于保证网站的外观特性与桌面浏览器一样。<code>layout viewport</code> 到底多宽，每个浏览器不同。Android 和 iPhone 基本上都为 980px，可以通过 <code>document.documentElement.clientWidth</code> 获取</p>\n</li>\n<li><p>visual viewport<br>用来承载 <code>layout viewport</code> 的视口，当前显示在屏幕上的页面，即浏览器可视区域的宽度，<code>visual viewport</code> 的尺寸不会是一个固定的值，甚至每款设备都可能不同，所以无法进行任何修改和设置，几种常见设备的 visual viewport 尺寸：</p>\n<ul>\n<li>iPhone4~iPhone5S: 320*480px</li>\n<li>iPhone6~iPhone6S: 375*627px</li>\n<li>iPhone6 Plus~iPhone6S Plus: 414*736px</li>\n</ul>\n</li>\n<li><p>ideal viewport<br>它类似于布局视口，但宽度和视觉视口相同，这就是完美视口 <code>ideal viewport</code> ，为浏览器定义的可完美适配移动端的理想 <code>viewport</code>，固定不变，可以认为是设备视口宽度。比如 <code>iphone7</code> 为 375px, <code>iphone7p</code> 为 414px。，用户不用缩放和拖动网页就能够很好的进行网页浏览。而完美视口也是通过 <code>viewport meta</code> 的某种设置来达到。</p>\n</li>\n</ol>\n<h2 id=\"适配\"><a href=\"#适配\" class=\"headerlink\" title=\"适配\"></a>适配</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width,initial-scale=1,user-scale=no\"</span></span></span><br><span class=\"line\"><span class=\"tag\">/&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><code>width</code> 用来定义 <code>layout viewport</code> 的宽度，如果不指定该属性（或者移除 <code>viewport meta</code>标签），则 <code>layout viewport</code> 宽度为默认值。</p>\n</li>\n<li><p><code>width=device-width</code> 此时的<code>layout viewport</code>将成为<code>ideal viewport</code>，因为<code>layout viewport</code>宽度与设备视觉视口宽度一致了， 这是移动端适配不可或缺的步骤</p>\n</li>\n<li><p><code>initial-scale</code> 设置页面的初始缩放值，并且这个初始缩放值是相对于 <code>ideal viewport</code> 缩放的，最终得到的结果不仅会决定 <code>visual viewport</code>，还会影响到 <code>layout viewport</code></p>\n</li>\n<li><p><code>user-scalable</code> 是否允许用户进行缩放的设置</p>\n</li>\n</ul>\n<h2 id=\"设备像素比-dpr-与-rem-的适配方案\"><a href=\"#设备像素比-dpr-与-rem-的适配方案\" class=\"headerlink\" title=\"设备像素比 dpr 与 rem 的适配方案\"></a>设备像素比 dpr 与 rem 的适配方案</h2><blockquote>\n<p>rem 是相对于根元素 html 的 font-size 来做计算。通常在页面初始化时加载时通过对 document.documentElement.style.fontSize 设置来实现。</p>\n</blockquote>\n<p>最后更新日期 2019-03-14</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"viewport\"><a href=\"#viewport\" class=\"headerlink\" title=\"viewport\"></a>viewport</h1><ul>\n<li>PC 端： 浏览器可视区的大小</li>\n<li>移动端，绝大多数情况下 viewport 都大于浏览器可视区，保证 PC 页面在移动浏览器上面的可视性</li>\n</ul>\n<p>通过在 meta 标签中配置<code>viewport</code>特性，定义适口的各种行为</p>\n<p>主要参考资料 <a href=\"https://segmentfault.com/a/1190000004978598\" target=\"_blank\" rel=\"noopener\">viewport 详解</a> <a href=\"https://juejin.im/post/5c0dd7ac6fb9a049c43d7edc#comment\" target=\"_blank\" rel=\"noopener\">移动端适配总结</a></p>\n<h2 id=\"view-详解\"><a href=\"#view-详解\" class=\"headerlink\" title=\"view 详解\"></a>view 详解</h2><ol>\n<li><p>layout viewport<br>虚拟的布局入口，大于实际屏幕， 元素的宽度继承于 <code>layout viewport</code>，用于保证网站的外观特性与桌面浏览器一样。<code>layout viewport</code> 到底多宽，每个浏览器不同。Android 和 iPhone 基本上都为 980px，可以通过 <code>document.documentElement.clientWidth</code> 获取</p>\n</li>\n<li><p>visual viewport<br>用来承载 <code>layout viewport</code> 的视口，当前显示在屏幕上的页面，即浏览器可视区域的宽度，<code>visual viewport</code> 的尺寸不会是一个固定的值，甚至每款设备都可能不同，所以无法进行任何修改和设置，几种常见设备的 visual viewport 尺寸：</p>\n<ul>\n<li>iPhone4~iPhone5S: 320*480px</li>\n<li>iPhone6~iPhone6S: 375*627px</li>\n<li>iPhone6 Plus~iPhone6S Plus: 414*736px</li>\n</ul>\n</li>\n<li><p>ideal viewport<br>它类似于布局视口，但宽度和视觉视口相同，这就是完美视口 <code>ideal viewport</code> ，为浏览器定义的可完美适配移动端的理想 <code>viewport</code>，固定不变，可以认为是设备视口宽度。比如 <code>iphone7</code> 为 375px, <code>iphone7p</code> 为 414px。，用户不用缩放和拖动网页就能够很好的进行网页浏览。而完美视口也是通过 <code>viewport meta</code> 的某种设置来达到。</p>\n</li>\n</ol>\n<h2 id=\"适配\"><a href=\"#适配\" class=\"headerlink\" title=\"适配\"></a>适配</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width,initial-scale=1,user-scale=no\"</span></span></span><br><span class=\"line\"><span class=\"tag\">/&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><code>width</code> 用来定义 <code>layout viewport</code> 的宽度，如果不指定该属性（或者移除 <code>viewport meta</code>标签），则 <code>layout viewport</code> 宽度为默认值。</p>\n</li>\n<li><p><code>width=device-width</code> 此时的<code>layout viewport</code>将成为<code>ideal viewport</code>，因为<code>layout viewport</code>宽度与设备视觉视口宽度一致了， 这是移动端适配不可或缺的步骤</p>\n</li>\n<li><p><code>initial-scale</code> 设置页面的初始缩放值，并且这个初始缩放值是相对于 <code>ideal viewport</code> 缩放的，最终得到的结果不仅会决定 <code>visual viewport</code>，还会影响到 <code>layout viewport</code></p>\n</li>\n<li><p><code>user-scalable</code> 是否允许用户进行缩放的设置</p>\n</li>\n</ul>\n<h2 id=\"设备像素比-dpr-与-rem-的适配方案\"><a href=\"#设备像素比-dpr-与-rem-的适配方案\" class=\"headerlink\" title=\"设备像素比 dpr 与 rem 的适配方案\"></a>设备像素比 dpr 与 rem 的适配方案</h2><blockquote>\n<p>rem 是相对于根元素 html 的 font-size 来做计算。通常在页面初始化时加载时通过对 document.documentElement.style.fontSize 设置来实现。</p>\n</blockquote>\n<p>最后更新日期 2019-03-14</p>\n"},{"title":"400 客服电话 和 Promise","date":"2019-04-02T16:00:00.000Z","_content":"\n总结一下自己对`Promise`的理解和使用 `Promise` 封装阿里云呼叫中心 400 电话常用 API\n\n<!-- more -->\n\n参考书籍： 深入理解 ES6 和你不知道的 JS（中卷）\n初衷： 自己对回调和`Promise` 的理解一直都是很片面的，所以一直都想系统性的梳理一下异步的一些知识\n\n## 使用 Promise 封转呼叫中心暴露出来的公用方法\n\nPromise.resolve() 有三种类型， 本身就是一个语法糖\n\n- Promise.resolve(value);\n- Promise.resolve(promise);\n- Promise.resolve(theanable);\n\n```js\nvar foo = {\n    then: (resolve, reject) => resolve('foo')\n};\nvar resolved = Promise.resolve(foo);\n// 相当于\nvar resolved = new Promise((resolve, reject) => {\n    foo.then(resolve, reject)\n});\n\nresolved.then((str) =>\n    console.log(str);//foo\n)\n```\n\n> promise 使用的注意事项\n>\n> - 接受两个参数(resolve, reject)，在最后必须要其中的一个，在返回 `reject()` 时，需要配合 `return reject(...)` 来打断运行和返回错误信息，如果不返回任何结果，这个 promise 将被挂起，一直处于 loading 状态\n> - 在外部 `catch()` 捕捉\n> - 应用 promise 对象时不能够直接赋值给一个参数，可以通过以下两种简答的方法\n>   - `async await` 一直到最后 resolve 或者 reject 返回的不再是一个 promise 对象是才会真正的结束 (推荐使用)\n>   - `then` 使用 `then`接受 promise 返回的值\n\n### 主要方法的封装\n\n```js\nimport init from './acc/init'\nimport { Message } from 'element-ui'\nimport authority from './authority'\nconst telephone = {\n  init() {\n    return init()\n  },\n  onLine: async () => {\n    // 在线\n    const workbench = await init()\n    return new Promise(resolve => {\n      workbench.online()\n      resolve(workbench)\n    })\n  },\n  onLeave: async () => {\n    // 离开\n    const workbench = await init()\n    return new Promise(resolve => {\n      setTimeout(() => {\n        workbench.applyForBreak()\n        resolve(workbench)\n      }, 1000)\n    })\n  },\n  removePhone: async (mobileNumber, caller) => {\n    // mobileNumber 转接手机 caller客服电话\n    const workbench = await init()\n    return new Promise(resolve => {\n      workbench.offline(mobileNumber, caller)\n      resolve(workbench)\n    })\n  },\n  out: async () => {\n    const workbench = await init()\n    return new Promise(resolve => {\n      workbench.onLogOut()\n      window.workbench = ''\n      resolve()\n    })\n  },\n  ready: async () => {\n    // 上线和结束处理后调用\n    const workbench = await init()\n    return new Promise(resolve => {\n      workbench.ready()\n      window.workbench = ''\n      resolve()\n    })\n  },\n  call: async (phoneNum, boolean) => {\n    const workbench = await init()\n    return new Promise(resolve => {\n      // boolean: true 虚拟外呼\n      workbench.call(phoneNum, '', '', boolean)\n      resolve(workbench)\n    })\n  },\n  answerPhone: async () => {\n    const workbench = await init()\n    return new Promise(resolve => {\n      workbench.answer()\n      resolve(workbench)\n    })\n  },\n  hangUp: async () => {\n    const workbench = await init()\n    return new Promise(resolve => {\n      workbench.hangUp()\n      resolve(workbench)\n    })\n  },\n  thirdCallTransfer: async callee => {\n    // 转接客服 callee坐席的分机号，转接坐席\n    const workbench = await init()\n    return new Promise(resolve => {\n      workbench.thirdCallTransfer(callee, '')\n      resolve(workbench)\n    })\n  },\n  checkStatus: async () => {\n    const workbench = await init()\n    return new Promise((resolve, reject) => {\n      const { code } = workbench.getStatusCode()\n      const { callStatus } = authority.get() || {}\n      if (callStatus === 'removePhone') {\n        Message.warning('当前处于转接手机状态，请切换至在线状态')\n        return reject()\n      }\n      if (code === 4) {\n        Message.warning('当前处于离开状态，请切换至在线状态')\n        return reject()\n      }\n      resolve()\n    })\n  }\n}\n\nexport default telephone\n```\n","source":"_posts/2019-04-05-promis封装400电话API.md","raw":"---\ntitle: '400 客服电话 和 Promise'\ndate: 2019-04-03\ncategories: CRM # 分类只能有1个\ntags: # 标签可以有多个\n  - 400\n  - CRM\n  - Promise\n# cover: \"https://text.com/demo.png\" # 文章封面图片URL\n# description: 文章摘要\n---\n\n总结一下自己对`Promise`的理解和使用 `Promise` 封装阿里云呼叫中心 400 电话常用 API\n\n<!-- more -->\n\n参考书籍： 深入理解 ES6 和你不知道的 JS（中卷）\n初衷： 自己对回调和`Promise` 的理解一直都是很片面的，所以一直都想系统性的梳理一下异步的一些知识\n\n## 使用 Promise 封转呼叫中心暴露出来的公用方法\n\nPromise.resolve() 有三种类型， 本身就是一个语法糖\n\n- Promise.resolve(value);\n- Promise.resolve(promise);\n- Promise.resolve(theanable);\n\n```js\nvar foo = {\n    then: (resolve, reject) => resolve('foo')\n};\nvar resolved = Promise.resolve(foo);\n// 相当于\nvar resolved = new Promise((resolve, reject) => {\n    foo.then(resolve, reject)\n});\n\nresolved.then((str) =>\n    console.log(str);//foo\n)\n```\n\n> promise 使用的注意事项\n>\n> - 接受两个参数(resolve, reject)，在最后必须要其中的一个，在返回 `reject()` 时，需要配合 `return reject(...)` 来打断运行和返回错误信息，如果不返回任何结果，这个 promise 将被挂起，一直处于 loading 状态\n> - 在外部 `catch()` 捕捉\n> - 应用 promise 对象时不能够直接赋值给一个参数，可以通过以下两种简答的方法\n>   - `async await` 一直到最后 resolve 或者 reject 返回的不再是一个 promise 对象是才会真正的结束 (推荐使用)\n>   - `then` 使用 `then`接受 promise 返回的值\n\n### 主要方法的封装\n\n```js\nimport init from './acc/init'\nimport { Message } from 'element-ui'\nimport authority from './authority'\nconst telephone = {\n  init() {\n    return init()\n  },\n  onLine: async () => {\n    // 在线\n    const workbench = await init()\n    return new Promise(resolve => {\n      workbench.online()\n      resolve(workbench)\n    })\n  },\n  onLeave: async () => {\n    // 离开\n    const workbench = await init()\n    return new Promise(resolve => {\n      setTimeout(() => {\n        workbench.applyForBreak()\n        resolve(workbench)\n      }, 1000)\n    })\n  },\n  removePhone: async (mobileNumber, caller) => {\n    // mobileNumber 转接手机 caller客服电话\n    const workbench = await init()\n    return new Promise(resolve => {\n      workbench.offline(mobileNumber, caller)\n      resolve(workbench)\n    })\n  },\n  out: async () => {\n    const workbench = await init()\n    return new Promise(resolve => {\n      workbench.onLogOut()\n      window.workbench = ''\n      resolve()\n    })\n  },\n  ready: async () => {\n    // 上线和结束处理后调用\n    const workbench = await init()\n    return new Promise(resolve => {\n      workbench.ready()\n      window.workbench = ''\n      resolve()\n    })\n  },\n  call: async (phoneNum, boolean) => {\n    const workbench = await init()\n    return new Promise(resolve => {\n      // boolean: true 虚拟外呼\n      workbench.call(phoneNum, '', '', boolean)\n      resolve(workbench)\n    })\n  },\n  answerPhone: async () => {\n    const workbench = await init()\n    return new Promise(resolve => {\n      workbench.answer()\n      resolve(workbench)\n    })\n  },\n  hangUp: async () => {\n    const workbench = await init()\n    return new Promise(resolve => {\n      workbench.hangUp()\n      resolve(workbench)\n    })\n  },\n  thirdCallTransfer: async callee => {\n    // 转接客服 callee坐席的分机号，转接坐席\n    const workbench = await init()\n    return new Promise(resolve => {\n      workbench.thirdCallTransfer(callee, '')\n      resolve(workbench)\n    })\n  },\n  checkStatus: async () => {\n    const workbench = await init()\n    return new Promise((resolve, reject) => {\n      const { code } = workbench.getStatusCode()\n      const { callStatus } = authority.get() || {}\n      if (callStatus === 'removePhone') {\n        Message.warning('当前处于转接手机状态，请切换至在线状态')\n        return reject()\n      }\n      if (code === 4) {\n        Message.warning('当前处于离开状态，请切换至在线状态')\n        return reject()\n      }\n      resolve()\n    })\n  }\n}\n\nexport default telephone\n```\n","slug":"2019-04-05-promis封装400电话API","published":1,"updated":"2019-04-22T02:46:37.867Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvbyxkhs000pw0oodosk8q11","content":"<p>总结一下自己对<code>Promise</code>的理解和使用 <code>Promise</code> 封装阿里云呼叫中心 400 电话常用 API</p>\n<a id=\"more\"></a>\n<p>参考书籍： 深入理解 ES6 和你不知道的 JS（中卷）<br>初衷： 自己对回调和<code>Promise</code> 的理解一直都是很片面的，所以一直都想系统性的梳理一下异步的一些知识</p>\n<h2 id=\"使用-Promise-封转呼叫中心暴露出来的公用方法\"><a href=\"#使用-Promise-封转呼叫中心暴露出来的公用方法\" class=\"headerlink\" title=\"使用 Promise 封转呼叫中心暴露出来的公用方法\"></a>使用 Promise 封转呼叫中心暴露出来的公用方法</h2><p>Promise.resolve() 有三种类型， 本身就是一个语法糖</p>\n<ul>\n<li>Promise.resolve(value);</li>\n<li>Promise.resolve(promise);</li>\n<li>Promise.resolve(theanable);</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = &#123;</span><br><span class=\"line\">    then: <span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> resolve(<span class=\"string\">'foo'</span>)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> resolved = <span class=\"built_in\">Promise</span>.resolve(foo);</span><br><span class=\"line\"><span class=\"comment\">// 相当于</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> resolved = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    foo.then(resolve, reject)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">resolved.then(<span class=\"function\">(<span class=\"params\">str</span>) =&gt;</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(str);<span class=\"comment\">//foo</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>promise 使用的注意事项</p>\n<ul>\n<li>接受两个参数(resolve, reject)，在最后必须要其中的一个，在返回 <code>reject()</code> 时，需要配合 <code>return reject(...)</code> 来打断运行和返回错误信息，如果不返回任何结果，这个 promise 将被挂起，一直处于 loading 状态</li>\n<li>在外部 <code>catch()</code> 捕捉</li>\n<li>应用 promise 对象时不能够直接赋值给一个参数，可以通过以下两种简答的方法<ul>\n<li><code>async await</code> 一直到最后 resolve 或者 reject 返回的不再是一个 promise 对象是才会真正的结束 (推荐使用)</li>\n<li><code>then</code> 使用 <code>then</code>接受 promise 返回的值</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"主要方法的封装\"><a href=\"#主要方法的封装\" class=\"headerlink\" title=\"主要方法的封装\"></a>主要方法的封装</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> init <span class=\"keyword\">from</span> <span class=\"string\">'./acc/init'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Message &#125; <span class=\"keyword\">from</span> <span class=\"string\">'element-ui'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> authority <span class=\"keyword\">from</span> <span class=\"string\">'./authority'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> telephone = &#123;</span><br><span class=\"line\">  init() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> init()</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  onLine: <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 在线</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> workbench = <span class=\"keyword\">await</span> init()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">      workbench.online()</span><br><span class=\"line\">      resolve(workbench)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  onLeave: <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 离开</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> workbench = <span class=\"keyword\">await</span> init()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">      setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        workbench.applyForBreak()</span><br><span class=\"line\">        resolve(workbench)</span><br><span class=\"line\">      &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  removePhone: <span class=\"keyword\">async</span> (mobileNumber, caller) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// mobileNumber 转接手机 caller客服电话</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> workbench = <span class=\"keyword\">await</span> init()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">      workbench.offline(mobileNumber, caller)</span><br><span class=\"line\">      resolve(workbench)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  out: <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> workbench = <span class=\"keyword\">await</span> init()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">      workbench.onLogOut()</span><br><span class=\"line\">      <span class=\"built_in\">window</span>.workbench = <span class=\"string\">''</span></span><br><span class=\"line\">      resolve()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  ready: <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 上线和结束处理后调用</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> workbench = <span class=\"keyword\">await</span> init()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">      workbench.ready()</span><br><span class=\"line\">      <span class=\"built_in\">window</span>.workbench = <span class=\"string\">''</span></span><br><span class=\"line\">      resolve()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  call: <span class=\"keyword\">async</span> (phoneNum, boolean) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> workbench = <span class=\"keyword\">await</span> init()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// boolean: true 虚拟外呼</span></span><br><span class=\"line\">      workbench.call(phoneNum, <span class=\"string\">''</span>, <span class=\"string\">''</span>, boolean)</span><br><span class=\"line\">      resolve(workbench)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  answerPhone: <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> workbench = <span class=\"keyword\">await</span> init()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">      workbench.answer()</span><br><span class=\"line\">      resolve(workbench)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  hangUp: <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> workbench = <span class=\"keyword\">await</span> init()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">      workbench.hangUp()</span><br><span class=\"line\">      resolve(workbench)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  thirdCallTransfer: <span class=\"keyword\">async</span> callee =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 转接客服 callee坐席的分机号，转接坐席</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> workbench = <span class=\"keyword\">await</span> init()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">      workbench.thirdCallTransfer(callee, <span class=\"string\">''</span>)</span><br><span class=\"line\">      resolve(workbench)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  checkStatus: <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> workbench = <span class=\"keyword\">await</span> init()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; code &#125; = workbench.getStatusCode()</span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; callStatus &#125; = authority.get() || &#123;&#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (callStatus === <span class=\"string\">'removePhone'</span>) &#123;</span><br><span class=\"line\">        Message.warning(<span class=\"string\">'当前处于转接手机状态，请切换至在线状态'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> reject()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (code === <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">        Message.warning(<span class=\"string\">'当前处于离开状态，请切换至在线状态'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> reject()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      resolve()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> telephone</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>总结一下自己对<code>Promise</code>的理解和使用 <code>Promise</code> 封装阿里云呼叫中心 400 电话常用 API</p>","more":"<p>参考书籍： 深入理解 ES6 和你不知道的 JS（中卷）<br>初衷： 自己对回调和<code>Promise</code> 的理解一直都是很片面的，所以一直都想系统性的梳理一下异步的一些知识</p>\n<h2 id=\"使用-Promise-封转呼叫中心暴露出来的公用方法\"><a href=\"#使用-Promise-封转呼叫中心暴露出来的公用方法\" class=\"headerlink\" title=\"使用 Promise 封转呼叫中心暴露出来的公用方法\"></a>使用 Promise 封转呼叫中心暴露出来的公用方法</h2><p>Promise.resolve() 有三种类型， 本身就是一个语法糖</p>\n<ul>\n<li>Promise.resolve(value);</li>\n<li>Promise.resolve(promise);</li>\n<li>Promise.resolve(theanable);</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = &#123;</span><br><span class=\"line\">    then: <span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> resolve(<span class=\"string\">'foo'</span>)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> resolved = <span class=\"built_in\">Promise</span>.resolve(foo);</span><br><span class=\"line\"><span class=\"comment\">// 相当于</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> resolved = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    foo.then(resolve, reject)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">resolved.then(<span class=\"function\">(<span class=\"params\">str</span>) =&gt;</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(str);<span class=\"comment\">//foo</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>promise 使用的注意事项</p>\n<ul>\n<li>接受两个参数(resolve, reject)，在最后必须要其中的一个，在返回 <code>reject()</code> 时，需要配合 <code>return reject(...)</code> 来打断运行和返回错误信息，如果不返回任何结果，这个 promise 将被挂起，一直处于 loading 状态</li>\n<li>在外部 <code>catch()</code> 捕捉</li>\n<li>应用 promise 对象时不能够直接赋值给一个参数，可以通过以下两种简答的方法<ul>\n<li><code>async await</code> 一直到最后 resolve 或者 reject 返回的不再是一个 promise 对象是才会真正的结束 (推荐使用)</li>\n<li><code>then</code> 使用 <code>then</code>接受 promise 返回的值</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"主要方法的封装\"><a href=\"#主要方法的封装\" class=\"headerlink\" title=\"主要方法的封装\"></a>主要方法的封装</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> init <span class=\"keyword\">from</span> <span class=\"string\">'./acc/init'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Message &#125; <span class=\"keyword\">from</span> <span class=\"string\">'element-ui'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> authority <span class=\"keyword\">from</span> <span class=\"string\">'./authority'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> telephone = &#123;</span><br><span class=\"line\">  init() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> init()</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  onLine: <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 在线</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> workbench = <span class=\"keyword\">await</span> init()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">      workbench.online()</span><br><span class=\"line\">      resolve(workbench)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  onLeave: <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 离开</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> workbench = <span class=\"keyword\">await</span> init()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">      setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        workbench.applyForBreak()</span><br><span class=\"line\">        resolve(workbench)</span><br><span class=\"line\">      &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  removePhone: <span class=\"keyword\">async</span> (mobileNumber, caller) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// mobileNumber 转接手机 caller客服电话</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> workbench = <span class=\"keyword\">await</span> init()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">      workbench.offline(mobileNumber, caller)</span><br><span class=\"line\">      resolve(workbench)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  out: <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> workbench = <span class=\"keyword\">await</span> init()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">      workbench.onLogOut()</span><br><span class=\"line\">      <span class=\"built_in\">window</span>.workbench = <span class=\"string\">''</span></span><br><span class=\"line\">      resolve()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  ready: <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 上线和结束处理后调用</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> workbench = <span class=\"keyword\">await</span> init()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">      workbench.ready()</span><br><span class=\"line\">      <span class=\"built_in\">window</span>.workbench = <span class=\"string\">''</span></span><br><span class=\"line\">      resolve()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  call: <span class=\"keyword\">async</span> (phoneNum, boolean) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> workbench = <span class=\"keyword\">await</span> init()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// boolean: true 虚拟外呼</span></span><br><span class=\"line\">      workbench.call(phoneNum, <span class=\"string\">''</span>, <span class=\"string\">''</span>, boolean)</span><br><span class=\"line\">      resolve(workbench)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  answerPhone: <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> workbench = <span class=\"keyword\">await</span> init()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">      workbench.answer()</span><br><span class=\"line\">      resolve(workbench)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  hangUp: <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> workbench = <span class=\"keyword\">await</span> init()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">      workbench.hangUp()</span><br><span class=\"line\">      resolve(workbench)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  thirdCallTransfer: <span class=\"keyword\">async</span> callee =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 转接客服 callee坐席的分机号，转接坐席</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> workbench = <span class=\"keyword\">await</span> init()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">      workbench.thirdCallTransfer(callee, <span class=\"string\">''</span>)</span><br><span class=\"line\">      resolve(workbench)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  checkStatus: <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> workbench = <span class=\"keyword\">await</span> init()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; code &#125; = workbench.getStatusCode()</span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; callStatus &#125; = authority.get() || &#123;&#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (callStatus === <span class=\"string\">'removePhone'</span>) &#123;</span><br><span class=\"line\">        Message.warning(<span class=\"string\">'当前处于转接手机状态，请切换至在线状态'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> reject()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (code === <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">        Message.warning(<span class=\"string\">'当前处于离开状态，请切换至在线状态'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> reject()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      resolve()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> telephone</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"Ant design Vue","date":"2019-03-06T16:00:00.000Z","_content":"\nant-design-UI 框架\n最后更新日期 2019-03-09\n\n<!-- more -->\n\n# 初期使用感受\n\n## element-UI 和 Ant Design Vue 的区别\n\n我司现在和以前的后台主要 UI 框架是 `element-ui`，在 `Ant Design Vue` 官宣之前就一直在关注，但是由于项目时间的不允许和 UI 框架稳定性的多方面考虑，一直都没机会尝试使用 `antd` 来搭建一个新的后台模版。\n\n## table\n\n### 基本功能\n\n自带分页、搜索、排序、自定义操作等功能\n使用 slot 插入其他组件、展示数据\n\n### 日常使用参数\n\n```html\n<a-table\n  :columns=\"columns\"\n  rowKey=\"id\"\n  :dataSource=\"data\"\n  :pagination=\"pagination\"\n  @change=\"handleTableChange\"\n>\n  <template #cover_url=\"cover_url\">\n    <my-image :src=\"cover_url\"></my-image>\n  </template>\n\n  <template #has_pano_new=\"has_pano_new\">\n    <span>{{has_pano_new}}slot插值</span>\n  </template>\n\n  <template #action=\"text, record\">\n    <my-button\n      @click=\"changeStatus(record)\"\n      :status=\"record.status\"\n    ></my-button>\n    <my-button @click=\"toEdit(record)\" ghost type=\"edit\"></my-button>\n    <my-button @click=\"remove(record)\" ghost type=\"remove\"></my-button>\n  </template>\n</a-table>\n```\n\n```js\ndata() {\n    return {\n        data: [\n             {\n              title: '操作',\n              dataIndex: 'action',\n              scopedSlots: { customRender: 'action' }\n            }\n        ]\n    }\n}\n```\n\n> 参数：\n> `columns`: 表格每行的数据和定义表头\n> `dataSource：` 表格全部数据，`dataSource` 和 `columns` 里的数据值都需要指定 `key` 值。对于 `dataSource` 默认将每列数据的 `key` 属性作为唯一的标识。\n> `rowKey`: 每行单独的 `key`，必须值，不可重复和不赋值，一般为 `id` > `pagination`: 表格自带的分页，接受一个 `Obj` 对象\n> `handleTableChange：` 翻页触发的回调\n\n> slot 插值\n> `#action=\"text, record\"` 相当于`v-slot:action=\"text,record\"`  \n> `slot`中包含两个参数，第一个是当前列的值，参照`cover_url`，`record`代表的是当前行对应的值，相等于`elment-ui`中`scope.row`，都可以取得当前行的所有数据\n\n### 排序和筛选\n\n不需要指定具体的 `onFilter` 和 `sorter` 函数，而是在把筛选和排序的参数发到服务端来处理。\n也可以通过 `slot` 来自定义筛选功能\n\n```js\n    [\n        { title: 'Name',\n          dataIndex: 'name',\n          sorter: true,\n          scopedSlots: { customRender: 'name' }\n        },\n        {\n            title: 'Gender',\n            dataIndex: 'gender',\n            filters: [\n              { text: 'Male', value: 'male' },\n              { text: 'Female', value: 'female' },\n            ],\n        }\n    ]\n\n    handleTableChange (pagination, filters, sorter) {\n        // do something\n    }\n```\n\n## form\n\n最重要的表单数据填充、验证和提交\n\n### Ant-design-vue 的表单验证\n\n```html\n<a-form-item v-bind=\"mapLayout\" label=\"图片附件\">\n  <hotel-upload\n    v-decorator=\"['attach', {initialValue: [],rules:[{validator: imageLengthValidate}]}]\"\n    :limit=\"100\"\n    :validate=\"validateImageSize\"\n  >\n  </hotel-upload>\n</a-form-item>\n```\n\n使用到的表单验证一般都会定义在 `rules` 中，但是也不能排除特出情况\n\n> 例如在图片上传时需要判断图片的 size，主要氛围两种情况：\n\n- 在上传到服务器之前，使用 `new Image()` 和 `URL.createObjectURL(file)`提前获得本地图片大小判断，不符合 size 就阻止上传；\n- 上传之后在提交时触发提交事件，主动触发表单的验证，使用图片的 URL 实例化本地图片在判断是否合规，决定是否可以提交\n\n### 简单的自定义表单验证\n\n[为什么 form 验证的 callback 必须被调用](https://github.com/ant-design/ant-design/issues/5155)\n\n```js\n// 表单中的input或者其他组件\n// v-decorator =\"['name', {initialValue: '', rules: [{required: true, message: 'some....'}, {validator: validator}]}]\"\n\nvalidator(file, value, callback) {\n    if(value === '....'){\n        // 验证没通过\n        callback('验证没通过')\n    } else {\n        callback()\n    }\n    // 无论验证是否通过，callback必须被调用\n}\n\n```\n\n> 以此类推，我们可以为表单添加多个验证规则 `rules:[{required: true, message: 'some....'}, {validator: imageLengthValidate}]`\n\n## 验证图片宽高大小的方式\n\n1. 上传至服务器之后的验证（通过表单验证的形式）\n\n```js\n// 验证方法 utils.js\nexport function imageInfo(src) {\n  return new Promise((resolve, reject) => {\n    // 通过图片上传后的地址来验证\n    if (!/[jpeg|png|jpg|gif|svg|ico]/gi.test(src)) {\n      message.warning('请上传图片类型文件')\n      return\n    }\n    const img = new Image()\n    img.src = src\n    img.onload = function() {\n      const { width, height } = this\n      resolve({\n        height,\n        width\n      })\n    }\n    img.onerror = e => {\n      message.error('图片加载失败')\n      reject(e)\n    }\n  })\n}\n\n//表单中附加的验证方法\nconst imagesSize = async (file, value, callback) => {\n  let error = undefined\n  // 因为验证方法中使用是异步，所以不能使用map来对数组进行遍历，使用for循环可以很好的解决这这个问题\n  for (let i = 0; i < value.length; i++) {\n    // 循环遍历验证，但是问题是即使某张图验证失败了，不能准确定位到不合规格的图片\n    const { url } = value[i]\n    const { width, height } = await imageInfo(url)\n    if (width !== 1920 || height !== 1276) {\n      error = '尺寸限制：1920x1276'\n      break\n    }\n  }\n  callback(error)\n}\n```\n\n2. 上传之前的验证\n   `utils.js` 中定义一个公共验证的方法，在需要的时候通过 props 传到上传组件中\n\n```js\n// utils.js\nexport function beforeImageInfo(file) {\n  // 无论失败还是成功都需要返回一个  `Promise`\n  return new Promise((resolve, reject) => {\n    if (!/^image\\/[jpeg|png|jpg|gif|svg|ico]/gi.test(file.type)) {\n      message.warning('请上传图片类型文件')\n      return\n    }\n    const img = new Image()\n    img.src = URL.createObjectURL(file)\n    img.onload = function() {\n      const { width, height } = this\n      resolve({\n        height,\n        width\n      })\n    }\n    img.onerror = e => {\n      message.error('图片加载失败')\n      reject(e)\n    }\n  })\n}\n```\n\n3. 如何在封装的组件中使用验证，拦截一切我们不需要的内容\n\n```js\n// 封装的组件中使用验证\nasync beforeUpload(file) {\n      if (file.size / 1000 > this.size) {\n        const message = '图片过大';\n        this.$message.warning(message);\n        return Promise.reject(message);\n      }\n      if (this.validate) {\n        await this.validate(file);\n      }\n      // 上传之前验证，不通过不上传\n      this.formData.token = await qnToken(this.tokenType);\n      return true;\n    }\n```\n","source":"_posts/2019-03-07-antd-vue.md","raw":"---\nlayout: post\ntitle: Ant design Vue\ndate: 2019-03-07\ncategories: antd\ntags:\n  - AntD\n  - 前端框架\n---\n\nant-design-UI 框架\n最后更新日期 2019-03-09\n\n<!-- more -->\n\n# 初期使用感受\n\n## element-UI 和 Ant Design Vue 的区别\n\n我司现在和以前的后台主要 UI 框架是 `element-ui`，在 `Ant Design Vue` 官宣之前就一直在关注，但是由于项目时间的不允许和 UI 框架稳定性的多方面考虑，一直都没机会尝试使用 `antd` 来搭建一个新的后台模版。\n\n## table\n\n### 基本功能\n\n自带分页、搜索、排序、自定义操作等功能\n使用 slot 插入其他组件、展示数据\n\n### 日常使用参数\n\n```html\n<a-table\n  :columns=\"columns\"\n  rowKey=\"id\"\n  :dataSource=\"data\"\n  :pagination=\"pagination\"\n  @change=\"handleTableChange\"\n>\n  <template #cover_url=\"cover_url\">\n    <my-image :src=\"cover_url\"></my-image>\n  </template>\n\n  <template #has_pano_new=\"has_pano_new\">\n    <span>{{has_pano_new}}slot插值</span>\n  </template>\n\n  <template #action=\"text, record\">\n    <my-button\n      @click=\"changeStatus(record)\"\n      :status=\"record.status\"\n    ></my-button>\n    <my-button @click=\"toEdit(record)\" ghost type=\"edit\"></my-button>\n    <my-button @click=\"remove(record)\" ghost type=\"remove\"></my-button>\n  </template>\n</a-table>\n```\n\n```js\ndata() {\n    return {\n        data: [\n             {\n              title: '操作',\n              dataIndex: 'action',\n              scopedSlots: { customRender: 'action' }\n            }\n        ]\n    }\n}\n```\n\n> 参数：\n> `columns`: 表格每行的数据和定义表头\n> `dataSource：` 表格全部数据，`dataSource` 和 `columns` 里的数据值都需要指定 `key` 值。对于 `dataSource` 默认将每列数据的 `key` 属性作为唯一的标识。\n> `rowKey`: 每行单独的 `key`，必须值，不可重复和不赋值，一般为 `id` > `pagination`: 表格自带的分页，接受一个 `Obj` 对象\n> `handleTableChange：` 翻页触发的回调\n\n> slot 插值\n> `#action=\"text, record\"` 相当于`v-slot:action=\"text,record\"`  \n> `slot`中包含两个参数，第一个是当前列的值，参照`cover_url`，`record`代表的是当前行对应的值，相等于`elment-ui`中`scope.row`，都可以取得当前行的所有数据\n\n### 排序和筛选\n\n不需要指定具体的 `onFilter` 和 `sorter` 函数，而是在把筛选和排序的参数发到服务端来处理。\n也可以通过 `slot` 来自定义筛选功能\n\n```js\n    [\n        { title: 'Name',\n          dataIndex: 'name',\n          sorter: true,\n          scopedSlots: { customRender: 'name' }\n        },\n        {\n            title: 'Gender',\n            dataIndex: 'gender',\n            filters: [\n              { text: 'Male', value: 'male' },\n              { text: 'Female', value: 'female' },\n            ],\n        }\n    ]\n\n    handleTableChange (pagination, filters, sorter) {\n        // do something\n    }\n```\n\n## form\n\n最重要的表单数据填充、验证和提交\n\n### Ant-design-vue 的表单验证\n\n```html\n<a-form-item v-bind=\"mapLayout\" label=\"图片附件\">\n  <hotel-upload\n    v-decorator=\"['attach', {initialValue: [],rules:[{validator: imageLengthValidate}]}]\"\n    :limit=\"100\"\n    :validate=\"validateImageSize\"\n  >\n  </hotel-upload>\n</a-form-item>\n```\n\n使用到的表单验证一般都会定义在 `rules` 中，但是也不能排除特出情况\n\n> 例如在图片上传时需要判断图片的 size，主要氛围两种情况：\n\n- 在上传到服务器之前，使用 `new Image()` 和 `URL.createObjectURL(file)`提前获得本地图片大小判断，不符合 size 就阻止上传；\n- 上传之后在提交时触发提交事件，主动触发表单的验证，使用图片的 URL 实例化本地图片在判断是否合规，决定是否可以提交\n\n### 简单的自定义表单验证\n\n[为什么 form 验证的 callback 必须被调用](https://github.com/ant-design/ant-design/issues/5155)\n\n```js\n// 表单中的input或者其他组件\n// v-decorator =\"['name', {initialValue: '', rules: [{required: true, message: 'some....'}, {validator: validator}]}]\"\n\nvalidator(file, value, callback) {\n    if(value === '....'){\n        // 验证没通过\n        callback('验证没通过')\n    } else {\n        callback()\n    }\n    // 无论验证是否通过，callback必须被调用\n}\n\n```\n\n> 以此类推，我们可以为表单添加多个验证规则 `rules:[{required: true, message: 'some....'}, {validator: imageLengthValidate}]`\n\n## 验证图片宽高大小的方式\n\n1. 上传至服务器之后的验证（通过表单验证的形式）\n\n```js\n// 验证方法 utils.js\nexport function imageInfo(src) {\n  return new Promise((resolve, reject) => {\n    // 通过图片上传后的地址来验证\n    if (!/[jpeg|png|jpg|gif|svg|ico]/gi.test(src)) {\n      message.warning('请上传图片类型文件')\n      return\n    }\n    const img = new Image()\n    img.src = src\n    img.onload = function() {\n      const { width, height } = this\n      resolve({\n        height,\n        width\n      })\n    }\n    img.onerror = e => {\n      message.error('图片加载失败')\n      reject(e)\n    }\n  })\n}\n\n//表单中附加的验证方法\nconst imagesSize = async (file, value, callback) => {\n  let error = undefined\n  // 因为验证方法中使用是异步，所以不能使用map来对数组进行遍历，使用for循环可以很好的解决这这个问题\n  for (let i = 0; i < value.length; i++) {\n    // 循环遍历验证，但是问题是即使某张图验证失败了，不能准确定位到不合规格的图片\n    const { url } = value[i]\n    const { width, height } = await imageInfo(url)\n    if (width !== 1920 || height !== 1276) {\n      error = '尺寸限制：1920x1276'\n      break\n    }\n  }\n  callback(error)\n}\n```\n\n2. 上传之前的验证\n   `utils.js` 中定义一个公共验证的方法，在需要的时候通过 props 传到上传组件中\n\n```js\n// utils.js\nexport function beforeImageInfo(file) {\n  // 无论失败还是成功都需要返回一个  `Promise`\n  return new Promise((resolve, reject) => {\n    if (!/^image\\/[jpeg|png|jpg|gif|svg|ico]/gi.test(file.type)) {\n      message.warning('请上传图片类型文件')\n      return\n    }\n    const img = new Image()\n    img.src = URL.createObjectURL(file)\n    img.onload = function() {\n      const { width, height } = this\n      resolve({\n        height,\n        width\n      })\n    }\n    img.onerror = e => {\n      message.error('图片加载失败')\n      reject(e)\n    }\n  })\n}\n```\n\n3. 如何在封装的组件中使用验证，拦截一切我们不需要的内容\n\n```js\n// 封装的组件中使用验证\nasync beforeUpload(file) {\n      if (file.size / 1000 > this.size) {\n        const message = '图片过大';\n        this.$message.warning(message);\n        return Promise.reject(message);\n      }\n      if (this.validate) {\n        await this.validate(file);\n      }\n      // 上传之前验证，不通过不上传\n      this.formData.token = await qnToken(this.tokenType);\n      return true;\n    }\n```\n","slug":"2019-03-07-antd-vue","published":1,"updated":"2019-04-24T06:34:29.089Z","comments":1,"photos":[],"link":"","_id":"cjvbyxkht000rw0ookwo401fi","content":"<p>ant-design-UI 框架<br>最后更新日期 2019-03-09</p>\n<a id=\"more\"></a>\n<h1 id=\"初期使用感受\"><a href=\"#初期使用感受\" class=\"headerlink\" title=\"初期使用感受\"></a>初期使用感受</h1><h2 id=\"element-UI-和-Ant-Design-Vue-的区别\"><a href=\"#element-UI-和-Ant-Design-Vue-的区别\" class=\"headerlink\" title=\"element-UI 和 Ant Design Vue 的区别\"></a>element-UI 和 Ant Design Vue 的区别</h2><p>我司现在和以前的后台主要 UI 框架是 <code>element-ui</code>，在 <code>Ant Design Vue</code> 官宣之前就一直在关注，但是由于项目时间的不允许和 UI 框架稳定性的多方面考虑，一直都没机会尝试使用 <code>antd</code> 来搭建一个新的后台模版。</p>\n<h2 id=\"table\"><a href=\"#table\" class=\"headerlink\" title=\"table\"></a>table</h2><h3 id=\"基本功能\"><a href=\"#基本功能\" class=\"headerlink\" title=\"基本功能\"></a>基本功能</h3><p>自带分页、搜索、排序、自定义操作等功能<br>使用 slot 插入其他组件、展示数据</p>\n<h3 id=\"日常使用参数\"><a href=\"#日常使用参数\" class=\"headerlink\" title=\"日常使用参数\"></a>日常使用参数</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a-table</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">:columns</span>=<span class=\"string\">\"columns\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">rowKey</span>=<span class=\"string\">\"id\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">:dataSource</span>=<span class=\"string\">\"data\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">:pagination</span>=<span class=\"string\">\"pagination\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  @<span class=\"attr\">change</span>=<span class=\"string\">\"handleTableChange\"</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> #<span class=\"attr\">cover_url</span>=<span class=\"string\">\"cover_url\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">my-image</span> <span class=\"attr\">:src</span>=<span class=\"string\">\"cover_url\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-image</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> #<span class=\"attr\">has_pano_new</span>=<span class=\"string\">\"has_pano_new\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;&#123;has_pano_new&#125;&#125;slot插值<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> #<span class=\"attr\">action</span>=<span class=\"string\">\"text, record\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">my-button</span></span></span><br><span class=\"line\"><span class=\"tag\">      @<span class=\"attr\">click</span>=<span class=\"string\">\"changeStatus(record)\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">:status</span>=<span class=\"string\">\"record.status\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">my-button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"toEdit(record)\"</span> <span class=\"attr\">ghost</span> <span class=\"attr\">type</span>=<span class=\"string\">\"edit\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">my-button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"remove(record)\"</span> <span class=\"attr\">ghost</span> <span class=\"attr\">type</span>=<span class=\"string\">\"remove\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">a-table</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        data: [</span><br><span class=\"line\">             &#123;</span><br><span class=\"line\">              title: <span class=\"string\">'操作'</span>,</span><br><span class=\"line\">              dataIndex: <span class=\"string\">'action'</span>,</span><br><span class=\"line\">              scopedSlots: &#123; <span class=\"attr\">customRender</span>: <span class=\"string\">'action'</span> &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>参数：<br><code>columns</code>: 表格每行的数据和定义表头<br><code>dataSource：</code> 表格全部数据，<code>dataSource</code> 和 <code>columns</code> 里的数据值都需要指定 <code>key</code> 值。对于 <code>dataSource</code> 默认将每列数据的 <code>key</code> 属性作为唯一的标识。<br><code>rowKey</code>: 每行单独的 <code>key</code>，必须值，不可重复和不赋值，一般为 <code>id</code> &gt; <code>pagination</code>: 表格自带的分页，接受一个 <code>Obj</code> 对象<br><code>handleTableChange：</code> 翻页触发的回调</p>\n</blockquote>\n<blockquote>\n<p>slot 插值<br><code>#action=&quot;text, record&quot;</code> 相当于<code>v-slot:action=&quot;text,record&quot;</code><br><code>slot</code>中包含两个参数，第一个是当前列的值，参照<code>cover_url</code>，<code>record</code>代表的是当前行对应的值，相等于<code>elment-ui</code>中<code>scope.row</code>，都可以取得当前行的所有数据</p>\n</blockquote>\n<h3 id=\"排序和筛选\"><a href=\"#排序和筛选\" class=\"headerlink\" title=\"排序和筛选\"></a>排序和筛选</h3><p>不需要指定具体的 <code>onFilter</code> 和 <code>sorter</code> 函数，而是在把筛选和排序的参数发到服务端来处理。<br>也可以通过 <code>slot</code> 来自定义筛选功能</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">    &#123; <span class=\"attr\">title</span>: <span class=\"string\">'Name'</span>,</span><br><span class=\"line\">      dataIndex: <span class=\"string\">'name'</span>,</span><br><span class=\"line\">      sorter: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      scopedSlots: &#123; <span class=\"attr\">customRender</span>: <span class=\"string\">'name'</span> &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        title: <span class=\"string\">'Gender'</span>,</span><br><span class=\"line\">        dataIndex: <span class=\"string\">'gender'</span>,</span><br><span class=\"line\">        filters: [</span><br><span class=\"line\">          &#123; <span class=\"attr\">text</span>: <span class=\"string\">'Male'</span>, <span class=\"attr\">value</span>: <span class=\"string\">'male'</span> &#125;,</span><br><span class=\"line\">          &#123; <span class=\"attr\">text</span>: <span class=\"string\">'Female'</span>, <span class=\"attr\">value</span>: <span class=\"string\">'female'</span> &#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">handleTableChange (pagination, filters, sorter) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// do something</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"form\"><a href=\"#form\" class=\"headerlink\" title=\"form\"></a>form</h2><p>最重要的表单数据填充、验证和提交</p>\n<h3 id=\"Ant-design-vue-的表单验证\"><a href=\"#Ant-design-vue-的表单验证\" class=\"headerlink\" title=\"Ant-design-vue 的表单验证\"></a>Ant-design-vue 的表单验证</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a-form-item</span> <span class=\"attr\">v-bind</span>=<span class=\"string\">\"mapLayout\"</span> <span class=\"attr\">label</span>=<span class=\"string\">\"图片附件\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">hotel-upload</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-decorator</span>=<span class=\"string\">\"['attach', &#123;initialValue: [],rules:[&#123;validator: imageLengthValidate&#125;]&#125;]\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:limit</span>=<span class=\"string\">\"100\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:validate</span>=<span class=\"string\">\"validateImageSize\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  &gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">hotel-upload</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">a-form-item</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>使用到的表单验证一般都会定义在 <code>rules</code> 中，但是也不能排除特出情况</p>\n<blockquote>\n<p>例如在图片上传时需要判断图片的 size，主要氛围两种情况：</p>\n</blockquote>\n<ul>\n<li>在上传到服务器之前，使用 <code>new Image()</code> 和 <code>URL.createObjectURL(file)</code>提前获得本地图片大小判断，不符合 size 就阻止上传；</li>\n<li>上传之后在提交时触发提交事件，主动触发表单的验证，使用图片的 URL 实例化本地图片在判断是否合规，决定是否可以提交</li>\n</ul>\n<h3 id=\"简单的自定义表单验证\"><a href=\"#简单的自定义表单验证\" class=\"headerlink\" title=\"简单的自定义表单验证\"></a>简单的自定义表单验证</h3><p><a href=\"https://github.com/ant-design/ant-design/issues/5155\" target=\"_blank\" rel=\"noopener\">为什么 form 验证的 callback 必须被调用</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 表单中的input或者其他组件</span></span><br><span class=\"line\"><span class=\"comment\">// v-decorator =\"['name', &#123;initialValue: '', rules: [&#123;required: true, message: 'some....'&#125;, &#123;validator: validator&#125;]&#125;]\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">validator(file, value, callback) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(value === <span class=\"string\">'....'</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 验证没通过</span></span><br><span class=\"line\">        callback(<span class=\"string\">'验证没通过'</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        callback()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 无论验证是否通过，callback必须被调用</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>以此类推，我们可以为表单添加多个验证规则 <code>rules:[{required: true, message: &#39;some....&#39;}, {validator: imageLengthValidate}]</code></p>\n</blockquote>\n<h2 id=\"验证图片宽高大小的方式\"><a href=\"#验证图片宽高大小的方式\" class=\"headerlink\" title=\"验证图片宽高大小的方式\"></a>验证图片宽高大小的方式</h2><ol>\n<li>上传至服务器之后的验证（通过表单验证的形式）</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 验证方法 utils.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">imageInfo</span>(<span class=\"params\">src</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 通过图片上传后的地址来验证</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"regexp\">/[jpeg|png|jpg|gif|svg|ico]/gi</span>.test(src)) &#123;</span><br><span class=\"line\">      message.warning(<span class=\"string\">'请上传图片类型文件'</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> img = <span class=\"keyword\">new</span> Image()</span><br><span class=\"line\">    img.src = src</span><br><span class=\"line\">    img.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; width, height &#125; = <span class=\"keyword\">this</span></span><br><span class=\"line\">      resolve(&#123;</span><br><span class=\"line\">        height,</span><br><span class=\"line\">        width</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    img.onerror = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">      message.error(<span class=\"string\">'图片加载失败'</span>)</span><br><span class=\"line\">      reject(e)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//表单中附加的验证方法</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> imagesSize = <span class=\"keyword\">async</span> (file, value, callback) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> error = <span class=\"literal\">undefined</span></span><br><span class=\"line\">  <span class=\"comment\">// 因为验证方法中使用是异步，所以不能使用map来对数组进行遍历，使用for循环可以很好的解决这这个问题</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; value.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 循环遍历验证，但是问题是即使某张图验证失败了，不能准确定位到不合规格的图片</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; url &#125; = value[i]</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; width, height &#125; = <span class=\"keyword\">await</span> imageInfo(url)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (width !== <span class=\"number\">1920</span> || height !== <span class=\"number\">1276</span>) &#123;</span><br><span class=\"line\">      error = <span class=\"string\">'尺寸限制：1920x1276'</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  callback(error)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>上传之前的验证<br><code>utils.js</code> 中定义一个公共验证的方法，在需要的时候通过 props 传到上传组件中</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// utils.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">beforeImageInfo</span>(<span class=\"params\">file</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 无论失败还是成功都需要返回一个  `Promise`</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"regexp\">/^image\\/[jpeg|png|jpg|gif|svg|ico]/gi</span>.test(file.type)) &#123;</span><br><span class=\"line\">      message.warning(<span class=\"string\">'请上传图片类型文件'</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> img = <span class=\"keyword\">new</span> Image()</span><br><span class=\"line\">    img.src = URL.createObjectURL(file)</span><br><span class=\"line\">    img.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; width, height &#125; = <span class=\"keyword\">this</span></span><br><span class=\"line\">      resolve(&#123;</span><br><span class=\"line\">        height,</span><br><span class=\"line\">        width</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    img.onerror = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">      message.error(<span class=\"string\">'图片加载失败'</span>)</span><br><span class=\"line\">      reject(e)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>如何在封装的组件中使用验证，拦截一切我们不需要的内容</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 封装的组件中使用验证</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> beforeUpload(file) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (file.size / <span class=\"number\">1000</span> &gt; <span class=\"keyword\">this</span>.size) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> message = <span class=\"string\">'图片过大'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.$message.warning(message);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(message);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.validate) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> <span class=\"keyword\">this</span>.validate(file);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 上传之前验证，不通过不上传</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.formData.token = <span class=\"keyword\">await</span> qnToken(<span class=\"keyword\">this</span>.tokenType);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>ant-design-UI 框架<br>最后更新日期 2019-03-09</p>","more":"<h1 id=\"初期使用感受\"><a href=\"#初期使用感受\" class=\"headerlink\" title=\"初期使用感受\"></a>初期使用感受</h1><h2 id=\"element-UI-和-Ant-Design-Vue-的区别\"><a href=\"#element-UI-和-Ant-Design-Vue-的区别\" class=\"headerlink\" title=\"element-UI 和 Ant Design Vue 的区别\"></a>element-UI 和 Ant Design Vue 的区别</h2><p>我司现在和以前的后台主要 UI 框架是 <code>element-ui</code>，在 <code>Ant Design Vue</code> 官宣之前就一直在关注，但是由于项目时间的不允许和 UI 框架稳定性的多方面考虑，一直都没机会尝试使用 <code>antd</code> 来搭建一个新的后台模版。</p>\n<h2 id=\"table\"><a href=\"#table\" class=\"headerlink\" title=\"table\"></a>table</h2><h3 id=\"基本功能\"><a href=\"#基本功能\" class=\"headerlink\" title=\"基本功能\"></a>基本功能</h3><p>自带分页、搜索、排序、自定义操作等功能<br>使用 slot 插入其他组件、展示数据</p>\n<h3 id=\"日常使用参数\"><a href=\"#日常使用参数\" class=\"headerlink\" title=\"日常使用参数\"></a>日常使用参数</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a-table</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">:columns</span>=<span class=\"string\">\"columns\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">rowKey</span>=<span class=\"string\">\"id\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">:dataSource</span>=<span class=\"string\">\"data\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">:pagination</span>=<span class=\"string\">\"pagination\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  @<span class=\"attr\">change</span>=<span class=\"string\">\"handleTableChange\"</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> #<span class=\"attr\">cover_url</span>=<span class=\"string\">\"cover_url\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">my-image</span> <span class=\"attr\">:src</span>=<span class=\"string\">\"cover_url\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-image</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> #<span class=\"attr\">has_pano_new</span>=<span class=\"string\">\"has_pano_new\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;&#123;has_pano_new&#125;&#125;slot插值<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> #<span class=\"attr\">action</span>=<span class=\"string\">\"text, record\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">my-button</span></span></span><br><span class=\"line\"><span class=\"tag\">      @<span class=\"attr\">click</span>=<span class=\"string\">\"changeStatus(record)\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">:status</span>=<span class=\"string\">\"record.status\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">my-button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"toEdit(record)\"</span> <span class=\"attr\">ghost</span> <span class=\"attr\">type</span>=<span class=\"string\">\"edit\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">my-button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"remove(record)\"</span> <span class=\"attr\">ghost</span> <span class=\"attr\">type</span>=<span class=\"string\">\"remove\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">a-table</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        data: [</span><br><span class=\"line\">             &#123;</span><br><span class=\"line\">              title: <span class=\"string\">'操作'</span>,</span><br><span class=\"line\">              dataIndex: <span class=\"string\">'action'</span>,</span><br><span class=\"line\">              scopedSlots: &#123; <span class=\"attr\">customRender</span>: <span class=\"string\">'action'</span> &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>参数：<br><code>columns</code>: 表格每行的数据和定义表头<br><code>dataSource：</code> 表格全部数据，<code>dataSource</code> 和 <code>columns</code> 里的数据值都需要指定 <code>key</code> 值。对于 <code>dataSource</code> 默认将每列数据的 <code>key</code> 属性作为唯一的标识。<br><code>rowKey</code>: 每行单独的 <code>key</code>，必须值，不可重复和不赋值，一般为 <code>id</code> &gt; <code>pagination</code>: 表格自带的分页，接受一个 <code>Obj</code> 对象<br><code>handleTableChange：</code> 翻页触发的回调</p>\n</blockquote>\n<blockquote>\n<p>slot 插值<br><code>#action=&quot;text, record&quot;</code> 相当于<code>v-slot:action=&quot;text,record&quot;</code><br><code>slot</code>中包含两个参数，第一个是当前列的值，参照<code>cover_url</code>，<code>record</code>代表的是当前行对应的值，相等于<code>elment-ui</code>中<code>scope.row</code>，都可以取得当前行的所有数据</p>\n</blockquote>\n<h3 id=\"排序和筛选\"><a href=\"#排序和筛选\" class=\"headerlink\" title=\"排序和筛选\"></a>排序和筛选</h3><p>不需要指定具体的 <code>onFilter</code> 和 <code>sorter</code> 函数，而是在把筛选和排序的参数发到服务端来处理。<br>也可以通过 <code>slot</code> 来自定义筛选功能</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">    &#123; <span class=\"attr\">title</span>: <span class=\"string\">'Name'</span>,</span><br><span class=\"line\">      dataIndex: <span class=\"string\">'name'</span>,</span><br><span class=\"line\">      sorter: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      scopedSlots: &#123; <span class=\"attr\">customRender</span>: <span class=\"string\">'name'</span> &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        title: <span class=\"string\">'Gender'</span>,</span><br><span class=\"line\">        dataIndex: <span class=\"string\">'gender'</span>,</span><br><span class=\"line\">        filters: [</span><br><span class=\"line\">          &#123; <span class=\"attr\">text</span>: <span class=\"string\">'Male'</span>, <span class=\"attr\">value</span>: <span class=\"string\">'male'</span> &#125;,</span><br><span class=\"line\">          &#123; <span class=\"attr\">text</span>: <span class=\"string\">'Female'</span>, <span class=\"attr\">value</span>: <span class=\"string\">'female'</span> &#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">handleTableChange (pagination, filters, sorter) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// do something</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"form\"><a href=\"#form\" class=\"headerlink\" title=\"form\"></a>form</h2><p>最重要的表单数据填充、验证和提交</p>\n<h3 id=\"Ant-design-vue-的表单验证\"><a href=\"#Ant-design-vue-的表单验证\" class=\"headerlink\" title=\"Ant-design-vue 的表单验证\"></a>Ant-design-vue 的表单验证</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a-form-item</span> <span class=\"attr\">v-bind</span>=<span class=\"string\">\"mapLayout\"</span> <span class=\"attr\">label</span>=<span class=\"string\">\"图片附件\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">hotel-upload</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-decorator</span>=<span class=\"string\">\"['attach', &#123;initialValue: [],rules:[&#123;validator: imageLengthValidate&#125;]&#125;]\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:limit</span>=<span class=\"string\">\"100\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:validate</span>=<span class=\"string\">\"validateImageSize\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  &gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">hotel-upload</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">a-form-item</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>使用到的表单验证一般都会定义在 <code>rules</code> 中，但是也不能排除特出情况</p>\n<blockquote>\n<p>例如在图片上传时需要判断图片的 size，主要氛围两种情况：</p>\n</blockquote>\n<ul>\n<li>在上传到服务器之前，使用 <code>new Image()</code> 和 <code>URL.createObjectURL(file)</code>提前获得本地图片大小判断，不符合 size 就阻止上传；</li>\n<li>上传之后在提交时触发提交事件，主动触发表单的验证，使用图片的 URL 实例化本地图片在判断是否合规，决定是否可以提交</li>\n</ul>\n<h3 id=\"简单的自定义表单验证\"><a href=\"#简单的自定义表单验证\" class=\"headerlink\" title=\"简单的自定义表单验证\"></a>简单的自定义表单验证</h3><p><a href=\"https://github.com/ant-design/ant-design/issues/5155\" target=\"_blank\" rel=\"noopener\">为什么 form 验证的 callback 必须被调用</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 表单中的input或者其他组件</span></span><br><span class=\"line\"><span class=\"comment\">// v-decorator =\"['name', &#123;initialValue: '', rules: [&#123;required: true, message: 'some....'&#125;, &#123;validator: validator&#125;]&#125;]\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">validator(file, value, callback) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(value === <span class=\"string\">'....'</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 验证没通过</span></span><br><span class=\"line\">        callback(<span class=\"string\">'验证没通过'</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        callback()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 无论验证是否通过，callback必须被调用</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>以此类推，我们可以为表单添加多个验证规则 <code>rules:[{required: true, message: &#39;some....&#39;}, {validator: imageLengthValidate}]</code></p>\n</blockquote>\n<h2 id=\"验证图片宽高大小的方式\"><a href=\"#验证图片宽高大小的方式\" class=\"headerlink\" title=\"验证图片宽高大小的方式\"></a>验证图片宽高大小的方式</h2><ol>\n<li>上传至服务器之后的验证（通过表单验证的形式）</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 验证方法 utils.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">imageInfo</span>(<span class=\"params\">src</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 通过图片上传后的地址来验证</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"regexp\">/[jpeg|png|jpg|gif|svg|ico]/gi</span>.test(src)) &#123;</span><br><span class=\"line\">      message.warning(<span class=\"string\">'请上传图片类型文件'</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> img = <span class=\"keyword\">new</span> Image()</span><br><span class=\"line\">    img.src = src</span><br><span class=\"line\">    img.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; width, height &#125; = <span class=\"keyword\">this</span></span><br><span class=\"line\">      resolve(&#123;</span><br><span class=\"line\">        height,</span><br><span class=\"line\">        width</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    img.onerror = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">      message.error(<span class=\"string\">'图片加载失败'</span>)</span><br><span class=\"line\">      reject(e)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//表单中附加的验证方法</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> imagesSize = <span class=\"keyword\">async</span> (file, value, callback) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> error = <span class=\"literal\">undefined</span></span><br><span class=\"line\">  <span class=\"comment\">// 因为验证方法中使用是异步，所以不能使用map来对数组进行遍历，使用for循环可以很好的解决这这个问题</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; value.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 循环遍历验证，但是问题是即使某张图验证失败了，不能准确定位到不合规格的图片</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; url &#125; = value[i]</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; width, height &#125; = <span class=\"keyword\">await</span> imageInfo(url)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (width !== <span class=\"number\">1920</span> || height !== <span class=\"number\">1276</span>) &#123;</span><br><span class=\"line\">      error = <span class=\"string\">'尺寸限制：1920x1276'</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  callback(error)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>上传之前的验证<br><code>utils.js</code> 中定义一个公共验证的方法，在需要的时候通过 props 传到上传组件中</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// utils.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">beforeImageInfo</span>(<span class=\"params\">file</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 无论失败还是成功都需要返回一个  `Promise`</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"regexp\">/^image\\/[jpeg|png|jpg|gif|svg|ico]/gi</span>.test(file.type)) &#123;</span><br><span class=\"line\">      message.warning(<span class=\"string\">'请上传图片类型文件'</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> img = <span class=\"keyword\">new</span> Image()</span><br><span class=\"line\">    img.src = URL.createObjectURL(file)</span><br><span class=\"line\">    img.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; width, height &#125; = <span class=\"keyword\">this</span></span><br><span class=\"line\">      resolve(&#123;</span><br><span class=\"line\">        height,</span><br><span class=\"line\">        width</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    img.onerror = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">      message.error(<span class=\"string\">'图片加载失败'</span>)</span><br><span class=\"line\">      reject(e)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>如何在封装的组件中使用验证，拦截一切我们不需要的内容</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 封装的组件中使用验证</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> beforeUpload(file) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (file.size / <span class=\"number\">1000</span> &gt; <span class=\"keyword\">this</span>.size) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> message = <span class=\"string\">'图片过大'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.$message.warning(message);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(message);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.validate) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> <span class=\"keyword\">this</span>.validate(file);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 上传之前验证，不通过不上传</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.formData.token = <span class=\"keyword\">await</span> qnToken(<span class=\"keyword\">this</span>.tokenType);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"mpvue","date":"2018-11-19T16:00:00.000Z","_content":"\nmpvue 框架的使用\n最后更新时间 2018 年 11 月 20 日\n\n<!-- more -->\n\n# 主要特点\n\n&nbsp; &nbsp; &nbsp;小程序版本的`Vue.js`\n\n- 彻底的组件化开发能力：提高代码复用性\n- 完整的 `Vue.js` 开发体验\n- 方便的 `Vuex` 数据管理方案：方便构建复杂应用\n- 快捷的 `webpack` 构建机制：自定义构建策略、开发阶段 hotReload\n- 支持使用 npm 外部依赖\n- H5 代码转换编译成小程序目标代码的能力\n\n## 生命周期\n\n有趣的是 [mpvue](http://mpvue.com/mpvue/#_5) 框架的生命周期是融合了`vue`和`小程序`的生命周期，重新组合的一套兼容 [mini-app](https://developers.weixin.qq.com/miniprogram/dev/api/)的一套完整生命周期\n\n** 注意点 **\n\n1. 在小程序的 onReady 后，才会去出发 mounted 的生命周期\n2. 如果每次进入页面都要重新请求数据，建议使用 onShow 来请求数据，但是用户体验不太好, 如果只需要在第一次进入页面时请求数据，随后的数据都不改变，应该使用 mounted，不必要频繁的去请求接口、刷新页面。 3.官方文档上建议使用 Vue 的生命周期函数\n3. 小程序的 `onPullDownRefresh` 能够检测到页面下拉动作，可以用来实现上拉刷新的操作， 需要搭配 `stopPullDownRefresh` 来使用\n4. `onReachBottom` 页面上拉触底事件的处理函数，\n\n### 小程序实现下拉刷新的操作\n\n```js\nasync onPullDownRefresh() {\n    wx.showLoading();\n    ....\n    // 相应的上拉事件处理函数　\n    setTimeout(() => {\n      wx.hideLoading();\n      wx.stopPullDownRefresh();\n    }, 1000);\n  },\n```\n\n#### 页面触底之后的上拉操作\n\n```js\nasync onReachBottom() {\n    // 首屏时只展示部分数据，未展示所有的数据\n    // 判断当前的数据量是不是后台接口返回的总数据量\n    if (this.List.length < this.total) {\n    // 数据没有完全被加载，上拉一次再次加载一次数据\n      this.pageData.page = this.pageData.page + 1;\n      const List = this.List;\n      const data = await fetchExpertsDetail(this.pageData);\n      this.List = [...answerList, ...data.answer]; // 合并新请求的数据和老的数据\n    } else {\n    // 如果全加载了，给个提示\n      console.log('到底啦');\n    }\n  },\n```\n\n#### 小程序的路由跳转\n\n> 要注意跳转到非 tabBar 页和 跳转到 tabBar 导航页\n\n1. 跳转到到导航页： wx.switchTab(Object object) 跳转到 tabBar 页面，并关闭其他所有非 tabBar 页面\n2. 跳转到非导航页： wx.navigateTo(Object object) 保留当前页面，跳转到应用内的某个页面，使用 wx.navigateBack 可以返回到原跳转的页面，原页面没有被销毁。\n3. wx.redirectTo(Object object) 关闭当前页面，跳转到应用内的某个页面。但是不允许跳转到 tabbar 页面。\n\n> 跳转的 query 参数  \n> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;微信小程序的页面的 `query` 参数是通过 `onLoad` 获取的，`mpvue` 进行了优化，直接通过 `this.$root.$mp.query` 获取相应的参数数据，其调用需要在 `onLoad` 生命周期触发之后使用\n\n#### mpvue 暂时不能使用的语法\n\n1. 不支持 `纯-HTML` ，小程序不支持所有的 DOM 和/BOM 操作，`v-html` 的语法是不能用的\n2. 尽量不要在代码的双花括号中处理数据，例如：三元判断，字符处理等等的，`compouted` 是更好的选择\n3. 在列表循环渲染时： 一定要牢记，千万不要在嵌套的 for 循环中使用相同的 index\n\n```js\n<ul v-for=\"(card, index) in list\">\n        <li v-for=\"(item, itemIndex) in card\">\n            {{item.value}}\n        </li>\n    </ul>\n```\n\n4. 事件修饰符： `.stop` 能处理一些预料之外的情况\n5. 不支持在组件引用时，在组件上定义原生的事件（click），并且 class 和 style 等样式属性也不会生效，解决样式的问题： 写在内部顶级元素上，不要使用 scoped 来限制，可以加一个顶级 class 来防止 class 样式外泄\n\n#### 小程序表单和 video\n\n> 小程序的坑： textarea 和 video 当被激活时他们的层级永远是最高的，无法去处理\n> textarea 的处理方法： 当需要在 `textarea` 的上方加上一个弹窗活着页面时，需要手动的把 `textarea` 隐藏，换一种方法来实现  \n> video 暂时还不知道怎么处理，同时还要注意视频的播放问题，在离开页面的时候要强制的关闭视频\n\n### 小程序的登陆逻辑\n\n> 现如今的小程序已经不在支持强制登陆，而是需要用户点击登陆按钮之后才能获取登陆权限，为了防止每次登陆的时候都会弹出一个默认的弹出框，仅仅是在首次登陆的时候弹出授权框，提升用户体验。\n\n** 暂时的实现逻辑： **\n\n- 首次登陆： 去拿用户的 `code` 之后，发送 `code` 给后台换取 `session_key、unionid`, `openid，` 这个请求的过程一般是在打开登陆界面的时候已经调用了（此时已经取得了 `session_key`），当用户点击登陆的时候才会去调取登陆接口，拿获得 `session` 去换取用户信息。  \n  此时还拿到了 `token`，用于用户以后的登陆，作为登陆的另外一个依据\n- 二次登陆： 静默登陆，拿第一次返回的数据进行登陆，不再使微信打开获取登陆权限的弹窗\n\n```js\n// HTML\n <button class=\"center-flex btn wx-btn\" hover-class=\"opacity\" type=\"primary\" open-type=\"getPhoneNumber\" @getphonenumber=\"getphonenumber\">\n      <img src=\"/static/images/wechat.png\" class=\"wx-icon\">\n      <div class=\"wx-text\">微信手机号登陆</div>  为了获取权限\n    </button>\n  <button @click=\"toBind\" hover-class=\"opacity\" class=\"center-flex btn phone-btn\">手机验证码登陆</button>\n\n  // js\n  import { login, phoneLogin } from '@/utils/login'\n  import { redirectBack, getCurrentOptions } from '@/utils'\n  import authority from '@/utils/authority'\n\n  export default {\n    methods: {\n      login() {\n        authority.clear() //登陆前清除用户信息\n        login()\n      },\n      toBind() {\n        const { back } = getCurrentOptions()  // 手动输入手机号 跳转到另一个登陆页面\n        wx.navigateTo({\n          url: `/pages/bind/main?back=${back}`\n        })\n      },\n      getphonenumber(e) {\n        const { encryptedData, iv } = e.target  // 判断是否包含特殊的数据，通俗来说用户是否同意了登陆权限\n        if (!encryptedData) {\n          return this.toBind()\n        } else {\n          phoneLogin({\n            encrypted_data: encryptedData,\n            iv\n          }).then(() => {\n            wx.showToast({\n              title: '登陆成功'\n            })\n            redirectBack()  // 返回前一个需要登陆的页面\n          }).catch((e) => {\n            console.error(e)\n            this.toBind()\n          })\n        }\n      }\n    },\n    onShow() {\n      this.login()\n    }\n\n```\n","source":"_posts/2018-11-20-mpvue.md","raw":"---\nlayout: post\ntitle: mpvue\ndate: 2018-11-20\ncategories: mpvue\ntags:\n  - MPVue\n  - vue\n  - 小程序\n---\n\nmpvue 框架的使用\n最后更新时间 2018 年 11 月 20 日\n\n<!-- more -->\n\n# 主要特点\n\n&nbsp; &nbsp; &nbsp;小程序版本的`Vue.js`\n\n- 彻底的组件化开发能力：提高代码复用性\n- 完整的 `Vue.js` 开发体验\n- 方便的 `Vuex` 数据管理方案：方便构建复杂应用\n- 快捷的 `webpack` 构建机制：自定义构建策略、开发阶段 hotReload\n- 支持使用 npm 外部依赖\n- H5 代码转换编译成小程序目标代码的能力\n\n## 生命周期\n\n有趣的是 [mpvue](http://mpvue.com/mpvue/#_5) 框架的生命周期是融合了`vue`和`小程序`的生命周期，重新组合的一套兼容 [mini-app](https://developers.weixin.qq.com/miniprogram/dev/api/)的一套完整生命周期\n\n** 注意点 **\n\n1. 在小程序的 onReady 后，才会去出发 mounted 的生命周期\n2. 如果每次进入页面都要重新请求数据，建议使用 onShow 来请求数据，但是用户体验不太好, 如果只需要在第一次进入页面时请求数据，随后的数据都不改变，应该使用 mounted，不必要频繁的去请求接口、刷新页面。 3.官方文档上建议使用 Vue 的生命周期函数\n3. 小程序的 `onPullDownRefresh` 能够检测到页面下拉动作，可以用来实现上拉刷新的操作， 需要搭配 `stopPullDownRefresh` 来使用\n4. `onReachBottom` 页面上拉触底事件的处理函数，\n\n### 小程序实现下拉刷新的操作\n\n```js\nasync onPullDownRefresh() {\n    wx.showLoading();\n    ....\n    // 相应的上拉事件处理函数　\n    setTimeout(() => {\n      wx.hideLoading();\n      wx.stopPullDownRefresh();\n    }, 1000);\n  },\n```\n\n#### 页面触底之后的上拉操作\n\n```js\nasync onReachBottom() {\n    // 首屏时只展示部分数据，未展示所有的数据\n    // 判断当前的数据量是不是后台接口返回的总数据量\n    if (this.List.length < this.total) {\n    // 数据没有完全被加载，上拉一次再次加载一次数据\n      this.pageData.page = this.pageData.page + 1;\n      const List = this.List;\n      const data = await fetchExpertsDetail(this.pageData);\n      this.List = [...answerList, ...data.answer]; // 合并新请求的数据和老的数据\n    } else {\n    // 如果全加载了，给个提示\n      console.log('到底啦');\n    }\n  },\n```\n\n#### 小程序的路由跳转\n\n> 要注意跳转到非 tabBar 页和 跳转到 tabBar 导航页\n\n1. 跳转到到导航页： wx.switchTab(Object object) 跳转到 tabBar 页面，并关闭其他所有非 tabBar 页面\n2. 跳转到非导航页： wx.navigateTo(Object object) 保留当前页面，跳转到应用内的某个页面，使用 wx.navigateBack 可以返回到原跳转的页面，原页面没有被销毁。\n3. wx.redirectTo(Object object) 关闭当前页面，跳转到应用内的某个页面。但是不允许跳转到 tabbar 页面。\n\n> 跳转的 query 参数  \n> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;微信小程序的页面的 `query` 参数是通过 `onLoad` 获取的，`mpvue` 进行了优化，直接通过 `this.$root.$mp.query` 获取相应的参数数据，其调用需要在 `onLoad` 生命周期触发之后使用\n\n#### mpvue 暂时不能使用的语法\n\n1. 不支持 `纯-HTML` ，小程序不支持所有的 DOM 和/BOM 操作，`v-html` 的语法是不能用的\n2. 尽量不要在代码的双花括号中处理数据，例如：三元判断，字符处理等等的，`compouted` 是更好的选择\n3. 在列表循环渲染时： 一定要牢记，千万不要在嵌套的 for 循环中使用相同的 index\n\n```js\n<ul v-for=\"(card, index) in list\">\n        <li v-for=\"(item, itemIndex) in card\">\n            {{item.value}}\n        </li>\n    </ul>\n```\n\n4. 事件修饰符： `.stop` 能处理一些预料之外的情况\n5. 不支持在组件引用时，在组件上定义原生的事件（click），并且 class 和 style 等样式属性也不会生效，解决样式的问题： 写在内部顶级元素上，不要使用 scoped 来限制，可以加一个顶级 class 来防止 class 样式外泄\n\n#### 小程序表单和 video\n\n> 小程序的坑： textarea 和 video 当被激活时他们的层级永远是最高的，无法去处理\n> textarea 的处理方法： 当需要在 `textarea` 的上方加上一个弹窗活着页面时，需要手动的把 `textarea` 隐藏，换一种方法来实现  \n> video 暂时还不知道怎么处理，同时还要注意视频的播放问题，在离开页面的时候要强制的关闭视频\n\n### 小程序的登陆逻辑\n\n> 现如今的小程序已经不在支持强制登陆，而是需要用户点击登陆按钮之后才能获取登陆权限，为了防止每次登陆的时候都会弹出一个默认的弹出框，仅仅是在首次登陆的时候弹出授权框，提升用户体验。\n\n** 暂时的实现逻辑： **\n\n- 首次登陆： 去拿用户的 `code` 之后，发送 `code` 给后台换取 `session_key、unionid`, `openid，` 这个请求的过程一般是在打开登陆界面的时候已经调用了（此时已经取得了 `session_key`），当用户点击登陆的时候才会去调取登陆接口，拿获得 `session` 去换取用户信息。  \n  此时还拿到了 `token`，用于用户以后的登陆，作为登陆的另外一个依据\n- 二次登陆： 静默登陆，拿第一次返回的数据进行登陆，不再使微信打开获取登陆权限的弹窗\n\n```js\n// HTML\n <button class=\"center-flex btn wx-btn\" hover-class=\"opacity\" type=\"primary\" open-type=\"getPhoneNumber\" @getphonenumber=\"getphonenumber\">\n      <img src=\"/static/images/wechat.png\" class=\"wx-icon\">\n      <div class=\"wx-text\">微信手机号登陆</div>  为了获取权限\n    </button>\n  <button @click=\"toBind\" hover-class=\"opacity\" class=\"center-flex btn phone-btn\">手机验证码登陆</button>\n\n  // js\n  import { login, phoneLogin } from '@/utils/login'\n  import { redirectBack, getCurrentOptions } from '@/utils'\n  import authority from '@/utils/authority'\n\n  export default {\n    methods: {\n      login() {\n        authority.clear() //登陆前清除用户信息\n        login()\n      },\n      toBind() {\n        const { back } = getCurrentOptions()  // 手动输入手机号 跳转到另一个登陆页面\n        wx.navigateTo({\n          url: `/pages/bind/main?back=${back}`\n        })\n      },\n      getphonenumber(e) {\n        const { encryptedData, iv } = e.target  // 判断是否包含特殊的数据，通俗来说用户是否同意了登陆权限\n        if (!encryptedData) {\n          return this.toBind()\n        } else {\n          phoneLogin({\n            encrypted_data: encryptedData,\n            iv\n          }).then(() => {\n            wx.showToast({\n              title: '登陆成功'\n            })\n            redirectBack()  // 返回前一个需要登陆的页面\n          }).catch((e) => {\n            console.error(e)\n            this.toBind()\n          })\n        }\n      }\n    },\n    onShow() {\n      this.login()\n    }\n\n```\n","slug":"2018-11-20-mpvue","published":1,"updated":"2019-04-24T06:16:19.104Z","comments":1,"photos":[],"link":"","_id":"cjvbyxkhv000ww0oo7i8mh7pm","content":"<p>mpvue 框架的使用<br>最后更新时间 2018 年 11 月 20 日</p>\n<a id=\"more\"></a>\n<h1 id=\"主要特点\"><a href=\"#主要特点\" class=\"headerlink\" title=\"主要特点\"></a>主要特点</h1><p>&nbsp; &nbsp; &nbsp;小程序版本的<code>Vue.js</code></p>\n<ul>\n<li>彻底的组件化开发能力：提高代码复用性</li>\n<li>完整的 <code>Vue.js</code> 开发体验</li>\n<li>方便的 <code>Vuex</code> 数据管理方案：方便构建复杂应用</li>\n<li>快捷的 <code>webpack</code> 构建机制：自定义构建策略、开发阶段 hotReload</li>\n<li>支持使用 npm 外部依赖</li>\n<li>H5 代码转换编译成小程序目标代码的能力</li>\n</ul>\n<h2 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h2><p>有趣的是 <a href=\"http://mpvue.com/mpvue/#_5\" target=\"_blank\" rel=\"noopener\">mpvue</a> 框架的生命周期是融合了<code>vue</code>和<code>小程序</code>的生命周期，重新组合的一套兼容 <a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/\" target=\"_blank\" rel=\"noopener\">mini-app</a>的一套完整生命周期</p>\n<p><strong> 注意点 </strong></p>\n<ol>\n<li>在小程序的 onReady 后，才会去出发 mounted 的生命周期</li>\n<li>如果每次进入页面都要重新请求数据，建议使用 onShow 来请求数据，但是用户体验不太好, 如果只需要在第一次进入页面时请求数据，随后的数据都不改变，应该使用 mounted，不必要频繁的去请求接口、刷新页面。 3.官方文档上建议使用 Vue 的生命周期函数</li>\n<li>小程序的 <code>onPullDownRefresh</code> 能够检测到页面下拉动作，可以用来实现上拉刷新的操作， 需要搭配 <code>stopPullDownRefresh</code> 来使用</li>\n<li><code>onReachBottom</code> 页面上拉触底事件的处理函数，</li>\n</ol>\n<h3 id=\"小程序实现下拉刷新的操作\"><a href=\"#小程序实现下拉刷新的操作\" class=\"headerlink\" title=\"小程序实现下拉刷新的操作\"></a>小程序实现下拉刷新的操作</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> onPullDownRefresh() &#123;</span><br><span class=\"line\">    wx.showLoading();</span><br><span class=\"line\">    ....</span><br><span class=\"line\">    <span class=\"comment\">// 相应的上拉事件处理函数　</span></span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      wx.hideLoading();</span><br><span class=\"line\">      wx.stopPullDownRefresh();</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n<h4 id=\"页面触底之后的上拉操作\"><a href=\"#页面触底之后的上拉操作\" class=\"headerlink\" title=\"页面触底之后的上拉操作\"></a>页面触底之后的上拉操作</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> onReachBottom() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 首屏时只展示部分数据，未展示所有的数据</span></span><br><span class=\"line\">    <span class=\"comment\">// 判断当前的数据量是不是后台接口返回的总数据量</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.List.length &lt; <span class=\"keyword\">this</span>.total) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 数据没有完全被加载，上拉一次再次加载一次数据</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.pageData.page = <span class=\"keyword\">this</span>.pageData.page + <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> List = <span class=\"keyword\">this</span>.List;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> data = <span class=\"keyword\">await</span> fetchExpertsDetail(<span class=\"keyword\">this</span>.pageData);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.List = [...answerList, ...data.answer]; <span class=\"comment\">// 合并新请求的数据和老的数据</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果全加载了，给个提示</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'到底啦'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n<h4 id=\"小程序的路由跳转\"><a href=\"#小程序的路由跳转\" class=\"headerlink\" title=\"小程序的路由跳转\"></a>小程序的路由跳转</h4><blockquote>\n<p>要注意跳转到非 tabBar 页和 跳转到 tabBar 导航页</p>\n</blockquote>\n<ol>\n<li>跳转到到导航页： wx.switchTab(Object object) 跳转到 tabBar 页面，并关闭其他所有非 tabBar 页面</li>\n<li>跳转到非导航页： wx.navigateTo(Object object) 保留当前页面，跳转到应用内的某个页面，使用 wx.navigateBack 可以返回到原跳转的页面，原页面没有被销毁。</li>\n<li>wx.redirectTo(Object object) 关闭当前页面，跳转到应用内的某个页面。但是不允许跳转到 tabbar 页面。</li>\n</ol>\n<blockquote>\n<p>跳转的 query 参数<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;微信小程序的页面的 <code>query</code> 参数是通过 <code>onLoad</code> 获取的，<code>mpvue</code> 进行了优化，直接通过 <code>this.$root.$mp.query</code> 获取相应的参数数据，其调用需要在 <code>onLoad</code> 生命周期触发之后使用</p>\n</blockquote>\n<h4 id=\"mpvue-暂时不能使用的语法\"><a href=\"#mpvue-暂时不能使用的语法\" class=\"headerlink\" title=\"mpvue 暂时不能使用的语法\"></a>mpvue 暂时不能使用的语法</h4><ol>\n<li>不支持 <code>纯-HTML</code> ，小程序不支持所有的 DOM 和/BOM 操作，<code>v-html</code> 的语法是不能用的</li>\n<li>尽量不要在代码的双花括号中处理数据，例如：三元判断，字符处理等等的，<code>compouted</code> 是更好的选择</li>\n<li>在列表循环渲染时： 一定要牢记，千万不要在嵌套的 for 循环中使用相同的 index</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ul v-<span class=\"keyword\">for</span>=<span class=\"string\">\"(card, index) in list\"</span>&gt;</span><br><span class=\"line\">        &lt;li v-<span class=\"keyword\">for</span>=<span class=\"string\">\"(item, itemIndex) in card\"</span>&gt;</span><br><span class=\"line\">            &#123;&#123;item.value&#125;&#125;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/u</span>l&gt;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>事件修饰符： <code>.stop</code> 能处理一些预料之外的情况</li>\n<li>不支持在组件引用时，在组件上定义原生的事件（click），并且 class 和 style 等样式属性也不会生效，解决样式的问题： 写在内部顶级元素上，不要使用 scoped 来限制，可以加一个顶级 class 来防止 class 样式外泄</li>\n</ol>\n<h4 id=\"小程序表单和-video\"><a href=\"#小程序表单和-video\" class=\"headerlink\" title=\"小程序表单和 video\"></a>小程序表单和 video</h4><blockquote>\n<p>小程序的坑： textarea 和 video 当被激活时他们的层级永远是最高的，无法去处理<br>textarea 的处理方法： 当需要在 <code>textarea</code> 的上方加上一个弹窗活着页面时，需要手动的把 <code>textarea</code> 隐藏，换一种方法来实现<br>video 暂时还不知道怎么处理，同时还要注意视频的播放问题，在离开页面的时候要强制的关闭视频</p>\n</blockquote>\n<h3 id=\"小程序的登陆逻辑\"><a href=\"#小程序的登陆逻辑\" class=\"headerlink\" title=\"小程序的登陆逻辑\"></a>小程序的登陆逻辑</h3><blockquote>\n<p>现如今的小程序已经不在支持强制登陆，而是需要用户点击登陆按钮之后才能获取登陆权限，为了防止每次登陆的时候都会弹出一个默认的弹出框，仅仅是在首次登陆的时候弹出授权框，提升用户体验。</p>\n</blockquote>\n<p><strong> 暂时的实现逻辑： </strong></p>\n<ul>\n<li>首次登陆： 去拿用户的 <code>code</code> 之后，发送 <code>code</code> 给后台换取 <code>session_key、unionid</code>, <code>openid，</code> 这个请求的过程一般是在打开登陆界面的时候已经调用了（此时已经取得了 <code>session_key</code>），当用户点击登陆的时候才会去调取登陆接口，拿获得 <code>session</code> 去换取用户信息。<br>此时还拿到了 <code>token</code>，用于用户以后的登陆，作为登陆的另外一个依据</li>\n<li>二次登陆： 静默登陆，拿第一次返回的数据进行登陆，不再使微信打开获取登陆权限的弹窗</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// HTML</span></span><br><span class=\"line\"> &lt;button <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"center-flex btn wx-btn\"</span> hover-<span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"opacity\"</span> type=<span class=\"string\">\"primary\"</span> open-type=<span class=\"string\">\"getPhoneNumber\"</span> @getphonenumber=<span class=\"string\">\"getphonenumber\"</span>&gt;</span><br><span class=\"line\">      &lt;img src=<span class=\"string\">\"/static/images/wechat.png\"</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"wx-icon\"</span>&gt;</span><br><span class=\"line\">      &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"wx-text\"</span>&gt;微信手机号登陆&lt;<span class=\"regexp\">/div&gt;  为了获取权限</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>button&gt;</span><br><span class=\"line\">  &lt;button @click=<span class=\"string\">\"toBind\"</span> hover-<span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"opacity\"</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"center-flex btn phone-btn\"</span>&gt;手机验证码登陆&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">  /</span><span class=\"regexp\">/ js</span></span><br><span class=\"line\"><span class=\"regexp\">  import &#123; login, phoneLogin &#125; from '@/u</span>tils/login<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">  import &#123; redirectBack, getCurrentOptions &#125; from '</span>@/utils<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">  import authority from '</span>@/utils/authority<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">  export default &#123;</span></span><br><span class=\"line\"><span class=\"string\">    methods: &#123;</span></span><br><span class=\"line\"><span class=\"string\">      login() &#123;</span></span><br><span class=\"line\"><span class=\"string\">        authority.clear() //登陆前清除用户信息</span></span><br><span class=\"line\"><span class=\"string\">        login()</span></span><br><span class=\"line\"><span class=\"string\">      &#125;,</span></span><br><span class=\"line\"><span class=\"string\">      toBind() &#123;</span></span><br><span class=\"line\"><span class=\"string\">        const &#123; back &#125; = getCurrentOptions()  // 手动输入手机号 跳转到另一个登陆页面</span></span><br><span class=\"line\"><span class=\"string\">        wx.navigateTo(&#123;</span></span><br><span class=\"line\"><span class=\"string\">          url: `/pages/bind/main?back=$&#123;back&#125;`</span></span><br><span class=\"line\"><span class=\"string\">        &#125;)</span></span><br><span class=\"line\"><span class=\"string\">      &#125;,</span></span><br><span class=\"line\"><span class=\"string\">      getphonenumber(e) &#123;</span></span><br><span class=\"line\"><span class=\"string\">        const &#123; encryptedData, iv &#125; = e.target  // 判断是否包含特殊的数据，通俗来说用户是否同意了登陆权限</span></span><br><span class=\"line\"><span class=\"string\">        if (!encryptedData) &#123;</span></span><br><span class=\"line\"><span class=\"string\">          return this.toBind()</span></span><br><span class=\"line\"><span class=\"string\">        &#125; else &#123;</span></span><br><span class=\"line\"><span class=\"string\">          phoneLogin(&#123;</span></span><br><span class=\"line\"><span class=\"string\">            encrypted_data: encryptedData,</span></span><br><span class=\"line\"><span class=\"string\">            iv</span></span><br><span class=\"line\"><span class=\"string\">          &#125;).then(() =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"string\">            wx.showToast(&#123;</span></span><br><span class=\"line\"><span class=\"string\">              title: '</span>登陆成功<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">            &#125;)</span></span><br><span class=\"line\"><span class=\"string\">            redirectBack()  // 返回前一个需要登陆的页面</span></span><br><span class=\"line\"><span class=\"string\">          &#125;).catch((e) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"string\">            console.error(e)</span></span><br><span class=\"line\"><span class=\"string\">            this.toBind()</span></span><br><span class=\"line\"><span class=\"string\">          &#125;)</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">      &#125;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;,</span></span><br><span class=\"line\"><span class=\"string\">    onShow() &#123;</span></span><br><span class=\"line\"><span class=\"string\">      this.login()</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>mpvue 框架的使用<br>最后更新时间 2018 年 11 月 20 日</p>","more":"<h1 id=\"主要特点\"><a href=\"#主要特点\" class=\"headerlink\" title=\"主要特点\"></a>主要特点</h1><p>&nbsp; &nbsp; &nbsp;小程序版本的<code>Vue.js</code></p>\n<ul>\n<li>彻底的组件化开发能力：提高代码复用性</li>\n<li>完整的 <code>Vue.js</code> 开发体验</li>\n<li>方便的 <code>Vuex</code> 数据管理方案：方便构建复杂应用</li>\n<li>快捷的 <code>webpack</code> 构建机制：自定义构建策略、开发阶段 hotReload</li>\n<li>支持使用 npm 外部依赖</li>\n<li>H5 代码转换编译成小程序目标代码的能力</li>\n</ul>\n<h2 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h2><p>有趣的是 <a href=\"http://mpvue.com/mpvue/#_5\" target=\"_blank\" rel=\"noopener\">mpvue</a> 框架的生命周期是融合了<code>vue</code>和<code>小程序</code>的生命周期，重新组合的一套兼容 <a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/\" target=\"_blank\" rel=\"noopener\">mini-app</a>的一套完整生命周期</p>\n<p><strong> 注意点 </strong></p>\n<ol>\n<li>在小程序的 onReady 后，才会去出发 mounted 的生命周期</li>\n<li>如果每次进入页面都要重新请求数据，建议使用 onShow 来请求数据，但是用户体验不太好, 如果只需要在第一次进入页面时请求数据，随后的数据都不改变，应该使用 mounted，不必要频繁的去请求接口、刷新页面。 3.官方文档上建议使用 Vue 的生命周期函数</li>\n<li>小程序的 <code>onPullDownRefresh</code> 能够检测到页面下拉动作，可以用来实现上拉刷新的操作， 需要搭配 <code>stopPullDownRefresh</code> 来使用</li>\n<li><code>onReachBottom</code> 页面上拉触底事件的处理函数，</li>\n</ol>\n<h3 id=\"小程序实现下拉刷新的操作\"><a href=\"#小程序实现下拉刷新的操作\" class=\"headerlink\" title=\"小程序实现下拉刷新的操作\"></a>小程序实现下拉刷新的操作</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> onPullDownRefresh() &#123;</span><br><span class=\"line\">    wx.showLoading();</span><br><span class=\"line\">    ....</span><br><span class=\"line\">    <span class=\"comment\">// 相应的上拉事件处理函数　</span></span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      wx.hideLoading();</span><br><span class=\"line\">      wx.stopPullDownRefresh();</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n<h4 id=\"页面触底之后的上拉操作\"><a href=\"#页面触底之后的上拉操作\" class=\"headerlink\" title=\"页面触底之后的上拉操作\"></a>页面触底之后的上拉操作</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> onReachBottom() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 首屏时只展示部分数据，未展示所有的数据</span></span><br><span class=\"line\">    <span class=\"comment\">// 判断当前的数据量是不是后台接口返回的总数据量</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.List.length &lt; <span class=\"keyword\">this</span>.total) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 数据没有完全被加载，上拉一次再次加载一次数据</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.pageData.page = <span class=\"keyword\">this</span>.pageData.page + <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> List = <span class=\"keyword\">this</span>.List;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> data = <span class=\"keyword\">await</span> fetchExpertsDetail(<span class=\"keyword\">this</span>.pageData);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.List = [...answerList, ...data.answer]; <span class=\"comment\">// 合并新请求的数据和老的数据</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果全加载了，给个提示</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'到底啦'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n<h4 id=\"小程序的路由跳转\"><a href=\"#小程序的路由跳转\" class=\"headerlink\" title=\"小程序的路由跳转\"></a>小程序的路由跳转</h4><blockquote>\n<p>要注意跳转到非 tabBar 页和 跳转到 tabBar 导航页</p>\n</blockquote>\n<ol>\n<li>跳转到到导航页： wx.switchTab(Object object) 跳转到 tabBar 页面，并关闭其他所有非 tabBar 页面</li>\n<li>跳转到非导航页： wx.navigateTo(Object object) 保留当前页面，跳转到应用内的某个页面，使用 wx.navigateBack 可以返回到原跳转的页面，原页面没有被销毁。</li>\n<li>wx.redirectTo(Object object) 关闭当前页面，跳转到应用内的某个页面。但是不允许跳转到 tabbar 页面。</li>\n</ol>\n<blockquote>\n<p>跳转的 query 参数<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;微信小程序的页面的 <code>query</code> 参数是通过 <code>onLoad</code> 获取的，<code>mpvue</code> 进行了优化，直接通过 <code>this.$root.$mp.query</code> 获取相应的参数数据，其调用需要在 <code>onLoad</code> 生命周期触发之后使用</p>\n</blockquote>\n<h4 id=\"mpvue-暂时不能使用的语法\"><a href=\"#mpvue-暂时不能使用的语法\" class=\"headerlink\" title=\"mpvue 暂时不能使用的语法\"></a>mpvue 暂时不能使用的语法</h4><ol>\n<li>不支持 <code>纯-HTML</code> ，小程序不支持所有的 DOM 和/BOM 操作，<code>v-html</code> 的语法是不能用的</li>\n<li>尽量不要在代码的双花括号中处理数据，例如：三元判断，字符处理等等的，<code>compouted</code> 是更好的选择</li>\n<li>在列表循环渲染时： 一定要牢记，千万不要在嵌套的 for 循环中使用相同的 index</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ul v-<span class=\"keyword\">for</span>=<span class=\"string\">\"(card, index) in list\"</span>&gt;</span><br><span class=\"line\">        &lt;li v-<span class=\"keyword\">for</span>=<span class=\"string\">\"(item, itemIndex) in card\"</span>&gt;</span><br><span class=\"line\">            &#123;&#123;item.value&#125;&#125;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/u</span>l&gt;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>事件修饰符： <code>.stop</code> 能处理一些预料之外的情况</li>\n<li>不支持在组件引用时，在组件上定义原生的事件（click），并且 class 和 style 等样式属性也不会生效，解决样式的问题： 写在内部顶级元素上，不要使用 scoped 来限制，可以加一个顶级 class 来防止 class 样式外泄</li>\n</ol>\n<h4 id=\"小程序表单和-video\"><a href=\"#小程序表单和-video\" class=\"headerlink\" title=\"小程序表单和 video\"></a>小程序表单和 video</h4><blockquote>\n<p>小程序的坑： textarea 和 video 当被激活时他们的层级永远是最高的，无法去处理<br>textarea 的处理方法： 当需要在 <code>textarea</code> 的上方加上一个弹窗活着页面时，需要手动的把 <code>textarea</code> 隐藏，换一种方法来实现<br>video 暂时还不知道怎么处理，同时还要注意视频的播放问题，在离开页面的时候要强制的关闭视频</p>\n</blockquote>\n<h3 id=\"小程序的登陆逻辑\"><a href=\"#小程序的登陆逻辑\" class=\"headerlink\" title=\"小程序的登陆逻辑\"></a>小程序的登陆逻辑</h3><blockquote>\n<p>现如今的小程序已经不在支持强制登陆，而是需要用户点击登陆按钮之后才能获取登陆权限，为了防止每次登陆的时候都会弹出一个默认的弹出框，仅仅是在首次登陆的时候弹出授权框，提升用户体验。</p>\n</blockquote>\n<p><strong> 暂时的实现逻辑： </strong></p>\n<ul>\n<li>首次登陆： 去拿用户的 <code>code</code> 之后，发送 <code>code</code> 给后台换取 <code>session_key、unionid</code>, <code>openid，</code> 这个请求的过程一般是在打开登陆界面的时候已经调用了（此时已经取得了 <code>session_key</code>），当用户点击登陆的时候才会去调取登陆接口，拿获得 <code>session</code> 去换取用户信息。<br>此时还拿到了 <code>token</code>，用于用户以后的登陆，作为登陆的另外一个依据</li>\n<li>二次登陆： 静默登陆，拿第一次返回的数据进行登陆，不再使微信打开获取登陆权限的弹窗</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// HTML</span></span><br><span class=\"line\"> &lt;button <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"center-flex btn wx-btn\"</span> hover-<span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"opacity\"</span> type=<span class=\"string\">\"primary\"</span> open-type=<span class=\"string\">\"getPhoneNumber\"</span> @getphonenumber=<span class=\"string\">\"getphonenumber\"</span>&gt;</span><br><span class=\"line\">      &lt;img src=<span class=\"string\">\"/static/images/wechat.png\"</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"wx-icon\"</span>&gt;</span><br><span class=\"line\">      &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"wx-text\"</span>&gt;微信手机号登陆&lt;<span class=\"regexp\">/div&gt;  为了获取权限</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>button&gt;</span><br><span class=\"line\">  &lt;button @click=<span class=\"string\">\"toBind\"</span> hover-<span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"opacity\"</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"center-flex btn phone-btn\"</span>&gt;手机验证码登陆&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">  /</span><span class=\"regexp\">/ js</span></span><br><span class=\"line\"><span class=\"regexp\">  import &#123; login, phoneLogin &#125; from '@/u</span>tils/login<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">  import &#123; redirectBack, getCurrentOptions &#125; from '</span>@/utils<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">  import authority from '</span>@/utils/authority<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">  export default &#123;</span></span><br><span class=\"line\"><span class=\"string\">    methods: &#123;</span></span><br><span class=\"line\"><span class=\"string\">      login() &#123;</span></span><br><span class=\"line\"><span class=\"string\">        authority.clear() //登陆前清除用户信息</span></span><br><span class=\"line\"><span class=\"string\">        login()</span></span><br><span class=\"line\"><span class=\"string\">      &#125;,</span></span><br><span class=\"line\"><span class=\"string\">      toBind() &#123;</span></span><br><span class=\"line\"><span class=\"string\">        const &#123; back &#125; = getCurrentOptions()  // 手动输入手机号 跳转到另一个登陆页面</span></span><br><span class=\"line\"><span class=\"string\">        wx.navigateTo(&#123;</span></span><br><span class=\"line\"><span class=\"string\">          url: `/pages/bind/main?back=$&#123;back&#125;`</span></span><br><span class=\"line\"><span class=\"string\">        &#125;)</span></span><br><span class=\"line\"><span class=\"string\">      &#125;,</span></span><br><span class=\"line\"><span class=\"string\">      getphonenumber(e) &#123;</span></span><br><span class=\"line\"><span class=\"string\">        const &#123; encryptedData, iv &#125; = e.target  // 判断是否包含特殊的数据，通俗来说用户是否同意了登陆权限</span></span><br><span class=\"line\"><span class=\"string\">        if (!encryptedData) &#123;</span></span><br><span class=\"line\"><span class=\"string\">          return this.toBind()</span></span><br><span class=\"line\"><span class=\"string\">        &#125; else &#123;</span></span><br><span class=\"line\"><span class=\"string\">          phoneLogin(&#123;</span></span><br><span class=\"line\"><span class=\"string\">            encrypted_data: encryptedData,</span></span><br><span class=\"line\"><span class=\"string\">            iv</span></span><br><span class=\"line\"><span class=\"string\">          &#125;).then(() =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"string\">            wx.showToast(&#123;</span></span><br><span class=\"line\"><span class=\"string\">              title: '</span>登陆成功<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">            &#125;)</span></span><br><span class=\"line\"><span class=\"string\">            redirectBack()  // 返回前一个需要登陆的页面</span></span><br><span class=\"line\"><span class=\"string\">          &#125;).catch((e) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"string\">            console.error(e)</span></span><br><span class=\"line\"><span class=\"string\">            this.toBind()</span></span><br><span class=\"line\"><span class=\"string\">          &#125;)</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">      &#125;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;,</span></span><br><span class=\"line\"><span class=\"string\">    onShow() &#123;</span></span><br><span class=\"line\"><span class=\"string\">      this.login()</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br></pre></td></tr></table></figure>"},{"title":"全局挂载公用组件","date":"2019-04-10T16:00:00.000Z","_content":"\n实例： `nuxt` 挂载全局公共组件\n\n<!-- more -->\n\n## 自己需要知道自定义组件的一些细节\n\n#### `data` 必须是一个函数\n\n```js\ndata () {\n  return {\n    ......\n  }\n}\n```\n\n> 一个组件的 `data` 选项必须是一个函数，因此每个实例可以维护一份被返回对象的独立的拷贝，相互之间不会因为组件的复用而影响到其他的实例\n\n#### 全局注册和局部注册\n\n```js\n// 注册组件，传入一个扩展过的构造器\nVue.component(\n  'myComponent',\n  Vue.extend({\n    /* ... */\n  })\n)\n\n// 注册组件，传入一个选项对象 (自动调用 Vue.extend)\nVue.component('my-component', {\n  /* ... */\n})\n```\n\n#### Vue.extend(options)\n\n使用基础 Vue 构造器，创建一个“子类”\n\n#### Vue.nextTick(cb)\n\n在下次 `DOM` 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 `DOM`\n\n```js\nVue.nextTick(() => {...})\n\n// promise\n\nVue.nextTick().then(() => {...})\n```\n\n## 判断是否是服务端还是客户端\n\n`Node` 和浏览器之间存在许多微小的环境差异，全局化组件需要注册在 `window` 上，如果在 `Node` 中，由于 `window` 不存在，程序会报错，可以使用下面两种方法避免在服务端使用 `window`\n\n### `void 0` 和 `undefined` 、 `null`\n >  `undefined` 表示未定义, 一般我们可以用全局变量 `undefined` (就是名为 `undefined` 的这个变量) 来表示这个值\n   > 但是 JS 中 `undefined` 只是一个变量，并不是一个关键字，可以被篡改\n> 解决方法： `void` 可以把任何一个表达式变成 `undefined` ，一般使用 `void 0` 来获取 `undefined`值\n- `typeof window === void 0`\n> `null` 是 JS 中的关键字，可以使用 `null` 变量来获取 `null` 的值\n\n> 使用 `typeof` 对 `window` 进行判断，即使 `window` 不存在， 也不会报错，只会返回 `undefined`\n> 使用 `typeof` 判断 `window` 是否存在，如果 返回的值是 `undefined，` 则不会继续后续对 `window` 的操作和注册全局的组件\n\n- `process.browser`\n  > 在浏览器中它返回 true，而在 Node 中它返回 false， 也可以用来判断是服务端还是客户端\n\n## 全局化挂载组件\n\n- 首先完成一个简单的组件\n\n```html\n<!-- SuccessBox.vue -->\n<template>\n  <div class=\"success-wrapper center-flex\" @click=\"close\" v-if=\"visible\">\n    <div class=\"success-container\" @click.stop>\n      <div class=\"bg-container\">\n        <img src=\"../assets/success_icon.png\" alt=\"\" class=\"bg-img\" />\n      </div>\n      <div class=\"success-header\">\n        {{data.header}}\n      </div>\n      <div class=\"success-detail\" v-for=\"(item, key) in data.detail\" :key=\"key\">\n        {{item}}\n      </div>\n      <div class=\"success-tip\" v-if=\"data.tip\">\n        {{data.tip}}\n      </div>\n      <div class=\"success-button\" @click.stop=\"close\">\n        确认\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\n  export default {\n    name: 'SuccessBox',\n    props: {},\n    data() {\n      return {\n        visible: true,\n        data: {\n          header: '购买成功',\n          detail: ['购买成功!', '请在门店支付订单后进行兑换！'],\n          tip: ''\n        }\n      }\n    },\n    methods: {\n      close() {\n        this.visible = false\n      }\n    }\n  }\n</script>\n```\n\n- 挂在到全局对象 `window` 上\n\n```js\n// utils/SuccessBox.js\n\nimport Vue from 'vue'\nconst SuccessBox = Vue.extend(require('@/common/successBox.vue').default)\n\nlet instance\n\nexport default {\n  show: (data = {}, callback) => {\n    if (typeof document === 'undefined') return // 服务端渲染\n    // 挂载到全局对象上\n    if (!instance) {\n      instance = new SuccessBox({\n        el: document.createElement('div')\n      })\n      document.body.appendChild(instance.$el)\n    }\n    if (callback) instance.callback = callback\n    instance.data = { ...instance.data, ...data }\n    Vue.nextTick(() => {\n      instance.visible = true\n    })\n  }\n}\n```\n\n- 挂载到全局\n\n```js\n//  nuxt.config.js\n  plugins: [\n    { src: '~plugins/vue-awesome-swiper.js', ssr: false }, // swiper\n    '~plugins/$SuccessBox.js'\n  ],\n```\n","source":"_posts/2019-04-11全局挂载公用组件.md","raw":"---\ntitle: '全局挂载公用组件'\ndate: 2019-04-11\ncategories: nuxt # 分类只能有1个\ntags:\n  - nuxt\n  - 公共组件\n---\n\n实例： `nuxt` 挂载全局公共组件\n\n<!-- more -->\n\n## 自己需要知道自定义组件的一些细节\n\n#### `data` 必须是一个函数\n\n```js\ndata () {\n  return {\n    ......\n  }\n}\n```\n\n> 一个组件的 `data` 选项必须是一个函数，因此每个实例可以维护一份被返回对象的独立的拷贝，相互之间不会因为组件的复用而影响到其他的实例\n\n#### 全局注册和局部注册\n\n```js\n// 注册组件，传入一个扩展过的构造器\nVue.component(\n  'myComponent',\n  Vue.extend({\n    /* ... */\n  })\n)\n\n// 注册组件，传入一个选项对象 (自动调用 Vue.extend)\nVue.component('my-component', {\n  /* ... */\n})\n```\n\n#### Vue.extend(options)\n\n使用基础 Vue 构造器，创建一个“子类”\n\n#### Vue.nextTick(cb)\n\n在下次 `DOM` 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 `DOM`\n\n```js\nVue.nextTick(() => {...})\n\n// promise\n\nVue.nextTick().then(() => {...})\n```\n\n## 判断是否是服务端还是客户端\n\n`Node` 和浏览器之间存在许多微小的环境差异，全局化组件需要注册在 `window` 上，如果在 `Node` 中，由于 `window` 不存在，程序会报错，可以使用下面两种方法避免在服务端使用 `window`\n\n### `void 0` 和 `undefined` 、 `null`\n >  `undefined` 表示未定义, 一般我们可以用全局变量 `undefined` (就是名为 `undefined` 的这个变量) 来表示这个值\n   > 但是 JS 中 `undefined` 只是一个变量，并不是一个关键字，可以被篡改\n> 解决方法： `void` 可以把任何一个表达式变成 `undefined` ，一般使用 `void 0` 来获取 `undefined`值\n- `typeof window === void 0`\n> `null` 是 JS 中的关键字，可以使用 `null` 变量来获取 `null` 的值\n\n> 使用 `typeof` 对 `window` 进行判断，即使 `window` 不存在， 也不会报错，只会返回 `undefined`\n> 使用 `typeof` 判断 `window` 是否存在，如果 返回的值是 `undefined，` 则不会继续后续对 `window` 的操作和注册全局的组件\n\n- `process.browser`\n  > 在浏览器中它返回 true，而在 Node 中它返回 false， 也可以用来判断是服务端还是客户端\n\n## 全局化挂载组件\n\n- 首先完成一个简单的组件\n\n```html\n<!-- SuccessBox.vue -->\n<template>\n  <div class=\"success-wrapper center-flex\" @click=\"close\" v-if=\"visible\">\n    <div class=\"success-container\" @click.stop>\n      <div class=\"bg-container\">\n        <img src=\"../assets/success_icon.png\" alt=\"\" class=\"bg-img\" />\n      </div>\n      <div class=\"success-header\">\n        {{data.header}}\n      </div>\n      <div class=\"success-detail\" v-for=\"(item, key) in data.detail\" :key=\"key\">\n        {{item}}\n      </div>\n      <div class=\"success-tip\" v-if=\"data.tip\">\n        {{data.tip}}\n      </div>\n      <div class=\"success-button\" @click.stop=\"close\">\n        确认\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\n  export default {\n    name: 'SuccessBox',\n    props: {},\n    data() {\n      return {\n        visible: true,\n        data: {\n          header: '购买成功',\n          detail: ['购买成功!', '请在门店支付订单后进行兑换！'],\n          tip: ''\n        }\n      }\n    },\n    methods: {\n      close() {\n        this.visible = false\n      }\n    }\n  }\n</script>\n```\n\n- 挂在到全局对象 `window` 上\n\n```js\n// utils/SuccessBox.js\n\nimport Vue from 'vue'\nconst SuccessBox = Vue.extend(require('@/common/successBox.vue').default)\n\nlet instance\n\nexport default {\n  show: (data = {}, callback) => {\n    if (typeof document === 'undefined') return // 服务端渲染\n    // 挂载到全局对象上\n    if (!instance) {\n      instance = new SuccessBox({\n        el: document.createElement('div')\n      })\n      document.body.appendChild(instance.$el)\n    }\n    if (callback) instance.callback = callback\n    instance.data = { ...instance.data, ...data }\n    Vue.nextTick(() => {\n      instance.visible = true\n    })\n  }\n}\n```\n\n- 挂载到全局\n\n```js\n//  nuxt.config.js\n  plugins: [\n    { src: '~plugins/vue-awesome-swiper.js', ssr: false }, // swiper\n    '~plugins/$SuccessBox.js'\n  ],\n```\n","slug":"2019-04-11全局挂载公用组件","published":1,"updated":"2019-04-25T01:35:32.849Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvbyxkhx000yw0oorzvp3ncf","content":"<p>实例： <code>nuxt</code> 挂载全局公共组件</p>\n<a id=\"more\"></a>\n<h2 id=\"自己需要知道自定义组件的一些细节\"><a href=\"#自己需要知道自定义组件的一些细节\" class=\"headerlink\" title=\"自己需要知道自定义组件的一些细节\"></a>自己需要知道自定义组件的一些细节</h2><h4 id=\"data-必须是一个函数\"><a href=\"#data-必须是一个函数\" class=\"headerlink\" title=\"data 必须是一个函数\"></a><code>data</code> 必须是一个函数</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data () &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>一个组件的 <code>data</code> 选项必须是一个函数，因此每个实例可以维护一份被返回对象的独立的拷贝，相互之间不会因为组件的复用而影响到其他的实例</p>\n</blockquote>\n<h4 id=\"全局注册和局部注册\"><a href=\"#全局注册和局部注册\" class=\"headerlink\" title=\"全局注册和局部注册\"></a>全局注册和局部注册</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 注册组件，传入一个扩展过的构造器</span></span><br><span class=\"line\">Vue.component(</span><br><span class=\"line\">  <span class=\"string\">'myComponent'</span>,</span><br><span class=\"line\">  Vue.extend(&#123;</span><br><span class=\"line\">    <span class=\"comment\">/* ... */</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注册组件，传入一个选项对象 (自动调用 Vue.extend)</span></span><br><span class=\"line\">Vue.component(<span class=\"string\">'my-component'</span>, &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* ... */</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"Vue-extend-options\"><a href=\"#Vue-extend-options\" class=\"headerlink\" title=\"Vue.extend(options)\"></a>Vue.extend(options)</h4><p>使用基础 Vue 构造器，创建一个“子类”</p>\n<h4 id=\"Vue-nextTick-cb\"><a href=\"#Vue-nextTick-cb\" class=\"headerlink\" title=\"Vue.nextTick(cb)\"></a>Vue.nextTick(cb)</h4><p>在下次 <code>DOM</code> 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 <code>DOM</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;...&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// promise</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.nextTick().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;...&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"判断是否是服务端还是客户端\"><a href=\"#判断是否是服务端还是客户端\" class=\"headerlink\" title=\"判断是否是服务端还是客户端\"></a>判断是否是服务端还是客户端</h2><p><code>Node</code> 和浏览器之间存在许多微小的环境差异，全局化组件需要注册在 <code>window</code> 上，如果在 <code>Node</code> 中，由于 <code>window</code> 不存在，程序会报错，可以使用下面两种方法避免在服务端使用 <code>window</code></p>\n<h3 id=\"void-0-和-undefined-、-null\"><a href=\"#void-0-和-undefined-、-null\" class=\"headerlink\" title=\"void 0 和 undefined 、 null\"></a><code>void 0</code> 和 <code>undefined</code> 、 <code>null</code></h3><blockquote>\n<p> <code>undefined</code> 表示未定义, 一般我们可以用全局变量 <code>undefined</code> (就是名为 <code>undefined</code> 的这个变量) 来表示这个值<br>但是 JS 中 <code>undefined</code> 只是一个变量，并不是一个关键字，可以被篡改<br>解决方法： <code>void</code> 可以把任何一个表达式变成 <code>undefined</code> ，一般使用 <code>void 0</code> 来获取 <code>undefined</code>值</p>\n<ul>\n<li><code>typeof window === void 0</code><br><code>null</code> 是 JS 中的关键字，可以使用 <code>null</code> 变量来获取 <code>null</code> 的值</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>使用 <code>typeof</code> 对 <code>window</code> 进行判断，即使 <code>window</code> 不存在， 也不会报错，只会返回 <code>undefined</code><br>使用 <code>typeof</code> 判断 <code>window</code> 是否存在，如果 返回的值是 <code>undefined，</code> 则不会继续后续对 <code>window</code> 的操作和注册全局的组件</p>\n</blockquote>\n<ul>\n<li><code>process.browser</code><blockquote>\n<p>在浏览器中它返回 true，而在 Node 中它返回 false， 也可以用来判断是服务端还是客户端</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"全局化挂载组件\"><a href=\"#全局化挂载组件\" class=\"headerlink\" title=\"全局化挂载组件\"></a>全局化挂载组件</h2><ul>\n<li>首先完成一个简单的组件</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- SuccessBox.vue --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"success-wrapper center-flex\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"close\"</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"visible\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"success-container\"</span> @<span class=\"attr\">click.stop</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bg-container\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../assets/success_icon.png\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bg-img\"</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"success-header\"</span>&gt;</span></span><br><span class=\"line\">        &#123;&#123;data.header&#125;&#125;</span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"success-detail\"</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(item, key) in data.detail\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"key\"</span>&gt;</span></span><br><span class=\"line\">        &#123;&#123;item&#125;&#125;</span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"success-tip\"</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"data.tip\"</span>&gt;</span></span><br><span class=\"line\">        &#123;&#123;data.tip&#125;&#125;</span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"success-button\"</span> @<span class=\"attr\">click.stop</span>=<span class=\"string\">\"close\"</span>&gt;</span></span><br><span class=\"line\">        确认</span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    name: <span class=\"string\">'SuccessBox'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">    props: &#123;&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    data() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        visible: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">        data: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          header: <span class=\"string\">'购买成功'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">          detail: [<span class=\"string\">'购买成功!'</span>, <span class=\"string\">'请在门店支付订单后进行兑换！'</span>],</span></span><br><span class=\"line\"><span class=\"javascript\">          tip: <span class=\"string\">''</span></span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    methods: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      close() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">this</span>.visible = <span class=\"literal\">false</span></span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>挂在到全局对象 <code>window</code> 上</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// utils/SuccessBox.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> SuccessBox = Vue.extend(<span class=\"built_in\">require</span>(<span class=\"string\">'@/common/successBox.vue'</span>).default)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> instance</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  show: <span class=\"function\">(<span class=\"params\">data = &#123;&#125;, callback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">document</span> === <span class=\"string\">'undefined'</span>) <span class=\"keyword\">return</span> <span class=\"comment\">// 服务端渲染</span></span><br><span class=\"line\">    <span class=\"comment\">// 挂载到全局对象上</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!instance) &#123;</span><br><span class=\"line\">      instance = <span class=\"keyword\">new</span> SuccessBox(&#123;</span><br><span class=\"line\">        el: <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      <span class=\"built_in\">document</span>.body.appendChild(instance.$el)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (callback) instance.callback = callback</span><br><span class=\"line\">    instance.data = &#123; ...instance.data, ...data &#125;</span><br><span class=\"line\">    Vue.nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      instance.visible = <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>挂载到全局</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//  nuxt.config.js</span></span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    &#123; <span class=\"attr\">src</span>: <span class=\"string\">'~plugins/vue-awesome-swiper.js'</span>, <span class=\"attr\">ssr</span>: <span class=\"literal\">false</span> &#125;, <span class=\"comment\">// swiper</span></span><br><span class=\"line\">    <span class=\"string\">'~plugins/$SuccessBox.js'</span></span><br><span class=\"line\">  ],</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>实例： <code>nuxt</code> 挂载全局公共组件</p>","more":"<h2 id=\"自己需要知道自定义组件的一些细节\"><a href=\"#自己需要知道自定义组件的一些细节\" class=\"headerlink\" title=\"自己需要知道自定义组件的一些细节\"></a>自己需要知道自定义组件的一些细节</h2><h4 id=\"data-必须是一个函数\"><a href=\"#data-必须是一个函数\" class=\"headerlink\" title=\"data 必须是一个函数\"></a><code>data</code> 必须是一个函数</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data () &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>一个组件的 <code>data</code> 选项必须是一个函数，因此每个实例可以维护一份被返回对象的独立的拷贝，相互之间不会因为组件的复用而影响到其他的实例</p>\n</blockquote>\n<h4 id=\"全局注册和局部注册\"><a href=\"#全局注册和局部注册\" class=\"headerlink\" title=\"全局注册和局部注册\"></a>全局注册和局部注册</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 注册组件，传入一个扩展过的构造器</span></span><br><span class=\"line\">Vue.component(</span><br><span class=\"line\">  <span class=\"string\">'myComponent'</span>,</span><br><span class=\"line\">  Vue.extend(&#123;</span><br><span class=\"line\">    <span class=\"comment\">/* ... */</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注册组件，传入一个选项对象 (自动调用 Vue.extend)</span></span><br><span class=\"line\">Vue.component(<span class=\"string\">'my-component'</span>, &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* ... */</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"Vue-extend-options\"><a href=\"#Vue-extend-options\" class=\"headerlink\" title=\"Vue.extend(options)\"></a>Vue.extend(options)</h4><p>使用基础 Vue 构造器，创建一个“子类”</p>\n<h4 id=\"Vue-nextTick-cb\"><a href=\"#Vue-nextTick-cb\" class=\"headerlink\" title=\"Vue.nextTick(cb)\"></a>Vue.nextTick(cb)</h4><p>在下次 <code>DOM</code> 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 <code>DOM</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;...&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// promise</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.nextTick().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;...&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"判断是否是服务端还是客户端\"><a href=\"#判断是否是服务端还是客户端\" class=\"headerlink\" title=\"判断是否是服务端还是客户端\"></a>判断是否是服务端还是客户端</h2><p><code>Node</code> 和浏览器之间存在许多微小的环境差异，全局化组件需要注册在 <code>window</code> 上，如果在 <code>Node</code> 中，由于 <code>window</code> 不存在，程序会报错，可以使用下面两种方法避免在服务端使用 <code>window</code></p>\n<h3 id=\"void-0-和-undefined-、-null\"><a href=\"#void-0-和-undefined-、-null\" class=\"headerlink\" title=\"void 0 和 undefined 、 null\"></a><code>void 0</code> 和 <code>undefined</code> 、 <code>null</code></h3><blockquote>\n<p> <code>undefined</code> 表示未定义, 一般我们可以用全局变量 <code>undefined</code> (就是名为 <code>undefined</code> 的这个变量) 来表示这个值<br>但是 JS 中 <code>undefined</code> 只是一个变量，并不是一个关键字，可以被篡改<br>解决方法： <code>void</code> 可以把任何一个表达式变成 <code>undefined</code> ，一般使用 <code>void 0</code> 来获取 <code>undefined</code>值</p>\n<ul>\n<li><code>typeof window === void 0</code><br><code>null</code> 是 JS 中的关键字，可以使用 <code>null</code> 变量来获取 <code>null</code> 的值</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>使用 <code>typeof</code> 对 <code>window</code> 进行判断，即使 <code>window</code> 不存在， 也不会报错，只会返回 <code>undefined</code><br>使用 <code>typeof</code> 判断 <code>window</code> 是否存在，如果 返回的值是 <code>undefined，</code> 则不会继续后续对 <code>window</code> 的操作和注册全局的组件</p>\n</blockquote>\n<ul>\n<li><code>process.browser</code><blockquote>\n<p>在浏览器中它返回 true，而在 Node 中它返回 false， 也可以用来判断是服务端还是客户端</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"全局化挂载组件\"><a href=\"#全局化挂载组件\" class=\"headerlink\" title=\"全局化挂载组件\"></a>全局化挂载组件</h2><ul>\n<li>首先完成一个简单的组件</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- SuccessBox.vue --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"success-wrapper center-flex\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"close\"</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"visible\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"success-container\"</span> @<span class=\"attr\">click.stop</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bg-container\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../assets/success_icon.png\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bg-img\"</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"success-header\"</span>&gt;</span></span><br><span class=\"line\">        &#123;&#123;data.header&#125;&#125;</span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"success-detail\"</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(item, key) in data.detail\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"key\"</span>&gt;</span></span><br><span class=\"line\">        &#123;&#123;item&#125;&#125;</span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"success-tip\"</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"data.tip\"</span>&gt;</span></span><br><span class=\"line\">        &#123;&#123;data.tip&#125;&#125;</span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"success-button\"</span> @<span class=\"attr\">click.stop</span>=<span class=\"string\">\"close\"</span>&gt;</span></span><br><span class=\"line\">        确认</span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    name: <span class=\"string\">'SuccessBox'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">    props: &#123;&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    data() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        visible: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">        data: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          header: <span class=\"string\">'购买成功'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">          detail: [<span class=\"string\">'购买成功!'</span>, <span class=\"string\">'请在门店支付订单后进行兑换！'</span>],</span></span><br><span class=\"line\"><span class=\"javascript\">          tip: <span class=\"string\">''</span></span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    methods: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      close() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">this</span>.visible = <span class=\"literal\">false</span></span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>挂在到全局对象 <code>window</code> 上</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// utils/SuccessBox.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> SuccessBox = Vue.extend(<span class=\"built_in\">require</span>(<span class=\"string\">'@/common/successBox.vue'</span>).default)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> instance</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  show: <span class=\"function\">(<span class=\"params\">data = &#123;&#125;, callback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">document</span> === <span class=\"string\">'undefined'</span>) <span class=\"keyword\">return</span> <span class=\"comment\">// 服务端渲染</span></span><br><span class=\"line\">    <span class=\"comment\">// 挂载到全局对象上</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!instance) &#123;</span><br><span class=\"line\">      instance = <span class=\"keyword\">new</span> SuccessBox(&#123;</span><br><span class=\"line\">        el: <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      <span class=\"built_in\">document</span>.body.appendChild(instance.$el)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (callback) instance.callback = callback</span><br><span class=\"line\">    instance.data = &#123; ...instance.data, ...data &#125;</span><br><span class=\"line\">    Vue.nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      instance.visible = <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>挂载到全局</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//  nuxt.config.js</span></span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    &#123; <span class=\"attr\">src</span>: <span class=\"string\">'~plugins/vue-awesome-swiper.js'</span>, <span class=\"attr\">ssr</span>: <span class=\"literal\">false</span> &#125;, <span class=\"comment\">// swiper</span></span><br><span class=\"line\">    <span class=\"string\">'~plugins/$SuccessBox.js'</span></span><br><span class=\"line\">  ],</span><br></pre></td></tr></table></figure>"},{"title":"`vue`模版文件动态插入 `script`的几种实现方法","date":"2019-04-07T16:00:00.000Z","_content":"\n`vue` 中模版文件动态插入 `script`的几种实现方法\n\n> 业务场景：在业务中需要使用其他项目中的功能和方法，由于版本迭代的原因，需要实时更新当前项目中的版本信息\n\n## 原生 JS 在 `public/index.html` 中动态插入 `script`\n\n```html\n<!-- 在入口文件 `index.html` 中插入一下内容 -->\n<script>\n  ;(function() {\n    var location = ....\n    var src =\n      document.location.protocol == 'http:'\n        ? `http:${location}`\n        : `https:${location}`\n    var hm = document.createElement('script')\n    hm.src = src\n    hm.id = 'BearCrm'\n    var s = document.getElementsByTagName('script')[0]\n    s.parentNode.insertBefore(hm, s)\n  })()\n</script>\n```\n\n## html-webpack-plugin 使用 `lodash template` 语法插入内容\n\n- `<%= VALUE %>` 用来做不转义插值；\n- `<%- VALUE %>` 用来做 HTML 转义插值；\n- `<% expression %>` 用来描述 JavaScript 流程控制。\n\n```js\n// index.html\n利于版本的迭代，其他关联项目中的版本迅速迭代\n<script src=\"https:...?<%= Date.now() %>\"></script>\n```\n","source":"_posts/2019-04-08-vue中模版文件动态插入HTML.md","raw":"---\ntitle: '`vue`模版文件动态插入 `script`的几种实现方法'\ndate: 2019-04-08\ncategories: 前端 # 分类只能有1个\ntags: # 标签可以有多个\n  - JavaScript\n  - 动态插入\n  - html-webpack-plugin\n---\n\n`vue` 中模版文件动态插入 `script`的几种实现方法\n\n> 业务场景：在业务中需要使用其他项目中的功能和方法，由于版本迭代的原因，需要实时更新当前项目中的版本信息\n\n## 原生 JS 在 `public/index.html` 中动态插入 `script`\n\n```html\n<!-- 在入口文件 `index.html` 中插入一下内容 -->\n<script>\n  ;(function() {\n    var location = ....\n    var src =\n      document.location.protocol == 'http:'\n        ? `http:${location}`\n        : `https:${location}`\n    var hm = document.createElement('script')\n    hm.src = src\n    hm.id = 'BearCrm'\n    var s = document.getElementsByTagName('script')[0]\n    s.parentNode.insertBefore(hm, s)\n  })()\n</script>\n```\n\n## html-webpack-plugin 使用 `lodash template` 语法插入内容\n\n- `<%= VALUE %>` 用来做不转义插值；\n- `<%- VALUE %>` 用来做 HTML 转义插值；\n- `<% expression %>` 用来描述 JavaScript 流程控制。\n\n```js\n// index.html\n利于版本的迭代，其他关联项目中的版本迅速迭代\n<script src=\"https:...?<%= Date.now() %>\"></script>\n```\n","slug":"2019-04-08-vue中模版文件动态插入HTML","published":1,"updated":"2019-05-05T09:31:19.422Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvbyxkhz0011w0oogbul2tm7","content":"<p><code>vue</code> 中模版文件动态插入 <code>script</code>的几种实现方法</p>\n<blockquote>\n<p>业务场景：在业务中需要使用其他项目中的功能和方法，由于版本迭代的原因，需要实时更新当前项目中的版本信息</p>\n</blockquote>\n<h2 id=\"原生-JS-在-public-index-html-中动态插入-script\"><a href=\"#原生-JS-在-public-index-html-中动态插入-script\" class=\"headerlink\" title=\"原生 JS 在 public/index.html 中动态插入 script\"></a>原生 JS 在 <code>public/index.html</code> 中动态插入 <code>script</code></h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 在入口文件 `index.html` 中插入一下内容 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  ;(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> location = ....</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> src =</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">document</span>.location.protocol == <span class=\"string\">'http:'</span></span></span><br><span class=\"line\"><span class=\"javascript\">        ? <span class=\"string\">`http:<span class=\"subst\">$&#123;location&#125;</span>`</span></span></span><br><span class=\"line\"><span class=\"javascript\">        : <span class=\"string\">`https:<span class=\"subst\">$&#123;location&#125;</span>`</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> hm = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>)</span></span><br><span class=\"line\"><span class=\"undefined\">    hm.src = src</span></span><br><span class=\"line\"><span class=\"javascript\">    hm.id = <span class=\"string\">'BearCrm'</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> s = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'script'</span>)[<span class=\"number\">0</span>]</span></span><br><span class=\"line\"><span class=\"undefined\">    s.parentNode.insertBefore(hm, s)</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;)()</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"html-webpack-plugin-使用-lodash-template-语法插入内容\"><a href=\"#html-webpack-plugin-使用-lodash-template-语法插入内容\" class=\"headerlink\" title=\"html-webpack-plugin 使用 lodash template 语法插入内容\"></a>html-webpack-plugin 使用 <code>lodash template</code> 语法插入内容</h2><ul>\n<li><code>&lt;%= VALUE %&gt;</code> 用来做不转义插值；</li>\n<li><code>&lt;%- VALUE %&gt;</code> 用来做 HTML 转义插值；</li>\n<li><code>&lt;% expression %&gt;</code> 用来描述 JavaScript 流程控制。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.html</span></span><br><span class=\"line\">利于版本的迭代，其他关联项目中的版本迅速迭代</span><br><span class=\"line\">&lt;script src=<span class=\"string\">\"https:...?&lt;%= Date.now() %&gt;\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><code>vue</code> 中模版文件动态插入 <code>script</code>的几种实现方法</p>\n<blockquote>\n<p>业务场景：在业务中需要使用其他项目中的功能和方法，由于版本迭代的原因，需要实时更新当前项目中的版本信息</p>\n</blockquote>\n<h2 id=\"原生-JS-在-public-index-html-中动态插入-script\"><a href=\"#原生-JS-在-public-index-html-中动态插入-script\" class=\"headerlink\" title=\"原生 JS 在 public/index.html 中动态插入 script\"></a>原生 JS 在 <code>public/index.html</code> 中动态插入 <code>script</code></h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 在入口文件 `index.html` 中插入一下内容 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  ;(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> location = ....</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> src =</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">document</span>.location.protocol == <span class=\"string\">'http:'</span></span></span><br><span class=\"line\"><span class=\"javascript\">        ? <span class=\"string\">`http:<span class=\"subst\">$&#123;location&#125;</span>`</span></span></span><br><span class=\"line\"><span class=\"javascript\">        : <span class=\"string\">`https:<span class=\"subst\">$&#123;location&#125;</span>`</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> hm = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>)</span></span><br><span class=\"line\"><span class=\"undefined\">    hm.src = src</span></span><br><span class=\"line\"><span class=\"javascript\">    hm.id = <span class=\"string\">'BearCrm'</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> s = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'script'</span>)[<span class=\"number\">0</span>]</span></span><br><span class=\"line\"><span class=\"undefined\">    s.parentNode.insertBefore(hm, s)</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;)()</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"html-webpack-plugin-使用-lodash-template-语法插入内容\"><a href=\"#html-webpack-plugin-使用-lodash-template-语法插入内容\" class=\"headerlink\" title=\"html-webpack-plugin 使用 lodash template 语法插入内容\"></a>html-webpack-plugin 使用 <code>lodash template</code> 语法插入内容</h2><ul>\n<li><code>&lt;%= VALUE %&gt;</code> 用来做不转义插值；</li>\n<li><code>&lt;%- VALUE %&gt;</code> 用来做 HTML 转义插值；</li>\n<li><code>&lt;% expression %&gt;</code> 用来描述 JavaScript 流程控制。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.html</span></span><br><span class=\"line\">利于版本的迭代，其他关联项目中的版本迅速迭代</span><br><span class=\"line\">&lt;script src=<span class=\"string\">\"https:...?&lt;%= Date.now() %&gt;\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n"},{"title":"吸顶效果和防抖节流","date":"2019-04-08T16:00:00.000Z","_content":"\n总结的几种吸顶效果实现方案\n\n<!-- more -->\n\n## position:sticky\n\n简介 ： 粘性定位 sticky 相当于相对定位 relative 和固定定位 fixed 的结合；在页面元素滚动过程中，某个元素距离其父元素的距离达到 sticky 粘性定位的要求时；元素的相对定位 relative 效果变成固定定位 fixed 的效果。\n\n使用条件：\n\n- 父元素不能 overflow:hidden 或者 overflow:auto 属性\n- 必须指定 top、bottom、left、right 4 个值之一，否则只会处于相对定位\n- 父元素的高度不能低于 sticky 元素的高度\n- sticky 元素仅在其父元素内生效\n\n```html\n<template>\n  <div id=\"app\">\n    <div class=\"container\">\n      <div class=\"box\"></div>\n      <div class=\"header sticky\">使用 `position:sticky` 实现</div>\n      <div class=\"box_two\"></div>\n    </div>\n  </div>\n</template>\n<style>\n  .box {\n    width: 100%;\n    height: 2rem;\n    background: #333;\n  }\n  .box_two {\n    width: 100%;\n    height: 20rem;\n    background: -webkit-linear-gradient(\n      top,\n      #333333 20%,\n      #999999 40%,\n      #333333 80%\n    );\n  }\n  .header {\n    width: 100%;\n    height: 0.4rem;\n    text-align: center;\n    line-height: 0.4rem;\n    background: #999;\n    color: #fff;\n    font-size: 0.16rem;\n  }\n  .sticky {\n    position: -webkit-sticky;\n    position: sticky;\n    top: 0;\n  }\n</style>\n```\n\n##\n\n## 使用原生的 `offsetTop` 实现\n\n```html\n<template>\n  <div class=\"color_box\"></div>\n    <div class=\"title_box\" ref=\"pride_tab_fixed\">\n      <div class=\"title\" :class=\"titleFixed == true ? 'isFixed' :''\">\n        使用原生的 `offsetTop` 实现\n      </div>\n    </div>\n    <div class=\"color_box_two\"></div>\n  </div>\n</template>\n<script>\n  data() {\n    return {\n      titleFixed: '',\n      startTime: new Date()\n    }\n  },\n  mounted() {\n    this.init()\n  },\n  methods: {\n    init() {\n      window.addEventListener('scroll', this.throttle(this.handleScroll, 100))\n    },\n    throttle(fn, time = 300) {\n      if (typeof fn !== 'function') {\n        throw new Error('必须传入一个函数作为参数')\n      }\n      const currentTime = new Date()\n      if (currentTime - this.startTime > time) {\n        this.startTime = currentTime\n        fn()\n      }\n    },\n    handleScroll () {\n      let self = this\n      let scrollTop =\n        window.pageYOffset ||\n        document.documentElement.scrollTop ||\n        document.body.scrollTop\n      let offsetTop = self.getOffset(self.$refs.pride_tab_fixed)\n      self.titleFixed = scrollTop > offsetTop\n    },\n    getOffset(obj, direction) {\n      let offsetL = 0\n      let offsetT = 0\n      while (obj !== window.document.body && obj !== null) {\n        offsetL += obj.offsetLeft\n        offsetT += obj.offsetTop\n        obj = obj.offsetParent\n      }\n      if (direction === 'left') {\n        return offsetL\n      } else {\n        return offsetT\n      }\n    }\n  }\n</script>\n\n<style>\n  .isFixed {\n    position: fixed;\n    top: 0;\n    left: 0;\n    z-index: 99;\n  }\n</style>\n\n```\n\n### getBoundingClientRect().top 来实现\n\n```js\nhandleScroll () {\n    let self = this\n    let offsetTop = self.$refs.pride_tab_fixed.getBoundingClientRect().top\n    self.titleFixed = offsetTop < 0\n  },\n```\n\n## 防抖和节流\n\n> 防抖和节流的作用都是防止函数被多次调用。区别在于：假设一个用户一直触发这个函数，且每次触发函数的间隔小于设定时间，防抖的情况下只会调用一次，而节流的情况会每隔一定时间就调用一次该函数。\n\n- 放抖：\n  - 如果在频繁的事件回调中做复杂计算，很有可能导致页面卡顿\n  - 触发高频事件后 `n` 秒内函数 **只会执行一次** ，如果 `n` 秒内事件又再次被触发，则重新计算时间只有触发间隔超过制定间隔的任务才会执行\n  - 每次触发事件时都取消之前所设定的延时调用方法，确保函数只被出发一次\n  - 接受一个参数，可以取消等待，立即调用传入的函数\n  - 页面滚动，监听输入框内容\n\n```js\nfunction debounce(fn, wait = 50, immediate = true) {\n  let timer, context, args\n\n  if (typeof fn !== 'function') {\n    throw new Error('必须传入一个函数作为参数')\n  }\n\n  const later = () =>\n    setTimeout(() => {\n      timer = null\n      if (!immediate) {\n        fn.apply(context, args)\n      }\n    }, wait)\n\n  return function(...params) {\n    if (!timer) {\n      timer = later()\n      if (!immediate) {\n        // 没使用setTimeout, this的指向并没有改变\n        fn.apply(this.params)\n      } else {\n        context = this\n        args = params\n      }\n    } else {\n      // 清除后重新计时\n      clearTimeout(timer)\n      timer = later()\n    }\n  }\n}\n```\n\n- ## 节流：\n- 高频事件每 n 秒内都会执行一次，所以节流会稀释函数的执行频率，将多次执行变成每隔一段时间执行\n- 每次触发事件时都判断当前是否有等待执行的延时函数，两种实现方式，一种是使用时间戳，一种是设置定时器\n","source":"_posts/2019-04-09-吸顶效果和防抖节流.md","raw":"---\ntitle: '吸顶效果和防抖节流'\ndate: 2019-04-09\ncategories: 前端 # 分类只能有1个\ntags: # 标签可以有多个\n  - JavaScript\n  - css\n  - 工具类\n---\n\n总结的几种吸顶效果实现方案\n\n<!-- more -->\n\n## position:sticky\n\n简介 ： 粘性定位 sticky 相当于相对定位 relative 和固定定位 fixed 的结合；在页面元素滚动过程中，某个元素距离其父元素的距离达到 sticky 粘性定位的要求时；元素的相对定位 relative 效果变成固定定位 fixed 的效果。\n\n使用条件：\n\n- 父元素不能 overflow:hidden 或者 overflow:auto 属性\n- 必须指定 top、bottom、left、right 4 个值之一，否则只会处于相对定位\n- 父元素的高度不能低于 sticky 元素的高度\n- sticky 元素仅在其父元素内生效\n\n```html\n<template>\n  <div id=\"app\">\n    <div class=\"container\">\n      <div class=\"box\"></div>\n      <div class=\"header sticky\">使用 `position:sticky` 实现</div>\n      <div class=\"box_two\"></div>\n    </div>\n  </div>\n</template>\n<style>\n  .box {\n    width: 100%;\n    height: 2rem;\n    background: #333;\n  }\n  .box_two {\n    width: 100%;\n    height: 20rem;\n    background: -webkit-linear-gradient(\n      top,\n      #333333 20%,\n      #999999 40%,\n      #333333 80%\n    );\n  }\n  .header {\n    width: 100%;\n    height: 0.4rem;\n    text-align: center;\n    line-height: 0.4rem;\n    background: #999;\n    color: #fff;\n    font-size: 0.16rem;\n  }\n  .sticky {\n    position: -webkit-sticky;\n    position: sticky;\n    top: 0;\n  }\n</style>\n```\n\n##\n\n## 使用原生的 `offsetTop` 实现\n\n```html\n<template>\n  <div class=\"color_box\"></div>\n    <div class=\"title_box\" ref=\"pride_tab_fixed\">\n      <div class=\"title\" :class=\"titleFixed == true ? 'isFixed' :''\">\n        使用原生的 `offsetTop` 实现\n      </div>\n    </div>\n    <div class=\"color_box_two\"></div>\n  </div>\n</template>\n<script>\n  data() {\n    return {\n      titleFixed: '',\n      startTime: new Date()\n    }\n  },\n  mounted() {\n    this.init()\n  },\n  methods: {\n    init() {\n      window.addEventListener('scroll', this.throttle(this.handleScroll, 100))\n    },\n    throttle(fn, time = 300) {\n      if (typeof fn !== 'function') {\n        throw new Error('必须传入一个函数作为参数')\n      }\n      const currentTime = new Date()\n      if (currentTime - this.startTime > time) {\n        this.startTime = currentTime\n        fn()\n      }\n    },\n    handleScroll () {\n      let self = this\n      let scrollTop =\n        window.pageYOffset ||\n        document.documentElement.scrollTop ||\n        document.body.scrollTop\n      let offsetTop = self.getOffset(self.$refs.pride_tab_fixed)\n      self.titleFixed = scrollTop > offsetTop\n    },\n    getOffset(obj, direction) {\n      let offsetL = 0\n      let offsetT = 0\n      while (obj !== window.document.body && obj !== null) {\n        offsetL += obj.offsetLeft\n        offsetT += obj.offsetTop\n        obj = obj.offsetParent\n      }\n      if (direction === 'left') {\n        return offsetL\n      } else {\n        return offsetT\n      }\n    }\n  }\n</script>\n\n<style>\n  .isFixed {\n    position: fixed;\n    top: 0;\n    left: 0;\n    z-index: 99;\n  }\n</style>\n\n```\n\n### getBoundingClientRect().top 来实现\n\n```js\nhandleScroll () {\n    let self = this\n    let offsetTop = self.$refs.pride_tab_fixed.getBoundingClientRect().top\n    self.titleFixed = offsetTop < 0\n  },\n```\n\n## 防抖和节流\n\n> 防抖和节流的作用都是防止函数被多次调用。区别在于：假设一个用户一直触发这个函数，且每次触发函数的间隔小于设定时间，防抖的情况下只会调用一次，而节流的情况会每隔一定时间就调用一次该函数。\n\n- 放抖：\n  - 如果在频繁的事件回调中做复杂计算，很有可能导致页面卡顿\n  - 触发高频事件后 `n` 秒内函数 **只会执行一次** ，如果 `n` 秒内事件又再次被触发，则重新计算时间只有触发间隔超过制定间隔的任务才会执行\n  - 每次触发事件时都取消之前所设定的延时调用方法，确保函数只被出发一次\n  - 接受一个参数，可以取消等待，立即调用传入的函数\n  - 页面滚动，监听输入框内容\n\n```js\nfunction debounce(fn, wait = 50, immediate = true) {\n  let timer, context, args\n\n  if (typeof fn !== 'function') {\n    throw new Error('必须传入一个函数作为参数')\n  }\n\n  const later = () =>\n    setTimeout(() => {\n      timer = null\n      if (!immediate) {\n        fn.apply(context, args)\n      }\n    }, wait)\n\n  return function(...params) {\n    if (!timer) {\n      timer = later()\n      if (!immediate) {\n        // 没使用setTimeout, this的指向并没有改变\n        fn.apply(this.params)\n      } else {\n        context = this\n        args = params\n      }\n    } else {\n      // 清除后重新计时\n      clearTimeout(timer)\n      timer = later()\n    }\n  }\n}\n```\n\n- ## 节流：\n- 高频事件每 n 秒内都会执行一次，所以节流会稀释函数的执行频率，将多次执行变成每隔一段时间执行\n- 每次触发事件时都判断当前是否有等待执行的延时函数，两种实现方式，一种是使用时间戳，一种是设置定时器\n","slug":"2019-04-09-吸顶效果和防抖节流","published":1,"updated":"2019-05-05T11:08:10.680Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvbyxki00014w0ooacglb7z4","content":"<p>总结的几种吸顶效果实现方案</p>\n<a id=\"more\"></a>\n<h2 id=\"position-sticky\"><a href=\"#position-sticky\" class=\"headerlink\" title=\"position:sticky\"></a>position:sticky</h2><p>简介 ： 粘性定位 sticky 相当于相对定位 relative 和固定定位 fixed 的结合；在页面元素滚动过程中，某个元素距离其父元素的距离达到 sticky 粘性定位的要求时；元素的相对定位 relative 效果变成固定定位 fixed 的效果。</p>\n<p>使用条件：</p>\n<ul>\n<li>父元素不能 overflow:hidden 或者 overflow:auto 属性</li>\n<li>必须指定 top、bottom、left、right 4 个值之一，否则只会处于相对定位</li>\n<li>父元素的高度不能低于 sticky 元素的高度</li>\n<li>sticky 元素仅在其父元素内生效</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"header sticky\"</span>&gt;</span>使用 `position:sticky` 实现<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box_two\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.box</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    width: 100%;</span></span><br><span class=\"line\"><span class=\"undefined\">    height: 2rem;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#333</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.box_two</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    width: 100%;</span></span><br><span class=\"line\"><span class=\"undefined\">    height: 20rem;</span></span><br><span class=\"line\"><span class=\"undefined\">    background: -webkit-linear-gradient(</span></span><br><span class=\"line\"><span class=\"undefined\">      top,</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-id\">#333333</span> 20%,</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-id\">#999999</span> 40%,</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-id\">#333333</span> 80%</span></span><br><span class=\"line\"><span class=\"undefined\">    );</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.header</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    width: 100%;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">height</span>: 0<span class=\"selector-class\">.4rem</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">    text-align: center;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">line-height</span>: 0<span class=\"selector-class\">.4rem</span>;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#999</span>;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">color</span>: <span class=\"selector-id\">#fff</span>;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">font-size</span>: 0<span class=\"selector-class\">.16rem</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.sticky</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    position: -webkit-sticky;</span></span><br><span class=\"line\"><span class=\"undefined\">    position: sticky;</span></span><br><span class=\"line\"><span class=\"undefined\">    top: 0;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>##</p>\n<h2 id=\"使用原生的-offsetTop-实现\"><a href=\"#使用原生的-offsetTop-实现\" class=\"headerlink\" title=\"使用原生的 offsetTop 实现\"></a>使用原生的 <code>offsetTop</code> 实现</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"color_box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"title_box\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"pride_tab_fixed\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"title\"</span> <span class=\"attr\">:class</span>=<span class=\"string\">\"titleFixed == true ? 'isFixed' :''\"</span>&gt;</span></span><br><span class=\"line\">        使用原生的 `offsetTop` 实现</span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"color_box_two\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">  data() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      titleFixed: <span class=\"string\">''</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">      startTime: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">  mounted() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">this</span>.init()</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">  methods: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    init() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'scroll'</span>, <span class=\"keyword\">this</span>.throttle(<span class=\"keyword\">this</span>.handleScroll, <span class=\"number\">100</span>))</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    throttle(fn, time = 300) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> fn !== <span class=\"string\">'function'</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'必须传入一个函数作为参数'</span>)</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">const</span> currentTime = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">if</span> (currentTime - <span class=\"keyword\">this</span>.startTime &gt; time) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">this</span>.startTime = currentTime</span></span><br><span class=\"line\"><span class=\"undefined\">        fn()</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    handleScroll () &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">let</span> self = <span class=\"keyword\">this</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">let</span> scrollTop =</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">window</span>.pageYOffset ||</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">document</span>.documentElement.scrollTop ||</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">document</span>.body.scrollTop</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">let</span> offsetTop = self.getOffset(self.$refs.pride_tab_fixed)</span></span><br><span class=\"line\"><span class=\"undefined\">      self.titleFixed = scrollTop &gt; offsetTop</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    getOffset(obj, direction) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">let</span> offsetL = <span class=\"number\">0</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">let</span> offsetT = <span class=\"number\">0</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">while</span> (obj !== <span class=\"built_in\">window</span>.document.body &amp;&amp; obj !== <span class=\"literal\">null</span>) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        offsetL += obj.offsetLeft</span></span><br><span class=\"line\"><span class=\"undefined\">        offsetT += obj.offsetTop</span></span><br><span class=\"line\"><span class=\"undefined\">        obj = obj.offsetParent</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">if</span> (direction === <span class=\"string\">'left'</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">return</span> offsetL</span></span><br><span class=\"line\"><span class=\"javascript\">      &#125; <span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">return</span> offsetT</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.isFixed</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    position: fixed;</span></span><br><span class=\"line\"><span class=\"undefined\">    top: 0;</span></span><br><span class=\"line\"><span class=\"undefined\">    left: 0;</span></span><br><span class=\"line\"><span class=\"undefined\">    z-index: 99;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"getBoundingClientRect-top-来实现\"><a href=\"#getBoundingClientRect-top-来实现\" class=\"headerlink\" title=\"getBoundingClientRect().top 来实现\"></a>getBoundingClientRect().top 来实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">handleScroll () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> self = <span class=\"keyword\">this</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> offsetTop = self.$refs.pride_tab_fixed.getBoundingClientRect().top</span><br><span class=\"line\">    self.titleFixed = offsetTop &lt; <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n<h2 id=\"防抖和节流\"><a href=\"#防抖和节流\" class=\"headerlink\" title=\"防抖和节流\"></a>防抖和节流</h2><blockquote>\n<p>防抖和节流的作用都是防止函数被多次调用。区别在于：假设一个用户一直触发这个函数，且每次触发函数的间隔小于设定时间，防抖的情况下只会调用一次，而节流的情况会每隔一定时间就调用一次该函数。</p>\n</blockquote>\n<ul>\n<li>放抖：<ul>\n<li>如果在频繁的事件回调中做复杂计算，很有可能导致页面卡顿</li>\n<li>触发高频事件后 <code>n</code> 秒内函数 <strong>只会执行一次</strong> ，如果 <code>n</code> 秒内事件又再次被触发，则重新计算时间只有触发间隔超过制定间隔的任务才会执行</li>\n<li>每次触发事件时都取消之前所设定的延时调用方法，确保函数只被出发一次</li>\n<li>接受一个参数，可以取消等待，立即调用传入的函数</li>\n<li>页面滚动，监听输入框内容</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">fn, wait = <span class=\"number\">50</span>, immediate = true</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timer, context, args</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> fn !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'必须传入一个函数作为参数'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> later = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span></span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      timer = <span class=\"literal\">null</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!immediate) &#123;</span><br><span class=\"line\">        fn.apply(context, args)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;, wait)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">...params</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!timer) &#123;</span><br><span class=\"line\">      timer = later()</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!immediate) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 没使用setTimeout, this的指向并没有改变</span></span><br><span class=\"line\">        fn.apply(<span class=\"keyword\">this</span>.params)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        context = <span class=\"keyword\">this</span></span><br><span class=\"line\">        args = params</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 清除后重新计时</span></span><br><span class=\"line\">      clearTimeout(timer)</span><br><span class=\"line\">      timer = later()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h2 id=\"节流：\"><a href=\"#节流：\" class=\"headerlink\" title=\"节流：\"></a>节流：</h2></li>\n<li>高频事件每 n 秒内都会执行一次，所以节流会稀释函数的执行频率，将多次执行变成每隔一段时间执行</li>\n<li>每次触发事件时都判断当前是否有等待执行的延时函数，两种实现方式，一种是使用时间戳，一种是设置定时器</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>总结的几种吸顶效果实现方案</p>","more":"<h2 id=\"position-sticky\"><a href=\"#position-sticky\" class=\"headerlink\" title=\"position:sticky\"></a>position:sticky</h2><p>简介 ： 粘性定位 sticky 相当于相对定位 relative 和固定定位 fixed 的结合；在页面元素滚动过程中，某个元素距离其父元素的距离达到 sticky 粘性定位的要求时；元素的相对定位 relative 效果变成固定定位 fixed 的效果。</p>\n<p>使用条件：</p>\n<ul>\n<li>父元素不能 overflow:hidden 或者 overflow:auto 属性</li>\n<li>必须指定 top、bottom、left、right 4 个值之一，否则只会处于相对定位</li>\n<li>父元素的高度不能低于 sticky 元素的高度</li>\n<li>sticky 元素仅在其父元素内生效</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"header sticky\"</span>&gt;</span>使用 `position:sticky` 实现<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box_two\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.box</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    width: 100%;</span></span><br><span class=\"line\"><span class=\"undefined\">    height: 2rem;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#333</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.box_two</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    width: 100%;</span></span><br><span class=\"line\"><span class=\"undefined\">    height: 20rem;</span></span><br><span class=\"line\"><span class=\"undefined\">    background: -webkit-linear-gradient(</span></span><br><span class=\"line\"><span class=\"undefined\">      top,</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-id\">#333333</span> 20%,</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-id\">#999999</span> 40%,</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-id\">#333333</span> 80%</span></span><br><span class=\"line\"><span class=\"undefined\">    );</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.header</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    width: 100%;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">height</span>: 0<span class=\"selector-class\">.4rem</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">    text-align: center;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">line-height</span>: 0<span class=\"selector-class\">.4rem</span>;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#999</span>;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">color</span>: <span class=\"selector-id\">#fff</span>;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">font-size</span>: 0<span class=\"selector-class\">.16rem</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.sticky</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    position: -webkit-sticky;</span></span><br><span class=\"line\"><span class=\"undefined\">    position: sticky;</span></span><br><span class=\"line\"><span class=\"undefined\">    top: 0;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>##</p>\n<h2 id=\"使用原生的-offsetTop-实现\"><a href=\"#使用原生的-offsetTop-实现\" class=\"headerlink\" title=\"使用原生的 offsetTop 实现\"></a>使用原生的 <code>offsetTop</code> 实现</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"color_box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"title_box\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"pride_tab_fixed\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"title\"</span> <span class=\"attr\">:class</span>=<span class=\"string\">\"titleFixed == true ? 'isFixed' :''\"</span>&gt;</span></span><br><span class=\"line\">        使用原生的 `offsetTop` 实现</span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"color_box_two\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">  data() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      titleFixed: <span class=\"string\">''</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">      startTime: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">  mounted() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">this</span>.init()</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">  methods: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    init() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'scroll'</span>, <span class=\"keyword\">this</span>.throttle(<span class=\"keyword\">this</span>.handleScroll, <span class=\"number\">100</span>))</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    throttle(fn, time = 300) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> fn !== <span class=\"string\">'function'</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'必须传入一个函数作为参数'</span>)</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">const</span> currentTime = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">if</span> (currentTime - <span class=\"keyword\">this</span>.startTime &gt; time) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">this</span>.startTime = currentTime</span></span><br><span class=\"line\"><span class=\"undefined\">        fn()</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    handleScroll () &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">let</span> self = <span class=\"keyword\">this</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">let</span> scrollTop =</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">window</span>.pageYOffset ||</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">document</span>.documentElement.scrollTop ||</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">document</span>.body.scrollTop</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">let</span> offsetTop = self.getOffset(self.$refs.pride_tab_fixed)</span></span><br><span class=\"line\"><span class=\"undefined\">      self.titleFixed = scrollTop &gt; offsetTop</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    getOffset(obj, direction) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">let</span> offsetL = <span class=\"number\">0</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">let</span> offsetT = <span class=\"number\">0</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">while</span> (obj !== <span class=\"built_in\">window</span>.document.body &amp;&amp; obj !== <span class=\"literal\">null</span>) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        offsetL += obj.offsetLeft</span></span><br><span class=\"line\"><span class=\"undefined\">        offsetT += obj.offsetTop</span></span><br><span class=\"line\"><span class=\"undefined\">        obj = obj.offsetParent</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">if</span> (direction === <span class=\"string\">'left'</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">return</span> offsetL</span></span><br><span class=\"line\"><span class=\"javascript\">      &#125; <span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">return</span> offsetT</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.isFixed</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    position: fixed;</span></span><br><span class=\"line\"><span class=\"undefined\">    top: 0;</span></span><br><span class=\"line\"><span class=\"undefined\">    left: 0;</span></span><br><span class=\"line\"><span class=\"undefined\">    z-index: 99;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"getBoundingClientRect-top-来实现\"><a href=\"#getBoundingClientRect-top-来实现\" class=\"headerlink\" title=\"getBoundingClientRect().top 来实现\"></a>getBoundingClientRect().top 来实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">handleScroll () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> self = <span class=\"keyword\">this</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> offsetTop = self.$refs.pride_tab_fixed.getBoundingClientRect().top</span><br><span class=\"line\">    self.titleFixed = offsetTop &lt; <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n<h2 id=\"防抖和节流\"><a href=\"#防抖和节流\" class=\"headerlink\" title=\"防抖和节流\"></a>防抖和节流</h2><blockquote>\n<p>防抖和节流的作用都是防止函数被多次调用。区别在于：假设一个用户一直触发这个函数，且每次触发函数的间隔小于设定时间，防抖的情况下只会调用一次，而节流的情况会每隔一定时间就调用一次该函数。</p>\n</blockquote>\n<ul>\n<li>放抖：<ul>\n<li>如果在频繁的事件回调中做复杂计算，很有可能导致页面卡顿</li>\n<li>触发高频事件后 <code>n</code> 秒内函数 <strong>只会执行一次</strong> ，如果 <code>n</code> 秒内事件又再次被触发，则重新计算时间只有触发间隔超过制定间隔的任务才会执行</li>\n<li>每次触发事件时都取消之前所设定的延时调用方法，确保函数只被出发一次</li>\n<li>接受一个参数，可以取消等待，立即调用传入的函数</li>\n<li>页面滚动，监听输入框内容</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">fn, wait = <span class=\"number\">50</span>, immediate = true</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timer, context, args</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> fn !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'必须传入一个函数作为参数'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> later = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span></span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      timer = <span class=\"literal\">null</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!immediate) &#123;</span><br><span class=\"line\">        fn.apply(context, args)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;, wait)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">...params</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!timer) &#123;</span><br><span class=\"line\">      timer = later()</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!immediate) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 没使用setTimeout, this的指向并没有改变</span></span><br><span class=\"line\">        fn.apply(<span class=\"keyword\">this</span>.params)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        context = <span class=\"keyword\">this</span></span><br><span class=\"line\">        args = params</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 清除后重新计时</span></span><br><span class=\"line\">      clearTimeout(timer)</span><br><span class=\"line\">      timer = later()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h2 id=\"节流：\"><a href=\"#节流：\" class=\"headerlink\" title=\"节流：\"></a>节流：</h2></li>\n<li>高频事件每 n 秒内都会执行一次，所以节流会稀释函数的执行频率，将多次执行变成每隔一段时间执行</li>\n<li>每次触发事件时都判断当前是否有等待执行的延时函数，两种实现方式，一种是使用时间戳，一种是设置定时器</li>\n</ul>"},{"layout":"post","title":"JavaScript - 常用数组操作方法","date":"2018-09-27T16:00:00.000Z","description":"JavaScript常用数组操作方法，包含ES6方法","_content":"\n# ES6\n\n## Array.of()\n\n用于将一组值，转换为数组。这个方法的主要目的，是弥补数组构造函数 Array() 的不足。因为参数个数的不同，会导致 Array() 的行为有差异。\n\n```javascript\nArray(3) //[,,,]\nArray.of(3) //[3]\nArray(1, 2, 3) //[1,2,3]\nArray.of(1, 2, 3) //[1,2,3] 多于2个参数，组成新数组\n```\n\n### includes()\n\n判断数组中是否存在该元素，参数：查找的值、起始位置，可以替换 ES5 时代的 indexOf 判断方式。indexOf 判断元素是否为 NaN，会判断错误。\n\n```\n[1, 2, 3].includes(2) // true\n[1, 2, 3].includes(4) // false\n[1, 2, NaN].includes(NaN) // true\n[1, 2, 3].includes(3, 3) // false\n[1, 2, 3].includes(3, -1) // true\n[NaN].includes(NaN) //true\n```\n\n### Array.from()\n\n用于将两类对象转为真正的数组：类似数组的对象（array-like object）和可遍历（iterable）的对象（包括 ES6 新增的数据结构 Set 和 Map）。\n\n```javascript\nArray.from('foo') //['f','o','o']\n```\n\n### find() findIndex()\n\n`find`方法用于找出第一个符合条件的数组成员。它的参数是一个回调函数，所有数组成员依次执行该回调函数，直到找出第一个返回值为`true`的成员，然后返回该成员。如果没有符合条件的成员，则返回 undefined。\n\n```\n[1, 4, -5, 10].find(n => n < 0) // 返回第一个满足条件的成员\n// -5\n```\n\n`findIndex`方法的用法与 find 方法非常类似，返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回-1\n\n```\n[1, 5, 10, 15].findIndex(function(value, index, arr) {\n  return value > 9\n}) // 2\n```\n\n这两个方法都可以接受第二个参数，用来绑定回调函数的 this 对象。\n\n```javascript\nfunction f(v) {\n  return v > this.age\n}\nlet person = { name: 'John', age: 20 }\n;[10, 12, 26, 15].find(f, person) // 26\n```\n\n上面的代码中，find 函数接收了第二个参数 person 对象，回调函数中的 this 对象指向 person 对象。\n另外，这两个方法都可以发现 `NaN`，弥补了数组的 `indexOf` 方法的不足。\n\n```javascript\nconst arr = [NAN]\narr.indexOf(NaN)\n// -1\narr.findIndex(y => Object.is(NaN, y))\n// 0\n```\n\n上面代码中，indexOf 方法无法识别数组的 NaN 成员，但是 findIndex 方法可以借助 Object.is 方法做到。\n\n### fill()\n\n方法使用给定值，填充一个数组。\n\n```\n['a', 'b', 'c'].fill(1) // [1, 1, 1]\nnew Array(3).fill(1) // [1, 1, 1]\n//上面代码表明，fill方法用于空数组的初始化非常方便。数组中已有的元素，会被全部抹去。\n```\n\nfill 方法还可以接受第二个和第三个参数，用于指定填充的起始位置和结束位置。\n\n```\n['a', 'b', 'c'].fill(7, 1, 2) // ['a', 7, 'c']\n//上面代码表示，fill方法从 1 号位开始，向原数组填充 7，到 2 号位之前结束。\n```\n\n注意，如果填充的类型为对象，那么被赋值的是同一个内存地址的对象，而不是深拷贝对象。\n\n```javascript\nlet arr = new Array(3).fill({ name: 'Mike' })\narr[0].name = 'Ben'\narr\n// [{name: \"Ben\"}, {name: \"Ben\"}, {name: \"Ben\"}]\n\nlet arr = new Array(3).fill([])\narr[0].push(5)\narr\n// [[5], [5], [5]]\n```\n\n### copyWithin()\n\n在当前数组内部，将指定位置的成员复制到其他位置（会覆盖原有成员），然后返回当前数组。会修改当前数组。\n\n```\n[1, 2, 3, 4, 5].copyWithin(0, 3) // [4, 5, 3, 4, 5]\n[1, 2, 3, 4, 5].copyWithin(0, 3, 4) // [4, 2, 3, 4, 5]\n[1, 2, 3, 4, 5].copyWithin(0, -2, -1) //[4, 2, 3, 4, 5]\n```\n\n### flat() flatMap()\n\n数组的成员有时还是数组，Array.prototype.flat()用于将嵌套的数组“拉平”，变成一维的数组。该方法返回一个新数组，对原数据没有影响。\n\n```\n[1, 2, [3, 4]].flat() // [1, 2, 3, 4]\n[1, 2, [3, [4, 5]]].flat(2) // [1, 2, 3, 4, 5]\n//flat()默认只会“拉平”一层，如果想要“拉平”多层的嵌套数组，可以将flat()方法的参数写成一个整数，表示想要拉平的层数，默认为1。\n[1, [2, [3]]].flat(Infinity) // [1, 2, 3] 不管有多少层嵌套，都要转成一维数组\n[1, 2, , 4, 5].flat() // [1, 2, 4, 5]会跳过空位。\n```\n\nflatMap()方法对原数组的每个成员执行一个函数（相当于执行 Array.prototype.map()），然后对返回值组成的数组执行 flat()方法。该方法返回一个新数组，不改变原数组。\n\n```\n// 相当于 [[2, 4], [3, 6], [4, 8]].flat()\n[2, 3, 4].flatMap(x => [x, x * 2])\n// [2, 4, 3, 6, 4, 8]\n\n// 相当于 [[[2]], [[4]], [[6]], [[8]]].flat()\n  [(1, 2, 3, 4)].flatMap(x => [[x * 2]])\n// [[2], [4], [6], [8]]\n```\n\n## ES5\n\n#### concat()\n\nconcat()方法用于`连接`两个或多个数组。方法不会改变现在的数组，仅返回被连接生成的新数组。\n\n```javascript\nvar arr1 = [1, 2]\nvar arr2 = [3, 4]\nvar arr3 = arr1.concat(arr2)\nconsole.log(arr1) //[1,2]\nconsole.log(arr3) //[1,2,3,4]\n```\n\n### join()\n\njoin()方法用于把数组中的所有元素放入一个字符串。元素是通过指定的分隔符进行`分割`的。默认使用“,”分割。不改变原来数组。\n\n```javascript\nvar arr = [1, 2]\nconsole.log(arr.join()) //\"1,2\"\nconsole.log(arr) //[1,2];\n```\n\n### push()\n\npush()方法用于向数组`末尾添加`一个或多个元素。返回值为新数组的`length`。会改变原数组。\n\n```javascript\nvar arr = [1, 2]\nvar newLength = arr.push(3, 4)\nconsole.log(newLength) //4\nconsole.log(arr) //[1,2,3,4];\n```\n\n### pop()\n\npop()方法用于`删除数组最后一个元素`。返回被删除的元素。会改变原数组\n\n```javascript\nvar arr = [1, 2, 3, 4]\nconsole.log(arr.pop()) //4\nconsole.log(arr) //[1,2,3];\n```\n\n### shift()\n\nshift()方法用于`删除数组第一个元素`。返回被删除的元素。会改变原数组\n\n```javascript\nvar arr = [1, 2, 3, 4]\nconsole.log(arr.shift()) //1\nconsole.log(arr) //[2,3,4];\n```\n\n### unshift()\n\nunshift()方法用于向`数组开头添加`一个或多个元素。返回新数组的 length。会改变原数组\n\n```javascript\nvar arr = [3, 4]\nconsole.log(arr.unshift(1, 2)) //4\nconsole.log(arr) //[1,2,3,4];\n```\n\n### slice()\n\nslice()方法可从已有的数组中返回`选定`的元素。返回一个新的数组，包含从 start 到 end （不包括该元素）的 arrayObject 中的元素。不会改变原数组\n\n```javascript\nvar arr = [1, 2, 3, 4]\nconsole.log(arr.slice(1, 3)) //[2,3]\nconsole.log(arr) //[1,2,3,4];\n```\n\n### splice()\n\nsplice()方法可用于`删除`元素，并且可选择添加新元素来`替换`被删除的元素，第一个参数表示删除操作的开始下标。第二个参数表示删除的个数，如果没有第三个参数，splice 用于删除元素。如果有第三，第四个参数，表示采用第三第四。。。参数来替换被删除第元素。方法返回被删除元素的数组，会改变原数组。\n\n```javascript\nvar arr = [1, 2, 3, 4]\nconsole.log(arr.splice(1, 1)) //[2]\nconsole.log(arr) //[1,3,4];\narr.splice(1, 0, 8, 9) //[]\nconsole.log(arr) //[1,8,9,3,4]\n```\n\n### sort()\n\nsort()方法按照 Unicode code 位置`排序`，默认升序.会改变原数组。\n\n```javascript\nvar arr = [1, 10, 21, 2]\nconsole.log(arr.sort()) //[1,10,2,21]\n```\n\n### reverse()\n\nreverse()方法用于`颠倒元素顺序`。返回颠倒后的数组。会改变原数组。\n\n```javascript\nvar arr = [1, 2, 3]\nconsole.log(arr.reverse()) //[3,2,1]\nconsole.log(arr) //[3,2,1]\n```\n\n### indexOf() lastIndexOf()\n\n都接受两个参数，参数一为`查找`的值，参数二为查找的起始位置。查找结果不存在为-1，存在则返回下标。\nindexOf()从前向后。\nlastIndexOf()从后向前。\n\n```javascript\nvar arr = [1, 2, 3, 2]\nconsole.log(arr.indexOf(2)) //1\nconsole.log(arr.indexOf(9)) //-1\nconsole.log(arr.lastIndexOf(2)) //3\nconsole.log(arr.lastIndexOf(2, 2)) //1\n```\n\n### every()\n\nevery()方法对数组对每一项元素都运行给定的函数，如果每一项都返回 true、则返回 true\n\n```javascript\nvar ages = [32, 33, 16, 40]\nfunction checkAdult(age) {\n  return age >= 18\n}\nconsole.log(ages.every(checkAdult)) //false\n```\n\n### some()\n\nsome()方法对数组对每一项元素都运行给定的函数，如果任意一项返回 true、则返回 true\n\n```javascript\nvar ages = [32, 33, 16, 40]\nfunction checkAdult(age) {\n  return age >= 18\n}\nconsole.log(ages.some(checkAdult)) //true\n```\n\n### filter()\n\nfilter()方法对数组对每一项元素都运行给定的函数，返回结果为 true 的项组成的数组。\n\n```javascript\nvar ages = [32, 33, 16, 40]\nfunction checkAdult(age) {\n  return age >= 18\n}\nconsole.log(ages.filter(checkAdult)) //[32, 33, 40]\n```\n\n配和 includes、some 和 every 来使用\n\n```js\nconst ages = [32, 33, 16, 40]\nconst value = [32, 33]\nages.filter(item => value.every(it => it !== item))\nages.filter(item => value.includes(item))\nages.filter(item => !value.some(it => it === item))\n```\n\n### map()\n\nmap()方法对数组对每一项元素都运行给定的函数，返回每次函数调用的结果组成一个新函数,不改变原数组\n\n```javascript\nvar ages = [1, 2, 3, 4]\nvar mapFun = ages.map(function(x) {\n  return x * 2\n})\nconsole.log(mapFun) //[2, 4, 6，8]\nconsole.log(ages) //[1, 2, 3, 4];\n```\n\n### forEach() 数组遍历\n\n```javascript\nvar ages = [1, 2, 3, 4]\nvar ages2 = []\nvar mapFun = ages.forEach(item => ages2.push(item))\nconsole.log(ages2) //[1, 2, 3, 4];\nconsole.log(ages) //[1, 2, 3, 4];\n```\n\n最后修改日期 2018 年 12 月 21 日\n","source":"_posts/2018-09-28-js-array-method.md","raw":"---\nlayout: post\ntitle: JavaScript - 常用数组操作方法\ndate: 2018-09-28\ncategories: JavaScript\ntags: [JavaScript, 前端]\ndescription: JavaScript常用数组操作方法，包含ES6方法\n---\n\n# ES6\n\n## Array.of()\n\n用于将一组值，转换为数组。这个方法的主要目的，是弥补数组构造函数 Array() 的不足。因为参数个数的不同，会导致 Array() 的行为有差异。\n\n```javascript\nArray(3) //[,,,]\nArray.of(3) //[3]\nArray(1, 2, 3) //[1,2,3]\nArray.of(1, 2, 3) //[1,2,3] 多于2个参数，组成新数组\n```\n\n### includes()\n\n判断数组中是否存在该元素，参数：查找的值、起始位置，可以替换 ES5 时代的 indexOf 判断方式。indexOf 判断元素是否为 NaN，会判断错误。\n\n```\n[1, 2, 3].includes(2) // true\n[1, 2, 3].includes(4) // false\n[1, 2, NaN].includes(NaN) // true\n[1, 2, 3].includes(3, 3) // false\n[1, 2, 3].includes(3, -1) // true\n[NaN].includes(NaN) //true\n```\n\n### Array.from()\n\n用于将两类对象转为真正的数组：类似数组的对象（array-like object）和可遍历（iterable）的对象（包括 ES6 新增的数据结构 Set 和 Map）。\n\n```javascript\nArray.from('foo') //['f','o','o']\n```\n\n### find() findIndex()\n\n`find`方法用于找出第一个符合条件的数组成员。它的参数是一个回调函数，所有数组成员依次执行该回调函数，直到找出第一个返回值为`true`的成员，然后返回该成员。如果没有符合条件的成员，则返回 undefined。\n\n```\n[1, 4, -5, 10].find(n => n < 0) // 返回第一个满足条件的成员\n// -5\n```\n\n`findIndex`方法的用法与 find 方法非常类似，返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回-1\n\n```\n[1, 5, 10, 15].findIndex(function(value, index, arr) {\n  return value > 9\n}) // 2\n```\n\n这两个方法都可以接受第二个参数，用来绑定回调函数的 this 对象。\n\n```javascript\nfunction f(v) {\n  return v > this.age\n}\nlet person = { name: 'John', age: 20 }\n;[10, 12, 26, 15].find(f, person) // 26\n```\n\n上面的代码中，find 函数接收了第二个参数 person 对象，回调函数中的 this 对象指向 person 对象。\n另外，这两个方法都可以发现 `NaN`，弥补了数组的 `indexOf` 方法的不足。\n\n```javascript\nconst arr = [NAN]\narr.indexOf(NaN)\n// -1\narr.findIndex(y => Object.is(NaN, y))\n// 0\n```\n\n上面代码中，indexOf 方法无法识别数组的 NaN 成员，但是 findIndex 方法可以借助 Object.is 方法做到。\n\n### fill()\n\n方法使用给定值，填充一个数组。\n\n```\n['a', 'b', 'c'].fill(1) // [1, 1, 1]\nnew Array(3).fill(1) // [1, 1, 1]\n//上面代码表明，fill方法用于空数组的初始化非常方便。数组中已有的元素，会被全部抹去。\n```\n\nfill 方法还可以接受第二个和第三个参数，用于指定填充的起始位置和结束位置。\n\n```\n['a', 'b', 'c'].fill(7, 1, 2) // ['a', 7, 'c']\n//上面代码表示，fill方法从 1 号位开始，向原数组填充 7，到 2 号位之前结束。\n```\n\n注意，如果填充的类型为对象，那么被赋值的是同一个内存地址的对象，而不是深拷贝对象。\n\n```javascript\nlet arr = new Array(3).fill({ name: 'Mike' })\narr[0].name = 'Ben'\narr\n// [{name: \"Ben\"}, {name: \"Ben\"}, {name: \"Ben\"}]\n\nlet arr = new Array(3).fill([])\narr[0].push(5)\narr\n// [[5], [5], [5]]\n```\n\n### copyWithin()\n\n在当前数组内部，将指定位置的成员复制到其他位置（会覆盖原有成员），然后返回当前数组。会修改当前数组。\n\n```\n[1, 2, 3, 4, 5].copyWithin(0, 3) // [4, 5, 3, 4, 5]\n[1, 2, 3, 4, 5].copyWithin(0, 3, 4) // [4, 2, 3, 4, 5]\n[1, 2, 3, 4, 5].copyWithin(0, -2, -1) //[4, 2, 3, 4, 5]\n```\n\n### flat() flatMap()\n\n数组的成员有时还是数组，Array.prototype.flat()用于将嵌套的数组“拉平”，变成一维的数组。该方法返回一个新数组，对原数据没有影响。\n\n```\n[1, 2, [3, 4]].flat() // [1, 2, 3, 4]\n[1, 2, [3, [4, 5]]].flat(2) // [1, 2, 3, 4, 5]\n//flat()默认只会“拉平”一层，如果想要“拉平”多层的嵌套数组，可以将flat()方法的参数写成一个整数，表示想要拉平的层数，默认为1。\n[1, [2, [3]]].flat(Infinity) // [1, 2, 3] 不管有多少层嵌套，都要转成一维数组\n[1, 2, , 4, 5].flat() // [1, 2, 4, 5]会跳过空位。\n```\n\nflatMap()方法对原数组的每个成员执行一个函数（相当于执行 Array.prototype.map()），然后对返回值组成的数组执行 flat()方法。该方法返回一个新数组，不改变原数组。\n\n```\n// 相当于 [[2, 4], [3, 6], [4, 8]].flat()\n[2, 3, 4].flatMap(x => [x, x * 2])\n// [2, 4, 3, 6, 4, 8]\n\n// 相当于 [[[2]], [[4]], [[6]], [[8]]].flat()\n  [(1, 2, 3, 4)].flatMap(x => [[x * 2]])\n// [[2], [4], [6], [8]]\n```\n\n## ES5\n\n#### concat()\n\nconcat()方法用于`连接`两个或多个数组。方法不会改变现在的数组，仅返回被连接生成的新数组。\n\n```javascript\nvar arr1 = [1, 2]\nvar arr2 = [3, 4]\nvar arr3 = arr1.concat(arr2)\nconsole.log(arr1) //[1,2]\nconsole.log(arr3) //[1,2,3,4]\n```\n\n### join()\n\njoin()方法用于把数组中的所有元素放入一个字符串。元素是通过指定的分隔符进行`分割`的。默认使用“,”分割。不改变原来数组。\n\n```javascript\nvar arr = [1, 2]\nconsole.log(arr.join()) //\"1,2\"\nconsole.log(arr) //[1,2];\n```\n\n### push()\n\npush()方法用于向数组`末尾添加`一个或多个元素。返回值为新数组的`length`。会改变原数组。\n\n```javascript\nvar arr = [1, 2]\nvar newLength = arr.push(3, 4)\nconsole.log(newLength) //4\nconsole.log(arr) //[1,2,3,4];\n```\n\n### pop()\n\npop()方法用于`删除数组最后一个元素`。返回被删除的元素。会改变原数组\n\n```javascript\nvar arr = [1, 2, 3, 4]\nconsole.log(arr.pop()) //4\nconsole.log(arr) //[1,2,3];\n```\n\n### shift()\n\nshift()方法用于`删除数组第一个元素`。返回被删除的元素。会改变原数组\n\n```javascript\nvar arr = [1, 2, 3, 4]\nconsole.log(arr.shift()) //1\nconsole.log(arr) //[2,3,4];\n```\n\n### unshift()\n\nunshift()方法用于向`数组开头添加`一个或多个元素。返回新数组的 length。会改变原数组\n\n```javascript\nvar arr = [3, 4]\nconsole.log(arr.unshift(1, 2)) //4\nconsole.log(arr) //[1,2,3,4];\n```\n\n### slice()\n\nslice()方法可从已有的数组中返回`选定`的元素。返回一个新的数组，包含从 start 到 end （不包括该元素）的 arrayObject 中的元素。不会改变原数组\n\n```javascript\nvar arr = [1, 2, 3, 4]\nconsole.log(arr.slice(1, 3)) //[2,3]\nconsole.log(arr) //[1,2,3,4];\n```\n\n### splice()\n\nsplice()方法可用于`删除`元素，并且可选择添加新元素来`替换`被删除的元素，第一个参数表示删除操作的开始下标。第二个参数表示删除的个数，如果没有第三个参数，splice 用于删除元素。如果有第三，第四个参数，表示采用第三第四。。。参数来替换被删除第元素。方法返回被删除元素的数组，会改变原数组。\n\n```javascript\nvar arr = [1, 2, 3, 4]\nconsole.log(arr.splice(1, 1)) //[2]\nconsole.log(arr) //[1,3,4];\narr.splice(1, 0, 8, 9) //[]\nconsole.log(arr) //[1,8,9,3,4]\n```\n\n### sort()\n\nsort()方法按照 Unicode code 位置`排序`，默认升序.会改变原数组。\n\n```javascript\nvar arr = [1, 10, 21, 2]\nconsole.log(arr.sort()) //[1,10,2,21]\n```\n\n### reverse()\n\nreverse()方法用于`颠倒元素顺序`。返回颠倒后的数组。会改变原数组。\n\n```javascript\nvar arr = [1, 2, 3]\nconsole.log(arr.reverse()) //[3,2,1]\nconsole.log(arr) //[3,2,1]\n```\n\n### indexOf() lastIndexOf()\n\n都接受两个参数，参数一为`查找`的值，参数二为查找的起始位置。查找结果不存在为-1，存在则返回下标。\nindexOf()从前向后。\nlastIndexOf()从后向前。\n\n```javascript\nvar arr = [1, 2, 3, 2]\nconsole.log(arr.indexOf(2)) //1\nconsole.log(arr.indexOf(9)) //-1\nconsole.log(arr.lastIndexOf(2)) //3\nconsole.log(arr.lastIndexOf(2, 2)) //1\n```\n\n### every()\n\nevery()方法对数组对每一项元素都运行给定的函数，如果每一项都返回 true、则返回 true\n\n```javascript\nvar ages = [32, 33, 16, 40]\nfunction checkAdult(age) {\n  return age >= 18\n}\nconsole.log(ages.every(checkAdult)) //false\n```\n\n### some()\n\nsome()方法对数组对每一项元素都运行给定的函数，如果任意一项返回 true、则返回 true\n\n```javascript\nvar ages = [32, 33, 16, 40]\nfunction checkAdult(age) {\n  return age >= 18\n}\nconsole.log(ages.some(checkAdult)) //true\n```\n\n### filter()\n\nfilter()方法对数组对每一项元素都运行给定的函数，返回结果为 true 的项组成的数组。\n\n```javascript\nvar ages = [32, 33, 16, 40]\nfunction checkAdult(age) {\n  return age >= 18\n}\nconsole.log(ages.filter(checkAdult)) //[32, 33, 40]\n```\n\n配和 includes、some 和 every 来使用\n\n```js\nconst ages = [32, 33, 16, 40]\nconst value = [32, 33]\nages.filter(item => value.every(it => it !== item))\nages.filter(item => value.includes(item))\nages.filter(item => !value.some(it => it === item))\n```\n\n### map()\n\nmap()方法对数组对每一项元素都运行给定的函数，返回每次函数调用的结果组成一个新函数,不改变原数组\n\n```javascript\nvar ages = [1, 2, 3, 4]\nvar mapFun = ages.map(function(x) {\n  return x * 2\n})\nconsole.log(mapFun) //[2, 4, 6，8]\nconsole.log(ages) //[1, 2, 3, 4];\n```\n\n### forEach() 数组遍历\n\n```javascript\nvar ages = [1, 2, 3, 4]\nvar ages2 = []\nvar mapFun = ages.forEach(item => ages2.push(item))\nconsole.log(ages2) //[1, 2, 3, 4];\nconsole.log(ages) //[1, 2, 3, 4];\n```\n\n最后修改日期 2018 年 12 月 21 日\n","slug":"2018-09-28-js-array-method","published":1,"updated":"2019-04-10T08:14:11.236Z","comments":1,"photos":[],"link":"","_id":"cjvbyxkik003hw0oos3qsygjw","content":"<h1 id=\"ES6\"><a href=\"#ES6\" class=\"headerlink\" title=\"ES6\"></a>ES6</h1><h2 id=\"Array-of\"><a href=\"#Array-of\" class=\"headerlink\" title=\"Array.of()\"></a>Array.of()</h2><p>用于将一组值，转换为数组。这个方法的主要目的，是弥补数组构造函数 Array() 的不足。因为参数个数的不同，会导致 Array() 的行为有差异。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>(<span class=\"number\">3</span>) <span class=\"comment\">//[,,,]</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.of(<span class=\"number\">3</span>) <span class=\"comment\">//[3]</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>) <span class=\"comment\">//[1,2,3]</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>) <span class=\"comment\">//[1,2,3] 多于2个参数，组成新数组</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"includes\"><a href=\"#includes\" class=\"headerlink\" title=\"includes()\"></a>includes()</h3><p>判断数组中是否存在该元素，参数：查找的值、起始位置，可以替换 ES5 时代的 indexOf 判断方式。indexOf 判断元素是否为 NaN，会判断错误。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1, 2, 3].includes(2) // true</span><br><span class=\"line\">[1, 2, 3].includes(4) // false</span><br><span class=\"line\">[1, 2, NaN].includes(NaN) // true</span><br><span class=\"line\">[1, 2, 3].includes(3, 3) // false</span><br><span class=\"line\">[1, 2, 3].includes(3, -1) // true</span><br><span class=\"line\">[NaN].includes(NaN) //true</span><br></pre></td></tr></table></figure>\n<h3 id=\"Array-from\"><a href=\"#Array-from\" class=\"headerlink\" title=\"Array.from()\"></a>Array.from()</h3><p>用于将两类对象转为真正的数组：类似数组的对象（array-like object）和可遍历（iterable）的对象（包括 ES6 新增的数据结构 Set 和 Map）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.from(<span class=\"string\">'foo'</span>) <span class=\"comment\">//['f','o','o']</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"find-findIndex\"><a href=\"#find-findIndex\" class=\"headerlink\" title=\"find() findIndex()\"></a>find() findIndex()</h3><p><code>find</code>方法用于找出第一个符合条件的数组成员。它的参数是一个回调函数，所有数组成员依次执行该回调函数，直到找出第一个返回值为<code>true</code>的成员，然后返回该成员。如果没有符合条件的成员，则返回 undefined。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1, 4, -5, 10].find(n =&gt; n &lt; 0) // 返回第一个满足条件的成员</span><br><span class=\"line\">// -5</span><br></pre></td></tr></table></figure>\n<p><code>findIndex</code>方法的用法与 find 方法非常类似，返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回-1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1, 5, 10, 15].findIndex(function(value, index, arr) &#123;</span><br><span class=\"line\">  return value &gt; 9</span><br><span class=\"line\">&#125;) // 2</span><br></pre></td></tr></table></figure>\n<p>这两个方法都可以接受第二个参数，用来绑定回调函数的 this 对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">v</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> v &gt; <span class=\"keyword\">this</span>.age</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> person = &#123; <span class=\"attr\">name</span>: <span class=\"string\">'John'</span>, <span class=\"attr\">age</span>: <span class=\"number\">20</span> &#125;</span><br><span class=\"line\">;[<span class=\"number\">10</span>, <span class=\"number\">12</span>, <span class=\"number\">26</span>, <span class=\"number\">15</span>].find(f, person) <span class=\"comment\">// 26</span></span><br></pre></td></tr></table></figure>\n<p>上面的代码中，find 函数接收了第二个参数 person 对象，回调函数中的 this 对象指向 person 对象。<br>另外，这两个方法都可以发现 <code>NaN</code>，弥补了数组的 <code>indexOf</code> 方法的不足。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [NAN]</span><br><span class=\"line\">arr.indexOf(<span class=\"literal\">NaN</span>)</span><br><span class=\"line\"><span class=\"comment\">// -1</span></span><br><span class=\"line\">arr.findIndex(<span class=\"function\"><span class=\"params\">y</span> =&gt;</span> <span class=\"built_in\">Object</span>.is(<span class=\"literal\">NaN</span>, y))</span><br><span class=\"line\"><span class=\"comment\">// 0</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，indexOf 方法无法识别数组的 NaN 成员，但是 findIndex 方法可以借助 Object.is 方法做到。</p>\n<h3 id=\"fill\"><a href=\"#fill\" class=\"headerlink\" title=\"fill()\"></a>fill()</h3><p>方法使用给定值，填充一个数组。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&apos;a&apos;, &apos;b&apos;, &apos;c&apos;].fill(1) // [1, 1, 1]</span><br><span class=\"line\">new Array(3).fill(1) // [1, 1, 1]</span><br><span class=\"line\">//上面代码表明，fill方法用于空数组的初始化非常方便。数组中已有的元素，会被全部抹去。</span><br></pre></td></tr></table></figure>\n<p>fill 方法还可以接受第二个和第三个参数，用于指定填充的起始位置和结束位置。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&apos;a&apos;, &apos;b&apos;, &apos;c&apos;].fill(7, 1, 2) // [&apos;a&apos;, 7, &apos;c&apos;]</span><br><span class=\"line\">//上面代码表示，fill方法从 1 号位开始，向原数组填充 7，到 2 号位之前结束。</span><br></pre></td></tr></table></figure>\n<p>注意，如果填充的类型为对象，那么被赋值的是同一个内存地址的对象，而不是深拷贝对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">3</span>).fill(&#123; <span class=\"attr\">name</span>: <span class=\"string\">'Mike'</span> &#125;)</span><br><span class=\"line\">arr[<span class=\"number\">0</span>].name = <span class=\"string\">'Ben'</span></span><br><span class=\"line\">arr</span><br><span class=\"line\"><span class=\"comment\">// [&#123;name: \"Ben\"&#125;, &#123;name: \"Ben\"&#125;, &#123;name: \"Ben\"&#125;]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">3</span>).fill([])</span><br><span class=\"line\">arr[<span class=\"number\">0</span>].push(<span class=\"number\">5</span>)</span><br><span class=\"line\">arr</span><br><span class=\"line\"><span class=\"comment\">// [[5], [5], [5]]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"copyWithin\"><a href=\"#copyWithin\" class=\"headerlink\" title=\"copyWithin()\"></a>copyWithin()</h3><p>在当前数组内部，将指定位置的成员复制到其他位置（会覆盖原有成员），然后返回当前数组。会修改当前数组。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1, 2, 3, 4, 5].copyWithin(0, 3) // [4, 5, 3, 4, 5]</span><br><span class=\"line\">[1, 2, 3, 4, 5].copyWithin(0, 3, 4) // [4, 2, 3, 4, 5]</span><br><span class=\"line\">[1, 2, 3, 4, 5].copyWithin(0, -2, -1) //[4, 2, 3, 4, 5]</span><br></pre></td></tr></table></figure>\n<h3 id=\"flat-flatMap\"><a href=\"#flat-flatMap\" class=\"headerlink\" title=\"flat() flatMap()\"></a>flat() flatMap()</h3><p>数组的成员有时还是数组，Array.prototype.flat()用于将嵌套的数组“拉平”，变成一维的数组。该方法返回一个新数组，对原数据没有影响。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1, 2, [3, 4]].flat() // [1, 2, 3, 4]</span><br><span class=\"line\">[1, 2, [3, [4, 5]]].flat(2) // [1, 2, 3, 4, 5]</span><br><span class=\"line\">//flat()默认只会“拉平”一层，如果想要“拉平”多层的嵌套数组，可以将flat()方法的参数写成一个整数，表示想要拉平的层数，默认为1。</span><br><span class=\"line\">[1, [2, [3]]].flat(Infinity) // [1, 2, 3] 不管有多少层嵌套，都要转成一维数组</span><br><span class=\"line\">[1, 2, , 4, 5].flat() // [1, 2, 4, 5]会跳过空位。</span><br></pre></td></tr></table></figure>\n<p>flatMap()方法对原数组的每个成员执行一个函数（相当于执行 Array.prototype.map()），然后对返回值组成的数组执行 flat()方法。该方法返回一个新数组，不改变原数组。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 相当于 [[2, 4], [3, 6], [4, 8]].flat()</span><br><span class=\"line\">[2, 3, 4].flatMap(x =&gt; [x, x * 2])</span><br><span class=\"line\">// [2, 4, 3, 6, 4, 8]</span><br><span class=\"line\"></span><br><span class=\"line\">// 相当于 [[[2]], [[4]], [[6]], [[8]]].flat()</span><br><span class=\"line\">  [(1, 2, 3, 4)].flatMap(x =&gt; [[x * 2]])</span><br><span class=\"line\">// [[2], [4], [6], [8]]</span><br></pre></td></tr></table></figure>\n<h2 id=\"ES5\"><a href=\"#ES5\" class=\"headerlink\" title=\"ES5\"></a>ES5</h2><h4 id=\"concat\"><a href=\"#concat\" class=\"headerlink\" title=\"concat()\"></a>concat()</h4><p>concat()方法用于<code>连接</code>两个或多个数组。方法不会改变现在的数组，仅返回被连接生成的新数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = [<span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr3 = arr1.concat(arr2)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr1) <span class=\"comment\">//[1,2]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr3) <span class=\"comment\">//[1,2,3,4]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"join\"><a href=\"#join\" class=\"headerlink\" title=\"join()\"></a>join()</h3><p>join()方法用于把数组中的所有元素放入一个字符串。元素是通过指定的分隔符进行<code>分割</code>的。默认使用“,”分割。不改变原来数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.join()) <span class=\"comment\">//\"1,2\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr) <span class=\"comment\">//[1,2];</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"push\"><a href=\"#push\" class=\"headerlink\" title=\"push()\"></a>push()</h3><p>push()方法用于向数组<code>末尾添加</code>一个或多个元素。返回值为新数组的<code>length</code>。会改变原数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> newLength = arr.push(<span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newLength) <span class=\"comment\">//4</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr) <span class=\"comment\">//[1,2,3,4];</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"pop\"><a href=\"#pop\" class=\"headerlink\" title=\"pop()\"></a>pop()</h3><p>pop()方法用于<code>删除数组最后一个元素</code>。返回被删除的元素。会改变原数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.pop()) <span class=\"comment\">//4</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr) <span class=\"comment\">//[1,2,3];</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"shift\"><a href=\"#shift\" class=\"headerlink\" title=\"shift()\"></a>shift()</h3><p>shift()方法用于<code>删除数组第一个元素</code>。返回被删除的元素。会改变原数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.shift()) <span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr) <span class=\"comment\">//[2,3,4];</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"unshift\"><a href=\"#unshift\" class=\"headerlink\" title=\"unshift()\"></a>unshift()</h3><p>unshift()方法用于向<code>数组开头添加</code>一个或多个元素。返回新数组的 length。会改变原数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.unshift(<span class=\"number\">1</span>, <span class=\"number\">2</span>)) <span class=\"comment\">//4</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr) <span class=\"comment\">//[1,2,3,4];</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"slice\"><a href=\"#slice\" class=\"headerlink\" title=\"slice()\"></a>slice()</h3><p>slice()方法可从已有的数组中返回<code>选定</code>的元素。返回一个新的数组，包含从 start 到 end （不包括该元素）的 arrayObject 中的元素。不会改变原数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.slice(<span class=\"number\">1</span>, <span class=\"number\">3</span>)) <span class=\"comment\">//[2,3]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr) <span class=\"comment\">//[1,2,3,4];</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"splice\"><a href=\"#splice\" class=\"headerlink\" title=\"splice()\"></a>splice()</h3><p>splice()方法可用于<code>删除</code>元素，并且可选择添加新元素来<code>替换</code>被删除的元素，第一个参数表示删除操作的开始下标。第二个参数表示删除的个数，如果没有第三个参数，splice 用于删除元素。如果有第三，第四个参数，表示采用第三第四。。。参数来替换被删除第元素。方法返回被删除元素的数组，会改变原数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.splice(<span class=\"number\">1</span>, <span class=\"number\">1</span>)) <span class=\"comment\">//[2]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr) <span class=\"comment\">//[1,3,4];</span></span><br><span class=\"line\">arr.splice(<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>) <span class=\"comment\">//[]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr) <span class=\"comment\">//[1,8,9,3,4]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"sort\"><a href=\"#sort\" class=\"headerlink\" title=\"sort()\"></a>sort()</h3><p>sort()方法按照 Unicode code 位置<code>排序</code>，默认升序.会改变原数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">10</span>, <span class=\"number\">21</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.sort()) <span class=\"comment\">//[1,10,2,21]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"reverse\"><a href=\"#reverse\" class=\"headerlink\" title=\"reverse()\"></a>reverse()</h3><p>reverse()方法用于<code>颠倒元素顺序</code>。返回颠倒后的数组。会改变原数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.reverse()) <span class=\"comment\">//[3,2,1]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr) <span class=\"comment\">//[3,2,1]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"indexOf-lastIndexOf\"><a href=\"#indexOf-lastIndexOf\" class=\"headerlink\" title=\"indexOf() lastIndexOf()\"></a>indexOf() lastIndexOf()</h3><p>都接受两个参数，参数一为<code>查找</code>的值，参数二为查找的起始位置。查找结果不存在为-1，存在则返回下标。<br>indexOf()从前向后。<br>lastIndexOf()从后向前。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.indexOf(<span class=\"number\">2</span>)) <span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.indexOf(<span class=\"number\">9</span>)) <span class=\"comment\">//-1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.lastIndexOf(<span class=\"number\">2</span>)) <span class=\"comment\">//3</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.lastIndexOf(<span class=\"number\">2</span>, <span class=\"number\">2</span>)) <span class=\"comment\">//1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"every\"><a href=\"#every\" class=\"headerlink\" title=\"every()\"></a>every()</h3><p>every()方法对数组对每一项元素都运行给定的函数，如果每一项都返回 true、则返回 true</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ages = [<span class=\"number\">32</span>, <span class=\"number\">33</span>, <span class=\"number\">16</span>, <span class=\"number\">40</span>]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkAdult</span>(<span class=\"params\">age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> age &gt;= <span class=\"number\">18</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ages.every(checkAdult)) <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"some\"><a href=\"#some\" class=\"headerlink\" title=\"some()\"></a>some()</h3><p>some()方法对数组对每一项元素都运行给定的函数，如果任意一项返回 true、则返回 true</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ages = [<span class=\"number\">32</span>, <span class=\"number\">33</span>, <span class=\"number\">16</span>, <span class=\"number\">40</span>]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkAdult</span>(<span class=\"params\">age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> age &gt;= <span class=\"number\">18</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ages.some(checkAdult)) <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter()\"></a>filter()</h3><p>filter()方法对数组对每一项元素都运行给定的函数，返回结果为 true 的项组成的数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ages = [<span class=\"number\">32</span>, <span class=\"number\">33</span>, <span class=\"number\">16</span>, <span class=\"number\">40</span>]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkAdult</span>(<span class=\"params\">age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> age &gt;= <span class=\"number\">18</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ages.filter(checkAdult)) <span class=\"comment\">//[32, 33, 40]</span></span><br></pre></td></tr></table></figure>\n<p>配和 includes、some 和 every 来使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ages = [<span class=\"number\">32</span>, <span class=\"number\">33</span>, <span class=\"number\">16</span>, <span class=\"number\">40</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> value = [<span class=\"number\">32</span>, <span class=\"number\">33</span>]</span><br><span class=\"line\">ages.filter(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> value.every(<span class=\"function\"><span class=\"params\">it</span> =&gt;</span> it !== item))</span><br><span class=\"line\">ages.filter(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> value.includes(item))</span><br><span class=\"line\">ages.filter(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> !value.some(<span class=\"function\"><span class=\"params\">it</span> =&gt;</span> it === item))</span><br></pre></td></tr></table></figure>\n<h3 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map()\"></a>map()</h3><p>map()方法对数组对每一项元素都运行给定的函数，返回每次函数调用的结果组成一个新函数,不改变原数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ages = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> mapFun = ages.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x * <span class=\"number\">2</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mapFun) <span class=\"comment\">//[2, 4, 6，8]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ages) <span class=\"comment\">//[1, 2, 3, 4];</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"forEach-数组遍历\"><a href=\"#forEach-数组遍历\" class=\"headerlink\" title=\"forEach() 数组遍历\"></a>forEach() 数组遍历</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ages = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> ages2 = []</span><br><span class=\"line\"><span class=\"keyword\">var</span> mapFun = ages.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> ages2.push(item))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ages2) <span class=\"comment\">//[1, 2, 3, 4];</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ages) <span class=\"comment\">//[1, 2, 3, 4];</span></span><br></pre></td></tr></table></figure>\n<p>最后修改日期 2018 年 12 月 21 日</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"ES6\"><a href=\"#ES6\" class=\"headerlink\" title=\"ES6\"></a>ES6</h1><h2 id=\"Array-of\"><a href=\"#Array-of\" class=\"headerlink\" title=\"Array.of()\"></a>Array.of()</h2><p>用于将一组值，转换为数组。这个方法的主要目的，是弥补数组构造函数 Array() 的不足。因为参数个数的不同，会导致 Array() 的行为有差异。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>(<span class=\"number\">3</span>) <span class=\"comment\">//[,,,]</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.of(<span class=\"number\">3</span>) <span class=\"comment\">//[3]</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>) <span class=\"comment\">//[1,2,3]</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>) <span class=\"comment\">//[1,2,3] 多于2个参数，组成新数组</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"includes\"><a href=\"#includes\" class=\"headerlink\" title=\"includes()\"></a>includes()</h3><p>判断数组中是否存在该元素，参数：查找的值、起始位置，可以替换 ES5 时代的 indexOf 判断方式。indexOf 判断元素是否为 NaN，会判断错误。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1, 2, 3].includes(2) // true</span><br><span class=\"line\">[1, 2, 3].includes(4) // false</span><br><span class=\"line\">[1, 2, NaN].includes(NaN) // true</span><br><span class=\"line\">[1, 2, 3].includes(3, 3) // false</span><br><span class=\"line\">[1, 2, 3].includes(3, -1) // true</span><br><span class=\"line\">[NaN].includes(NaN) //true</span><br></pre></td></tr></table></figure>\n<h3 id=\"Array-from\"><a href=\"#Array-from\" class=\"headerlink\" title=\"Array.from()\"></a>Array.from()</h3><p>用于将两类对象转为真正的数组：类似数组的对象（array-like object）和可遍历（iterable）的对象（包括 ES6 新增的数据结构 Set 和 Map）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.from(<span class=\"string\">'foo'</span>) <span class=\"comment\">//['f','o','o']</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"find-findIndex\"><a href=\"#find-findIndex\" class=\"headerlink\" title=\"find() findIndex()\"></a>find() findIndex()</h3><p><code>find</code>方法用于找出第一个符合条件的数组成员。它的参数是一个回调函数，所有数组成员依次执行该回调函数，直到找出第一个返回值为<code>true</code>的成员，然后返回该成员。如果没有符合条件的成员，则返回 undefined。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1, 4, -5, 10].find(n =&gt; n &lt; 0) // 返回第一个满足条件的成员</span><br><span class=\"line\">// -5</span><br></pre></td></tr></table></figure>\n<p><code>findIndex</code>方法的用法与 find 方法非常类似，返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回-1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1, 5, 10, 15].findIndex(function(value, index, arr) &#123;</span><br><span class=\"line\">  return value &gt; 9</span><br><span class=\"line\">&#125;) // 2</span><br></pre></td></tr></table></figure>\n<p>这两个方法都可以接受第二个参数，用来绑定回调函数的 this 对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">v</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> v &gt; <span class=\"keyword\">this</span>.age</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> person = &#123; <span class=\"attr\">name</span>: <span class=\"string\">'John'</span>, <span class=\"attr\">age</span>: <span class=\"number\">20</span> &#125;</span><br><span class=\"line\">;[<span class=\"number\">10</span>, <span class=\"number\">12</span>, <span class=\"number\">26</span>, <span class=\"number\">15</span>].find(f, person) <span class=\"comment\">// 26</span></span><br></pre></td></tr></table></figure>\n<p>上面的代码中，find 函数接收了第二个参数 person 对象，回调函数中的 this 对象指向 person 对象。<br>另外，这两个方法都可以发现 <code>NaN</code>，弥补了数组的 <code>indexOf</code> 方法的不足。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [NAN]</span><br><span class=\"line\">arr.indexOf(<span class=\"literal\">NaN</span>)</span><br><span class=\"line\"><span class=\"comment\">// -1</span></span><br><span class=\"line\">arr.findIndex(<span class=\"function\"><span class=\"params\">y</span> =&gt;</span> <span class=\"built_in\">Object</span>.is(<span class=\"literal\">NaN</span>, y))</span><br><span class=\"line\"><span class=\"comment\">// 0</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，indexOf 方法无法识别数组的 NaN 成员，但是 findIndex 方法可以借助 Object.is 方法做到。</p>\n<h3 id=\"fill\"><a href=\"#fill\" class=\"headerlink\" title=\"fill()\"></a>fill()</h3><p>方法使用给定值，填充一个数组。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&apos;a&apos;, &apos;b&apos;, &apos;c&apos;].fill(1) // [1, 1, 1]</span><br><span class=\"line\">new Array(3).fill(1) // [1, 1, 1]</span><br><span class=\"line\">//上面代码表明，fill方法用于空数组的初始化非常方便。数组中已有的元素，会被全部抹去。</span><br></pre></td></tr></table></figure>\n<p>fill 方法还可以接受第二个和第三个参数，用于指定填充的起始位置和结束位置。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&apos;a&apos;, &apos;b&apos;, &apos;c&apos;].fill(7, 1, 2) // [&apos;a&apos;, 7, &apos;c&apos;]</span><br><span class=\"line\">//上面代码表示，fill方法从 1 号位开始，向原数组填充 7，到 2 号位之前结束。</span><br></pre></td></tr></table></figure>\n<p>注意，如果填充的类型为对象，那么被赋值的是同一个内存地址的对象，而不是深拷贝对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">3</span>).fill(&#123; <span class=\"attr\">name</span>: <span class=\"string\">'Mike'</span> &#125;)</span><br><span class=\"line\">arr[<span class=\"number\">0</span>].name = <span class=\"string\">'Ben'</span></span><br><span class=\"line\">arr</span><br><span class=\"line\"><span class=\"comment\">// [&#123;name: \"Ben\"&#125;, &#123;name: \"Ben\"&#125;, &#123;name: \"Ben\"&#125;]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">3</span>).fill([])</span><br><span class=\"line\">arr[<span class=\"number\">0</span>].push(<span class=\"number\">5</span>)</span><br><span class=\"line\">arr</span><br><span class=\"line\"><span class=\"comment\">// [[5], [5], [5]]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"copyWithin\"><a href=\"#copyWithin\" class=\"headerlink\" title=\"copyWithin()\"></a>copyWithin()</h3><p>在当前数组内部，将指定位置的成员复制到其他位置（会覆盖原有成员），然后返回当前数组。会修改当前数组。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1, 2, 3, 4, 5].copyWithin(0, 3) // [4, 5, 3, 4, 5]</span><br><span class=\"line\">[1, 2, 3, 4, 5].copyWithin(0, 3, 4) // [4, 2, 3, 4, 5]</span><br><span class=\"line\">[1, 2, 3, 4, 5].copyWithin(0, -2, -1) //[4, 2, 3, 4, 5]</span><br></pre></td></tr></table></figure>\n<h3 id=\"flat-flatMap\"><a href=\"#flat-flatMap\" class=\"headerlink\" title=\"flat() flatMap()\"></a>flat() flatMap()</h3><p>数组的成员有时还是数组，Array.prototype.flat()用于将嵌套的数组“拉平”，变成一维的数组。该方法返回一个新数组，对原数据没有影响。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1, 2, [3, 4]].flat() // [1, 2, 3, 4]</span><br><span class=\"line\">[1, 2, [3, [4, 5]]].flat(2) // [1, 2, 3, 4, 5]</span><br><span class=\"line\">//flat()默认只会“拉平”一层，如果想要“拉平”多层的嵌套数组，可以将flat()方法的参数写成一个整数，表示想要拉平的层数，默认为1。</span><br><span class=\"line\">[1, [2, [3]]].flat(Infinity) // [1, 2, 3] 不管有多少层嵌套，都要转成一维数组</span><br><span class=\"line\">[1, 2, , 4, 5].flat() // [1, 2, 4, 5]会跳过空位。</span><br></pre></td></tr></table></figure>\n<p>flatMap()方法对原数组的每个成员执行一个函数（相当于执行 Array.prototype.map()），然后对返回值组成的数组执行 flat()方法。该方法返回一个新数组，不改变原数组。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 相当于 [[2, 4], [3, 6], [4, 8]].flat()</span><br><span class=\"line\">[2, 3, 4].flatMap(x =&gt; [x, x * 2])</span><br><span class=\"line\">// [2, 4, 3, 6, 4, 8]</span><br><span class=\"line\"></span><br><span class=\"line\">// 相当于 [[[2]], [[4]], [[6]], [[8]]].flat()</span><br><span class=\"line\">  [(1, 2, 3, 4)].flatMap(x =&gt; [[x * 2]])</span><br><span class=\"line\">// [[2], [4], [6], [8]]</span><br></pre></td></tr></table></figure>\n<h2 id=\"ES5\"><a href=\"#ES5\" class=\"headerlink\" title=\"ES5\"></a>ES5</h2><h4 id=\"concat\"><a href=\"#concat\" class=\"headerlink\" title=\"concat()\"></a>concat()</h4><p>concat()方法用于<code>连接</code>两个或多个数组。方法不会改变现在的数组，仅返回被连接生成的新数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = [<span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr3 = arr1.concat(arr2)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr1) <span class=\"comment\">//[1,2]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr3) <span class=\"comment\">//[1,2,3,4]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"join\"><a href=\"#join\" class=\"headerlink\" title=\"join()\"></a>join()</h3><p>join()方法用于把数组中的所有元素放入一个字符串。元素是通过指定的分隔符进行<code>分割</code>的。默认使用“,”分割。不改变原来数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.join()) <span class=\"comment\">//\"1,2\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr) <span class=\"comment\">//[1,2];</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"push\"><a href=\"#push\" class=\"headerlink\" title=\"push()\"></a>push()</h3><p>push()方法用于向数组<code>末尾添加</code>一个或多个元素。返回值为新数组的<code>length</code>。会改变原数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> newLength = arr.push(<span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newLength) <span class=\"comment\">//4</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr) <span class=\"comment\">//[1,2,3,4];</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"pop\"><a href=\"#pop\" class=\"headerlink\" title=\"pop()\"></a>pop()</h3><p>pop()方法用于<code>删除数组最后一个元素</code>。返回被删除的元素。会改变原数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.pop()) <span class=\"comment\">//4</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr) <span class=\"comment\">//[1,2,3];</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"shift\"><a href=\"#shift\" class=\"headerlink\" title=\"shift()\"></a>shift()</h3><p>shift()方法用于<code>删除数组第一个元素</code>。返回被删除的元素。会改变原数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.shift()) <span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr) <span class=\"comment\">//[2,3,4];</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"unshift\"><a href=\"#unshift\" class=\"headerlink\" title=\"unshift()\"></a>unshift()</h3><p>unshift()方法用于向<code>数组开头添加</code>一个或多个元素。返回新数组的 length。会改变原数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.unshift(<span class=\"number\">1</span>, <span class=\"number\">2</span>)) <span class=\"comment\">//4</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr) <span class=\"comment\">//[1,2,3,4];</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"slice\"><a href=\"#slice\" class=\"headerlink\" title=\"slice()\"></a>slice()</h3><p>slice()方法可从已有的数组中返回<code>选定</code>的元素。返回一个新的数组，包含从 start 到 end （不包括该元素）的 arrayObject 中的元素。不会改变原数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.slice(<span class=\"number\">1</span>, <span class=\"number\">3</span>)) <span class=\"comment\">//[2,3]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr) <span class=\"comment\">//[1,2,3,4];</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"splice\"><a href=\"#splice\" class=\"headerlink\" title=\"splice()\"></a>splice()</h3><p>splice()方法可用于<code>删除</code>元素，并且可选择添加新元素来<code>替换</code>被删除的元素，第一个参数表示删除操作的开始下标。第二个参数表示删除的个数，如果没有第三个参数，splice 用于删除元素。如果有第三，第四个参数，表示采用第三第四。。。参数来替换被删除第元素。方法返回被删除元素的数组，会改变原数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.splice(<span class=\"number\">1</span>, <span class=\"number\">1</span>)) <span class=\"comment\">//[2]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr) <span class=\"comment\">//[1,3,4];</span></span><br><span class=\"line\">arr.splice(<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>) <span class=\"comment\">//[]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr) <span class=\"comment\">//[1,8,9,3,4]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"sort\"><a href=\"#sort\" class=\"headerlink\" title=\"sort()\"></a>sort()</h3><p>sort()方法按照 Unicode code 位置<code>排序</code>，默认升序.会改变原数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">10</span>, <span class=\"number\">21</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.sort()) <span class=\"comment\">//[1,10,2,21]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"reverse\"><a href=\"#reverse\" class=\"headerlink\" title=\"reverse()\"></a>reverse()</h3><p>reverse()方法用于<code>颠倒元素顺序</code>。返回颠倒后的数组。会改变原数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.reverse()) <span class=\"comment\">//[3,2,1]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr) <span class=\"comment\">//[3,2,1]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"indexOf-lastIndexOf\"><a href=\"#indexOf-lastIndexOf\" class=\"headerlink\" title=\"indexOf() lastIndexOf()\"></a>indexOf() lastIndexOf()</h3><p>都接受两个参数，参数一为<code>查找</code>的值，参数二为查找的起始位置。查找结果不存在为-1，存在则返回下标。<br>indexOf()从前向后。<br>lastIndexOf()从后向前。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.indexOf(<span class=\"number\">2</span>)) <span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.indexOf(<span class=\"number\">9</span>)) <span class=\"comment\">//-1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.lastIndexOf(<span class=\"number\">2</span>)) <span class=\"comment\">//3</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.lastIndexOf(<span class=\"number\">2</span>, <span class=\"number\">2</span>)) <span class=\"comment\">//1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"every\"><a href=\"#every\" class=\"headerlink\" title=\"every()\"></a>every()</h3><p>every()方法对数组对每一项元素都运行给定的函数，如果每一项都返回 true、则返回 true</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ages = [<span class=\"number\">32</span>, <span class=\"number\">33</span>, <span class=\"number\">16</span>, <span class=\"number\">40</span>]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkAdult</span>(<span class=\"params\">age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> age &gt;= <span class=\"number\">18</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ages.every(checkAdult)) <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"some\"><a href=\"#some\" class=\"headerlink\" title=\"some()\"></a>some()</h3><p>some()方法对数组对每一项元素都运行给定的函数，如果任意一项返回 true、则返回 true</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ages = [<span class=\"number\">32</span>, <span class=\"number\">33</span>, <span class=\"number\">16</span>, <span class=\"number\">40</span>]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkAdult</span>(<span class=\"params\">age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> age &gt;= <span class=\"number\">18</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ages.some(checkAdult)) <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter()\"></a>filter()</h3><p>filter()方法对数组对每一项元素都运行给定的函数，返回结果为 true 的项组成的数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ages = [<span class=\"number\">32</span>, <span class=\"number\">33</span>, <span class=\"number\">16</span>, <span class=\"number\">40</span>]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkAdult</span>(<span class=\"params\">age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> age &gt;= <span class=\"number\">18</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ages.filter(checkAdult)) <span class=\"comment\">//[32, 33, 40]</span></span><br></pre></td></tr></table></figure>\n<p>配和 includes、some 和 every 来使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ages = [<span class=\"number\">32</span>, <span class=\"number\">33</span>, <span class=\"number\">16</span>, <span class=\"number\">40</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> value = [<span class=\"number\">32</span>, <span class=\"number\">33</span>]</span><br><span class=\"line\">ages.filter(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> value.every(<span class=\"function\"><span class=\"params\">it</span> =&gt;</span> it !== item))</span><br><span class=\"line\">ages.filter(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> value.includes(item))</span><br><span class=\"line\">ages.filter(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> !value.some(<span class=\"function\"><span class=\"params\">it</span> =&gt;</span> it === item))</span><br></pre></td></tr></table></figure>\n<h3 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map()\"></a>map()</h3><p>map()方法对数组对每一项元素都运行给定的函数，返回每次函数调用的结果组成一个新函数,不改变原数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ages = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> mapFun = ages.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x * <span class=\"number\">2</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mapFun) <span class=\"comment\">//[2, 4, 6，8]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ages) <span class=\"comment\">//[1, 2, 3, 4];</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"forEach-数组遍历\"><a href=\"#forEach-数组遍历\" class=\"headerlink\" title=\"forEach() 数组遍历\"></a>forEach() 数组遍历</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ages = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> ages2 = []</span><br><span class=\"line\"><span class=\"keyword\">var</span> mapFun = ages.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> ages2.push(item))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ages2) <span class=\"comment\">//[1, 2, 3, 4];</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ages) <span class=\"comment\">//[1, 2, 3, 4];</span></span><br></pre></td></tr></table></figure>\n<p>最后修改日期 2018 年 12 月 21 日</p>\n"},{"layout":"post","title":"webpack前进之路","date":"2018-11-05T16:00:00.000Z","_content":"\nwebpack 学习笔记\n最后更改日期：2019 年 02 月 23 日\n\n<!-- more -->\n\n`webpack` 学习笔记，参考了官网和很多的文章，由于当时没有及时记录，参考的文章就不一一列出了\n\n# webpack 学习之路\n\n## css\n\nWebpack 把所有的文件都都当做模块处理，JavaScript 代码，CSS 和 fonts 以及图片等等通过合适的 loader 都可以被处理。\ncss 有两个工具处理样式表，`css-loader` 和 `style-loader`, `css-loader`能够使用类似`@import` 和 `url(...)`的方法实现`require()`的功能，`style-loader`将所有的计算后的样式加入页面中，二者组合在一起使你能够把样式表嵌入 webpack 打包后的 JS 文件中。\n\n```js\n// 简单的css打包配置\nmodule: {\n  rules: [\n    {\n      test: /\\.css$/,\n      use: [\n        {\n          loader: 'style-loader'\n        },\n        {\n          loader: 'css-loader',\n          options: {\n            modules: true, // 指定启用css modules\n            localIdentName: '[name]__[local]--[hash:base64:5]' // 指定css的类名格式,防止全局类名的污染\n          }\n        }\n      ]\n    }\n  ]\n}\n```\n\n**css 与处理器**\ncss 处理 loaders:\n\n- `Less loader`\n- `Sass loader`\n- `Stylus loader`\n\n还有一个更大的处理平台`PostCSS`， 使用 \b 如下\n\n```js\nrules: [\n  {\n    test: /\\.css$/,\n    use: [\n      {\n        loader: 'style-loader'\n      },\n      {\n        loader: 'css-loader',\n        options: {\n          modules: true // 指定启用css modules\n        }\n      },\n      {\n        loader: 'postcss-loader'\n      }\n    ]\n  }\n]\n```\n\n## babel\n\n将 ES6 等高版本的 JS 转义成浏览器和 node 环境下可以被成功运行的 js 代码\n\n```js\n$ npm install babel-cli -g //全局安装\n$ cd .....\n$ pwd（li） // 看一下当前的环境/文件下包含的目录（防止进错目录了，最好确认一下比较稳妥）\n$ npm init // 初始化项目\n$ npm install babel-cli --save-dev //本地安装（当前文件夹或者环境中安装）\n```\n\n## babel 环境设置\n\n```js\n{\n    'presets': ['es2015'], //预置配置， 项目的依赖和最后输出的结果\n    'plugins': []  //插件\n}\n$ -o // --out-file 输出单文件\n$ -d // --out-dir 输出文件夹\n$ bable --watch src -d build //编译后热更新\n$ ctrl + c //终止服务\n```\n\n## browser-sync\n\n简单的浏览器同步测试工具（起一个服务）\n\n```js\n$ browser-sync start --server\n$ browser-sync start --help  // 了解该方法下有哪些具体的用法\n```\n\n## browserify 打包\n\nnode 在网页上三种 js 规范： commonjs \\ amd \\cmd\n\n1. `commonjs`: 基于后台的规范（系统架构、系统自动化），模块化定义，允许把 js 代码抽离出来，形成一个单独的文件。特点：同步，加载完成后，但是在浏览器中会导致浏览器假死的状况（网速慢，资源不存在等）\n2. `amd`:异步加载，成功和失败都有一个返回值，加载 css 后再引入模块\n3. `cmd`:异步加载-按需加载\n\n### webpack 核心概念\n\n本质上： 静态模块打包器\n核心概念：\n\n- 入口（entry）：内部依赖图的开始，也可以说就是需要被打包的目录\n- 输出（output）： 输出打包完成的文件，默认文件为 `./dist`, 主输出文件默认为 `./dist/main.js`\n- loader: 够让 webpack 处理那些非 JavaScript 文件，并且先将它们转换为有效 模块，然后添加到依赖图中\n- 插件（plugins）: 打包优化、资源管理和注入环境变量\n- 模式： dev、production 和 none\n\n### 入口\n\n用法： `entry: string| Array<string>`\n使用场景：\n\n1. 分离应用程序(app)和第三方库（vendor）入口\n\n```js\n entry: {\n    app: './src/app.js',\n    vendors: './src/vendors.js'\n  }\n```\n\n2.多页面应用：设置多个页面入口（但是我们目前的项目都是单页面入口）\n\n> 对零配置来说，默认入口文件夹为当前工程的根目录 `src` 文件夹\n\n```js\nwebpackProject\n│\n└───src\n│   │--index.js  //默认的入口文件\n```\n\n### 输出（output）\n\n注意点： 虽然可以存在多个 `入口` 但是只能指定一个 `输出` 配置，输出 `path` 必须是一个绝对路径，它是 [Node.js](http://nodejs.cn/api/path.html) 的一个核心模块。称之为路径模块，用于操作文件路径。\n\n```js\n   // 简单用法\n   output: {\n   filename: 'bundle.js', //[name].js\n   path: '/home/proj/public/assets' // _dirname + './dist'\n }\n // 将单独的 `bundle.js` 问价输出到指定目录中\n```\n\n> 零配置默认的输出 v\n\n```js\nwebpackProject\n│\n└───dist\n|   |--main.js\n //读取 src 目录下的 index.js文件，打包后默认输出到同级的 dist 目录下，文件名为 main.js\n```\n\n### 生成 Source Maps 调试\n\n在 webpack 的配置文件中配置 source maps，需要配置 `devtool`，它有四种不同的配置选项:\n\n1. source-map 生成一个完整且功能完全的文件，不压缩\n2. cheap-module-source-map 在一个单独的文件中生成一个不带 \b 映射的 map，调试不能对应到具体的列\n3. eval-source-map 使用 eval 打包源文件模块，在同一个文件中生成干净的完整的 `source map`， 在开发阶段这是一个非常好的选项，在生产阶段则一定不要启用这个选项\n4. cheap-module-eval-source-map 这是在打包文件时最快的生成 source map 的方法，生成的 Source Map 会和打包后的 JavaScript 文件同行显示，没有列映射\n\n### 热更新\n\n```js\nnpm install --save-dev webpack-dev-server\n```\n\n> 配置\n\n```js\ndevServer: {\n    contentBase: \"./dist\",//本地服务器所加载的页面所在的目录\n    historyApiFallback: true,//不跳转\n    inline: true,  //实时刷新\n    port: 8080   // 端口号： 默认8080\n  }\n```\n\n### loaders\n\n主要用于对模块的源代码进行转换。\n\n> 在 webpack 打包中,会对入口文件的直接依赖或者间接依赖进行解析,但是 webpack 只能解析某些文件(比如 `.js` 结尾的文件)在 4.0 之后 `.txt` 、 `.json` 文件都能支持解析。而 `loader` 做的事情就是把其它类型的所有文件转换为 `webpack` 能够处理的模块。然后你就可以利用 `webpack` 的打包能力，对它们进行处理。\n\n**loaders 的配置具体包括这几个方面**\n\n- `test`: 一个用以匹配 loaders 所处理文件的拓展名的正则表达式（必须）\n- `loader`: loader 的名称\n- `include/exclude`: 手动添加必须处理的文件（文件夹）或屏蔽不需要处理的文件（文件夹）（可选）；\n- `query`: 为 loaders 提供额外的设置选项（可选）\n\n推荐用法： 在`weboack.confing.js` 中配置指定 loader， `module.rules` 允许在配置中指定多个 loader。\n\n```js\nmodule: {\n  rules: [\n    { test: /\\.css$/, use: 'css-loader' },\n    {\n      test: /\\.css$/,\n      use: [\n        { loader: 'style-loader' },\n        {\n          loader: 'css-loader',\n          options: {\n            modules: true\n          }\n        }\n      ]\n    }\n  ]\n}\n```\n\n> 简单的使用方法： 在项目中添加了一个图片\n\n```js\nwebpackProject\n│\n└───src\n|   |--image.jpeg  添加一个图片\n│   │--util.js\n\n// util.js 文件\nimport myImage from  './image.jpeg'\n\nconst img = new Image()\nimg.src = myImage\n....\n\n```\n\n> 因为 `webpack` 并不支持对图片的解析,需要配置相应的 loader 做转换处理为 `webpack` 打包的文件格式, webpack 能够解析任何 import 导入的模块，比如.css, .jpg 文件等。\n\n```js\nconst config = {\n  module: {\n    rules: [\n      {test: /\\.jpeg$/, use: 'url-loader'}\n      //所有.jpg格式的图片都会被转化, use: 解析模块对应的解析器(loader)\n  }\n}\n```\n\n### 插件(plugins)\n\n插件目的在于解决 `loader` 无法实现的其他事。\n\n> loader: 解析默写特定的文件， plugins： 几乎所有的自动化操作都通过插件来完成\n\n由于插件可以携带参数/选项，必须在 `webpack` 配置中，向 `plugins` 属性传入 `new` 实例。\n\n```js\nplugins: [\n  new webpack.optimize.UglifyJsPlugin(),\n  new HtmlWebpackPlugin({ template: './src/index.html' }) //自动引用你打包后的JS文件的新index.html\n  new webpack.HotModuleReplacementPlugin()//热加载插件\n]\n```\n\n### 配置(configuration)\n\n> plugin 和 loader 的区别是，loader 是在 import 时根据不同的文件名，匹配不同的 loader 对这个文件做处理，而 plugin, 关注的不是文件的格式，而是在编译的各个阶段，会触发不同的事件，让你可以干预每个编译阶段。\n\nwebpack 的配置文件，是导出一个对象的 JavaScript 文件。此对象，由 webpack 根据对象定义的属性进行解析。\n如果 webpack.config.js 存在，则 webpack 命令将默认选择使用它。但是在生产环境和开发环境中所需要配置的 webpack 是不一致的，所以现在将 webpack 的配置更改为一个公用文件和两个环境文件，`webpack.common.js`、`webpack.dev.js`和 `webpack.prod.js`，使用`webpack-merge`将不同的配置结合在一起。\n\n```js\nconst merge = require('webpack-merge')\nconst common = require('./webpack.common')\n\nmodule.exports = merge(common, {\n  mode: 'development',\n  devtool: 'inline-source-map',\n  devServer: {\n    contentBase: './dist'\n  }\n})\n```\n\n### 模块(modules)\n\n## 项目常用配置\n\n- 设置静态资源的 url 路径前缀\n- 各个页面分开打包\n- 配置 favicon\n- 代码中插入环境变量\n- 简化 import 路径\n- 使用 postcss 的插件 autoprefixer 自动创建 css 的 vendor prefixes\n\n### 设置静态资源的 URL 路径前缀\n\n> 一般我们的项目开发环境中，我们的资源文件都是在根目录中，8080/index.js，但是在生产环境中，需要考虑到缓存控制和 CDN，一版会给 url 加一个前缀： 8080/m/index.js\n\n```js\n{\n  output: {\n    publicPath: '/m/'\n  }\n}\n\n// webpack配置\n\n{\n  output: {\n    /*\n    代码中引用的文件（js、css、图片等）会根据配置合并为一个或多个包，我们称一个包为 chunk。\n    每个 chunk 包含多个 modules。无论是否是 js，webpack 都将引入的文件视为一个 module。\n    chunkFilename 用来配置这个 chunk 输出的文件名。\n\n    [chunkhash]：这个 chunk 的 hash 值，文件发生变化时该值也会变。使用 [chunkhash] 作为文件名可以防止浏览器读取旧的缓存文件。\n\n    还有一个占位符 [id]，编译时每个 chunk 会有一个id。\n    我们在这里不使用它，因为这个 id 是个递增的数字，增加或减少一个chunk，都可能导致其他 chunk 的 id 发生改变，导致缓存失效。\n    */\n    chunkFilename: '[id].[chunkhash].js',\n  }\n}\n```\n\n### 各个页面分开打包\n\n应用路由时可以按需加载，使用 async/await 配合`import`使用\n\n```js\nimport Test = () => import('@/views/test')\n```\n\n### 配置 favicon\n\n> 网页图标： 在 src 目录中放一张 favicon.png，然后 src/index.html 中插入\n\n```html\n<link rel=\"icon\" type=\"image/png\" href=\"favicon.png\" />\n```\n\nwebpack 配置：\n\n```js\n{\n  module: {\n    rules: [\n      {\n        test: /\\.html$/,\n        use: [\n          {\n            loader: 'html-loader',\n            options: {\n              /*\n              html-loader 接受 attrs 参数，表示什么标签的什么属性需要调用 webpack 的 loader 进行打包。\n              比如 <img> 标签的 src 属性，webpack 会把 <img> 引用的图片打包，然后 src 的属性值替换为打包后的路径。\n              使用什么 loader 代码，同样是在 module.rules 定义中使用匹配的规则。\n              如果 html-loader 不指定 attrs 参数，默认值是 img:src, 意味着会默认打包 <img> 标签的图片。\n              这里我们加上 <link> 标签的 href 属性，用来打包入口 index.html 引入的 favicon.png 文件。\n              */\n              attrs: ['img:src', 'link:href']\n            }\n          }\n        ]\n      },\n\n      {\n        /*\n        匹配 favicon.png\n        上面的 html-loader 会把入口 index.html 引用的 favicon.png 图标文件解析出来进行打包\n        打包规则就按照这里指定的 loader 执行\n        */\n        test: /favicon\\.png$/,\n\n        use: [\n          {\n            // 使用 file-loader\n            loader: 'file-loader',\n            options: {\n              /*\n              name：指定文件输出名\n              [hash] 为源文件的hash值，[ext] 为后缀。\n              */\n              name: '[hash].[ext]'\n            }\n          }\n        ]\n      },\n\n      // 图片文件的加载配置增加一个 exclude 参数\n      {\n        test: /\\.(png|jpg|jpeg|gif|eot|ttf|woff|woff2|svg|svgz)(\\?.+)?$/,\n\n        // 排除 favicon.png, 因为它已经由上面的 loader 处理了。如果不排除掉，它会被这个 loader 再处理一遍\n        exclude: /favicon\\.png$/,\n\n        use: [\n          {\n            loader: 'url-loader',\n            options: {\n              limit: 10000\n            }\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n","source":"_posts/2018-10-20-webpack-learning.md","raw":"---\nlayout: post\ntitle: webpack前进之路\ndate: 2018-11-06\ncategories: webpack\ntags:\n  - webpack\n  - Javascript\n  -\n---\n\nwebpack 学习笔记\n最后更改日期：2019 年 02 月 23 日\n\n<!-- more -->\n\n`webpack` 学习笔记，参考了官网和很多的文章，由于当时没有及时记录，参考的文章就不一一列出了\n\n# webpack 学习之路\n\n## css\n\nWebpack 把所有的文件都都当做模块处理，JavaScript 代码，CSS 和 fonts 以及图片等等通过合适的 loader 都可以被处理。\ncss 有两个工具处理样式表，`css-loader` 和 `style-loader`, `css-loader`能够使用类似`@import` 和 `url(...)`的方法实现`require()`的功能，`style-loader`将所有的计算后的样式加入页面中，二者组合在一起使你能够把样式表嵌入 webpack 打包后的 JS 文件中。\n\n```js\n// 简单的css打包配置\nmodule: {\n  rules: [\n    {\n      test: /\\.css$/,\n      use: [\n        {\n          loader: 'style-loader'\n        },\n        {\n          loader: 'css-loader',\n          options: {\n            modules: true, // 指定启用css modules\n            localIdentName: '[name]__[local]--[hash:base64:5]' // 指定css的类名格式,防止全局类名的污染\n          }\n        }\n      ]\n    }\n  ]\n}\n```\n\n**css 与处理器**\ncss 处理 loaders:\n\n- `Less loader`\n- `Sass loader`\n- `Stylus loader`\n\n还有一个更大的处理平台`PostCSS`， 使用 \b 如下\n\n```js\nrules: [\n  {\n    test: /\\.css$/,\n    use: [\n      {\n        loader: 'style-loader'\n      },\n      {\n        loader: 'css-loader',\n        options: {\n          modules: true // 指定启用css modules\n        }\n      },\n      {\n        loader: 'postcss-loader'\n      }\n    ]\n  }\n]\n```\n\n## babel\n\n将 ES6 等高版本的 JS 转义成浏览器和 node 环境下可以被成功运行的 js 代码\n\n```js\n$ npm install babel-cli -g //全局安装\n$ cd .....\n$ pwd（li） // 看一下当前的环境/文件下包含的目录（防止进错目录了，最好确认一下比较稳妥）\n$ npm init // 初始化项目\n$ npm install babel-cli --save-dev //本地安装（当前文件夹或者环境中安装）\n```\n\n## babel 环境设置\n\n```js\n{\n    'presets': ['es2015'], //预置配置， 项目的依赖和最后输出的结果\n    'plugins': []  //插件\n}\n$ -o // --out-file 输出单文件\n$ -d // --out-dir 输出文件夹\n$ bable --watch src -d build //编译后热更新\n$ ctrl + c //终止服务\n```\n\n## browser-sync\n\n简单的浏览器同步测试工具（起一个服务）\n\n```js\n$ browser-sync start --server\n$ browser-sync start --help  // 了解该方法下有哪些具体的用法\n```\n\n## browserify 打包\n\nnode 在网页上三种 js 规范： commonjs \\ amd \\cmd\n\n1. `commonjs`: 基于后台的规范（系统架构、系统自动化），模块化定义，允许把 js 代码抽离出来，形成一个单独的文件。特点：同步，加载完成后，但是在浏览器中会导致浏览器假死的状况（网速慢，资源不存在等）\n2. `amd`:异步加载，成功和失败都有一个返回值，加载 css 后再引入模块\n3. `cmd`:异步加载-按需加载\n\n### webpack 核心概念\n\n本质上： 静态模块打包器\n核心概念：\n\n- 入口（entry）：内部依赖图的开始，也可以说就是需要被打包的目录\n- 输出（output）： 输出打包完成的文件，默认文件为 `./dist`, 主输出文件默认为 `./dist/main.js`\n- loader: 够让 webpack 处理那些非 JavaScript 文件，并且先将它们转换为有效 模块，然后添加到依赖图中\n- 插件（plugins）: 打包优化、资源管理和注入环境变量\n- 模式： dev、production 和 none\n\n### 入口\n\n用法： `entry: string| Array<string>`\n使用场景：\n\n1. 分离应用程序(app)和第三方库（vendor）入口\n\n```js\n entry: {\n    app: './src/app.js',\n    vendors: './src/vendors.js'\n  }\n```\n\n2.多页面应用：设置多个页面入口（但是我们目前的项目都是单页面入口）\n\n> 对零配置来说，默认入口文件夹为当前工程的根目录 `src` 文件夹\n\n```js\nwebpackProject\n│\n└───src\n│   │--index.js  //默认的入口文件\n```\n\n### 输出（output）\n\n注意点： 虽然可以存在多个 `入口` 但是只能指定一个 `输出` 配置，输出 `path` 必须是一个绝对路径，它是 [Node.js](http://nodejs.cn/api/path.html) 的一个核心模块。称之为路径模块，用于操作文件路径。\n\n```js\n   // 简单用法\n   output: {\n   filename: 'bundle.js', //[name].js\n   path: '/home/proj/public/assets' // _dirname + './dist'\n }\n // 将单独的 `bundle.js` 问价输出到指定目录中\n```\n\n> 零配置默认的输出 v\n\n```js\nwebpackProject\n│\n└───dist\n|   |--main.js\n //读取 src 目录下的 index.js文件，打包后默认输出到同级的 dist 目录下，文件名为 main.js\n```\n\n### 生成 Source Maps 调试\n\n在 webpack 的配置文件中配置 source maps，需要配置 `devtool`，它有四种不同的配置选项:\n\n1. source-map 生成一个完整且功能完全的文件，不压缩\n2. cheap-module-source-map 在一个单独的文件中生成一个不带 \b 映射的 map，调试不能对应到具体的列\n3. eval-source-map 使用 eval 打包源文件模块，在同一个文件中生成干净的完整的 `source map`， 在开发阶段这是一个非常好的选项，在生产阶段则一定不要启用这个选项\n4. cheap-module-eval-source-map 这是在打包文件时最快的生成 source map 的方法，生成的 Source Map 会和打包后的 JavaScript 文件同行显示，没有列映射\n\n### 热更新\n\n```js\nnpm install --save-dev webpack-dev-server\n```\n\n> 配置\n\n```js\ndevServer: {\n    contentBase: \"./dist\",//本地服务器所加载的页面所在的目录\n    historyApiFallback: true,//不跳转\n    inline: true,  //实时刷新\n    port: 8080   // 端口号： 默认8080\n  }\n```\n\n### loaders\n\n主要用于对模块的源代码进行转换。\n\n> 在 webpack 打包中,会对入口文件的直接依赖或者间接依赖进行解析,但是 webpack 只能解析某些文件(比如 `.js` 结尾的文件)在 4.0 之后 `.txt` 、 `.json` 文件都能支持解析。而 `loader` 做的事情就是把其它类型的所有文件转换为 `webpack` 能够处理的模块。然后你就可以利用 `webpack` 的打包能力，对它们进行处理。\n\n**loaders 的配置具体包括这几个方面**\n\n- `test`: 一个用以匹配 loaders 所处理文件的拓展名的正则表达式（必须）\n- `loader`: loader 的名称\n- `include/exclude`: 手动添加必须处理的文件（文件夹）或屏蔽不需要处理的文件（文件夹）（可选）；\n- `query`: 为 loaders 提供额外的设置选项（可选）\n\n推荐用法： 在`weboack.confing.js` 中配置指定 loader， `module.rules` 允许在配置中指定多个 loader。\n\n```js\nmodule: {\n  rules: [\n    { test: /\\.css$/, use: 'css-loader' },\n    {\n      test: /\\.css$/,\n      use: [\n        { loader: 'style-loader' },\n        {\n          loader: 'css-loader',\n          options: {\n            modules: true\n          }\n        }\n      ]\n    }\n  ]\n}\n```\n\n> 简单的使用方法： 在项目中添加了一个图片\n\n```js\nwebpackProject\n│\n└───src\n|   |--image.jpeg  添加一个图片\n│   │--util.js\n\n// util.js 文件\nimport myImage from  './image.jpeg'\n\nconst img = new Image()\nimg.src = myImage\n....\n\n```\n\n> 因为 `webpack` 并不支持对图片的解析,需要配置相应的 loader 做转换处理为 `webpack` 打包的文件格式, webpack 能够解析任何 import 导入的模块，比如.css, .jpg 文件等。\n\n```js\nconst config = {\n  module: {\n    rules: [\n      {test: /\\.jpeg$/, use: 'url-loader'}\n      //所有.jpg格式的图片都会被转化, use: 解析模块对应的解析器(loader)\n  }\n}\n```\n\n### 插件(plugins)\n\n插件目的在于解决 `loader` 无法实现的其他事。\n\n> loader: 解析默写特定的文件， plugins： 几乎所有的自动化操作都通过插件来完成\n\n由于插件可以携带参数/选项，必须在 `webpack` 配置中，向 `plugins` 属性传入 `new` 实例。\n\n```js\nplugins: [\n  new webpack.optimize.UglifyJsPlugin(),\n  new HtmlWebpackPlugin({ template: './src/index.html' }) //自动引用你打包后的JS文件的新index.html\n  new webpack.HotModuleReplacementPlugin()//热加载插件\n]\n```\n\n### 配置(configuration)\n\n> plugin 和 loader 的区别是，loader 是在 import 时根据不同的文件名，匹配不同的 loader 对这个文件做处理，而 plugin, 关注的不是文件的格式，而是在编译的各个阶段，会触发不同的事件，让你可以干预每个编译阶段。\n\nwebpack 的配置文件，是导出一个对象的 JavaScript 文件。此对象，由 webpack 根据对象定义的属性进行解析。\n如果 webpack.config.js 存在，则 webpack 命令将默认选择使用它。但是在生产环境和开发环境中所需要配置的 webpack 是不一致的，所以现在将 webpack 的配置更改为一个公用文件和两个环境文件，`webpack.common.js`、`webpack.dev.js`和 `webpack.prod.js`，使用`webpack-merge`将不同的配置结合在一起。\n\n```js\nconst merge = require('webpack-merge')\nconst common = require('./webpack.common')\n\nmodule.exports = merge(common, {\n  mode: 'development',\n  devtool: 'inline-source-map',\n  devServer: {\n    contentBase: './dist'\n  }\n})\n```\n\n### 模块(modules)\n\n## 项目常用配置\n\n- 设置静态资源的 url 路径前缀\n- 各个页面分开打包\n- 配置 favicon\n- 代码中插入环境变量\n- 简化 import 路径\n- 使用 postcss 的插件 autoprefixer 自动创建 css 的 vendor prefixes\n\n### 设置静态资源的 URL 路径前缀\n\n> 一般我们的项目开发环境中，我们的资源文件都是在根目录中，8080/index.js，但是在生产环境中，需要考虑到缓存控制和 CDN，一版会给 url 加一个前缀： 8080/m/index.js\n\n```js\n{\n  output: {\n    publicPath: '/m/'\n  }\n}\n\n// webpack配置\n\n{\n  output: {\n    /*\n    代码中引用的文件（js、css、图片等）会根据配置合并为一个或多个包，我们称一个包为 chunk。\n    每个 chunk 包含多个 modules。无论是否是 js，webpack 都将引入的文件视为一个 module。\n    chunkFilename 用来配置这个 chunk 输出的文件名。\n\n    [chunkhash]：这个 chunk 的 hash 值，文件发生变化时该值也会变。使用 [chunkhash] 作为文件名可以防止浏览器读取旧的缓存文件。\n\n    还有一个占位符 [id]，编译时每个 chunk 会有一个id。\n    我们在这里不使用它，因为这个 id 是个递增的数字，增加或减少一个chunk，都可能导致其他 chunk 的 id 发生改变，导致缓存失效。\n    */\n    chunkFilename: '[id].[chunkhash].js',\n  }\n}\n```\n\n### 各个页面分开打包\n\n应用路由时可以按需加载，使用 async/await 配合`import`使用\n\n```js\nimport Test = () => import('@/views/test')\n```\n\n### 配置 favicon\n\n> 网页图标： 在 src 目录中放一张 favicon.png，然后 src/index.html 中插入\n\n```html\n<link rel=\"icon\" type=\"image/png\" href=\"favicon.png\" />\n```\n\nwebpack 配置：\n\n```js\n{\n  module: {\n    rules: [\n      {\n        test: /\\.html$/,\n        use: [\n          {\n            loader: 'html-loader',\n            options: {\n              /*\n              html-loader 接受 attrs 参数，表示什么标签的什么属性需要调用 webpack 的 loader 进行打包。\n              比如 <img> 标签的 src 属性，webpack 会把 <img> 引用的图片打包，然后 src 的属性值替换为打包后的路径。\n              使用什么 loader 代码，同样是在 module.rules 定义中使用匹配的规则。\n              如果 html-loader 不指定 attrs 参数，默认值是 img:src, 意味着会默认打包 <img> 标签的图片。\n              这里我们加上 <link> 标签的 href 属性，用来打包入口 index.html 引入的 favicon.png 文件。\n              */\n              attrs: ['img:src', 'link:href']\n            }\n          }\n        ]\n      },\n\n      {\n        /*\n        匹配 favicon.png\n        上面的 html-loader 会把入口 index.html 引用的 favicon.png 图标文件解析出来进行打包\n        打包规则就按照这里指定的 loader 执行\n        */\n        test: /favicon\\.png$/,\n\n        use: [\n          {\n            // 使用 file-loader\n            loader: 'file-loader',\n            options: {\n              /*\n              name：指定文件输出名\n              [hash] 为源文件的hash值，[ext] 为后缀。\n              */\n              name: '[hash].[ext]'\n            }\n          }\n        ]\n      },\n\n      // 图片文件的加载配置增加一个 exclude 参数\n      {\n        test: /\\.(png|jpg|jpeg|gif|eot|ttf|woff|woff2|svg|svgz)(\\?.+)?$/,\n\n        // 排除 favicon.png, 因为它已经由上面的 loader 处理了。如果不排除掉，它会被这个 loader 再处理一遍\n        exclude: /favicon\\.png$/,\n\n        use: [\n          {\n            loader: 'url-loader',\n            options: {\n              limit: 10000\n            }\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n","slug":"2018-10-20-webpack-learning","published":1,"updated":"2019-04-22T02:54:10.758Z","comments":1,"photos":[],"link":"","_id":"cjvbyxkik003iw0oob44j0p2a","content":"<p>webpack 学习笔记<br>最后更改日期：2019 年 02 月 23 日</p>\n<a id=\"more\"></a>\n<p><code>webpack</code> 学习笔记，参考了官网和很多的文章，由于当时没有及时记录，参考的文章就不一一列出了</p>\n<h1 id=\"webpack-学习之路\"><a href=\"#webpack-学习之路\" class=\"headerlink\" title=\"webpack 学习之路\"></a>webpack 学习之路</h1><h2 id=\"css\"><a href=\"#css\" class=\"headerlink\" title=\"css\"></a>css</h2><p>Webpack 把所有的文件都都当做模块处理，JavaScript 代码，CSS 和 fonts 以及图片等等通过合适的 loader 都可以被处理。<br>css 有两个工具处理样式表，<code>css-loader</code> 和 <code>style-loader</code>, <code>css-loader</code>能够使用类似<code>@import</code> 和 <code>url(...)</code>的方法实现<code>require()</code>的功能，<code>style-loader</code>将所有的计算后的样式加入页面中，二者组合在一起使你能够把样式表嵌入 webpack 打包后的 JS 文件中。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 简单的css打包配置</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">  rules: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">      use: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          loader: <span class=\"string\">'style-loader'</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          loader: <span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">          options: &#123;</span><br><span class=\"line\">            modules: <span class=\"literal\">true</span>, <span class=\"comment\">// 指定启用css modules</span></span><br><span class=\"line\">            localIdentName: <span class=\"string\">'[name]__[local]--[hash:base64:5]'</span> <span class=\"comment\">// 指定css的类名格式,防止全局类名的污染</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>css 与处理器</strong><br>css 处理 loaders:</p>\n<ul>\n<li><code>Less loader</code></li>\n<li><code>Sass loader</code></li>\n<li><code>Stylus loader</code></li>\n</ul>\n<p>还有一个更大的处理平台<code>PostCSS</code>， 使用 \b 如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rules: [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">    use: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        loader: <span class=\"string\">'style-loader'</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        loader: <span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">        options: &#123;</span><br><span class=\"line\">          modules: <span class=\"literal\">true</span> <span class=\"comment\">// 指定启用css modules</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        loader: <span class=\"string\">'postcss-loader'</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h2 id=\"babel\"><a href=\"#babel\" class=\"headerlink\" title=\"babel\"></a>babel</h2><p>将 ES6 等高版本的 JS 转义成浏览器和 node 环境下可以被成功运行的 js 代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install babel-cli -g <span class=\"comment\">//全局安装</span></span><br><span class=\"line\">$ cd .....</span><br><span class=\"line\">$ pwd（li） <span class=\"comment\">// 看一下当前的环境/文件下包含的目录（防止进错目录了，最好确认一下比较稳妥）</span></span><br><span class=\"line\">$ npm init <span class=\"comment\">// 初始化项目</span></span><br><span class=\"line\">$ npm install babel-cli --save-dev <span class=\"comment\">//本地安装（当前文件夹或者环境中安装）</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"babel-环境设置\"><a href=\"#babel-环境设置\" class=\"headerlink\" title=\"babel 环境设置\"></a>babel 环境设置</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">'presets'</span>: [<span class=\"string\">'es2015'</span>], <span class=\"comment\">//预置配置， 项目的依赖和最后输出的结果</span></span><br><span class=\"line\">    <span class=\"string\">'plugins'</span>: []  <span class=\"comment\">//插件</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$ -o <span class=\"comment\">// --out-file 输出单文件</span></span><br><span class=\"line\">$ -d <span class=\"comment\">// --out-dir 输出文件夹</span></span><br><span class=\"line\">$ bable --watch src -d build <span class=\"comment\">//编译后热更新</span></span><br><span class=\"line\">$ ctrl + c <span class=\"comment\">//终止服务</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"browser-sync\"><a href=\"#browser-sync\" class=\"headerlink\" title=\"browser-sync\"></a>browser-sync</h2><p>简单的浏览器同步测试工具（起一个服务）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ browser-sync start --server</span><br><span class=\"line\">$ browser-sync start --help  <span class=\"comment\">// 了解该方法下有哪些具体的用法</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"browserify-打包\"><a href=\"#browserify-打包\" class=\"headerlink\" title=\"browserify 打包\"></a>browserify 打包</h2><p>node 在网页上三种 js 规范： commonjs \\ amd \\cmd</p>\n<ol>\n<li><code>commonjs</code>: 基于后台的规范（系统架构、系统自动化），模块化定义，允许把 js 代码抽离出来，形成一个单独的文件。特点：同步，加载完成后，但是在浏览器中会导致浏览器假死的状况（网速慢，资源不存在等）</li>\n<li><code>amd</code>:异步加载，成功和失败都有一个返回值，加载 css 后再引入模块</li>\n<li><code>cmd</code>:异步加载-按需加载</li>\n</ol>\n<h3 id=\"webpack-核心概念\"><a href=\"#webpack-核心概念\" class=\"headerlink\" title=\"webpack 核心概念\"></a>webpack 核心概念</h3><p>本质上： 静态模块打包器<br>核心概念：</p>\n<ul>\n<li>入口（entry）：内部依赖图的开始，也可以说就是需要被打包的目录</li>\n<li>输出（output）： 输出打包完成的文件，默认文件为 <code>./dist</code>, 主输出文件默认为 <code>./dist/main.js</code></li>\n<li>loader: 够让 webpack 处理那些非 JavaScript 文件，并且先将它们转换为有效 模块，然后添加到依赖图中</li>\n<li>插件（plugins）: 打包优化、资源管理和注入环境变量</li>\n<li>模式： dev、production 和 none</li>\n</ul>\n<h3 id=\"入口\"><a href=\"#入口\" class=\"headerlink\" title=\"入口\"></a>入口</h3><p>用法： <code>entry: string| Array&lt;string&gt;</code><br>使用场景：</p>\n<ol>\n<li>分离应用程序(app)和第三方库（vendor）入口</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">entry: &#123;</span><br><span class=\"line\">   app: <span class=\"string\">'./src/app.js'</span>,</span><br><span class=\"line\">   vendors: <span class=\"string\">'./src/vendors.js'</span></span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>2.多页面应用：设置多个页面入口（但是我们目前的项目都是单页面入口）</p>\n<blockquote>\n<p>对零配置来说，默认入口文件夹为当前工程的根目录 <code>src</code> 文件夹</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpackProject</span><br><span class=\"line\">│</span><br><span class=\"line\">└───src</span><br><span class=\"line\">│   │--index.js  <span class=\"comment\">//默认的入口文件</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"输出（output）\"><a href=\"#输出（output）\" class=\"headerlink\" title=\"输出（output）\"></a>输出（output）</h3><p>注意点： 虽然可以存在多个 <code>入口</code> 但是只能指定一个 <code>输出</code> 配置，输出 <code>path</code> 必须是一个绝对路径，它是 <a href=\"http://nodejs.cn/api/path.html\" target=\"_blank\" rel=\"noopener\">Node.js</a> 的一个核心模块。称之为路径模块，用于操作文件路径。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">// 简单用法</span></span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">  filename: <span class=\"string\">'bundle.js'</span>, <span class=\"comment\">//[name].js</span></span><br><span class=\"line\">  path: <span class=\"string\">'/home/proj/public/assets'</span> <span class=\"comment\">// _dirname + './dist'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 将单独的 `bundle.js` 问价输出到指定目录中</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>零配置默认的输出 v</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpackProject</span><br><span class=\"line\">│</span><br><span class=\"line\">└───dist</span><br><span class=\"line\">|   |--main.js</span><br><span class=\"line\"> <span class=\"comment\">//读取 src 目录下的 index.js文件，打包后默认输出到同级的 dist 目录下，文件名为 main.js</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"生成-Source-Maps-调试\"><a href=\"#生成-Source-Maps-调试\" class=\"headerlink\" title=\"生成 Source Maps 调试\"></a>生成 Source Maps 调试</h3><p>在 webpack 的配置文件中配置 source maps，需要配置 <code>devtool</code>，它有四种不同的配置选项:</p>\n<ol>\n<li>source-map 生成一个完整且功能完全的文件，不压缩</li>\n<li>cheap-module-source-map 在一个单独的文件中生成一个不带 \b 映射的 map，调试不能对应到具体的列</li>\n<li>eval-source-map 使用 eval 打包源文件模块，在同一个文件中生成干净的完整的 <code>source map</code>， 在开发阶段这是一个非常好的选项，在生产阶段则一定不要启用这个选项</li>\n<li>cheap-module-eval-source-map 这是在打包文件时最快的生成 source map 的方法，生成的 Source Map 会和打包后的 JavaScript 文件同行显示，没有列映射</li>\n</ol>\n<h3 id=\"热更新\"><a href=\"#热更新\" class=\"headerlink\" title=\"热更新\"></a>热更新</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev webpack-dev-server</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>配置</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">devServer: &#123;</span><br><span class=\"line\">    contentBase: <span class=\"string\">\"./dist\"</span>,<span class=\"comment\">//本地服务器所加载的页面所在的目录</span></span><br><span class=\"line\">    historyApiFallback: <span class=\"literal\">true</span>,<span class=\"comment\">//不跳转</span></span><br><span class=\"line\">    inline: <span class=\"literal\">true</span>,  <span class=\"comment\">//实时刷新</span></span><br><span class=\"line\">    port: <span class=\"number\">8080</span>   <span class=\"comment\">// 端口号： 默认8080</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"loaders\"><a href=\"#loaders\" class=\"headerlink\" title=\"loaders\"></a>loaders</h3><p>主要用于对模块的源代码进行转换。</p>\n<blockquote>\n<p>在 webpack 打包中,会对入口文件的直接依赖或者间接依赖进行解析,但是 webpack 只能解析某些文件(比如 <code>.js</code> 结尾的文件)在 4.0 之后 <code>.txt</code> 、 <code>.json</code> 文件都能支持解析。而 <code>loader</code> 做的事情就是把其它类型的所有文件转换为 <code>webpack</code> 能够处理的模块。然后你就可以利用 <code>webpack</code> 的打包能力，对它们进行处理。</p>\n</blockquote>\n<p><strong>loaders 的配置具体包括这几个方面</strong></p>\n<ul>\n<li><code>test</code>: 一个用以匹配 loaders 所处理文件的拓展名的正则表达式（必须）</li>\n<li><code>loader</code>: loader 的名称</li>\n<li><code>include/exclude</code>: 手动添加必须处理的文件（文件夹）或屏蔽不需要处理的文件（文件夹）（可选）；</li>\n<li><code>query</code>: 为 loaders 提供额外的设置选项（可选）</li>\n</ul>\n<p>推荐用法： 在<code>weboack.confing.js</code> 中配置指定 loader， <code>module.rules</code> 允许在配置中指定多个 loader。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">  rules: [</span><br><span class=\"line\">    &#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>, <span class=\"attr\">use</span>: <span class=\"string\">'css-loader'</span> &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">      use: [</span><br><span class=\"line\">        &#123; <span class=\"attr\">loader</span>: <span class=\"string\">'style-loader'</span> &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          loader: <span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">          options: &#123;</span><br><span class=\"line\">            modules: <span class=\"literal\">true</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>简单的使用方法： 在项目中添加了一个图片</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpackProject</span><br><span class=\"line\">│</span><br><span class=\"line\">└───src</span><br><span class=\"line\">|   |--image.jpeg  添加一个图片</span><br><span class=\"line\">│   │--util.js</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// util.js 文件</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> myImage <span class=\"keyword\">from</span>  <span class=\"string\">'./image.jpeg'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> img = <span class=\"keyword\">new</span> Image()</span><br><span class=\"line\">img.src = myImage</span><br><span class=\"line\">....</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>因为 <code>webpack</code> 并不支持对图片的解析,需要配置相应的 loader 做转换处理为 <code>webpack</code> 打包的文件格式, webpack 能够解析任何 import 导入的模块，比如.css, .jpg 文件等。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> config = &#123;</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;<span class=\"attr\">test</span>: <span class=\"regexp\">/\\.jpeg$/</span>, <span class=\"attr\">use</span>: <span class=\"string\">'url-loader'</span>&#125;</span><br><span class=\"line\">      <span class=\"comment\">//所有.jpg格式的图片都会被转化, use: 解析模块对应的解析器(loader)</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"插件-plugins\"><a href=\"#插件-plugins\" class=\"headerlink\" title=\"插件(plugins)\"></a>插件(plugins)</h3><p>插件目的在于解决 <code>loader</code> 无法实现的其他事。</p>\n<blockquote>\n<p>loader: 解析默写特定的文件， plugins： 几乎所有的自动化操作都通过插件来完成</p>\n</blockquote>\n<p>由于插件可以携带参数/选项，必须在 <code>webpack</code> 配置中，向 <code>plugins</code> 属性传入 <code>new</code> 实例。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins: [</span><br><span class=\"line\">  <span class=\"keyword\">new</span> webpack.optimize.UglifyJsPlugin(),</span><br><span class=\"line\">  <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123; <span class=\"attr\">template</span>: <span class=\"string\">'./src/index.html'</span> &#125;) <span class=\"comment\">//自动引用你打包后的JS文件的新index.html</span></span><br><span class=\"line\">  <span class=\"keyword\">new</span> webpack.HotModuleReplacementPlugin()<span class=\"comment\">//热加载插件</span></span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置-configuration\"><a href=\"#配置-configuration\" class=\"headerlink\" title=\"配置(configuration)\"></a>配置(configuration)</h3><blockquote>\n<p>plugin 和 loader 的区别是，loader 是在 import 时根据不同的文件名，匹配不同的 loader 对这个文件做处理，而 plugin, 关注的不是文件的格式，而是在编译的各个阶段，会触发不同的事件，让你可以干预每个编译阶段。</p>\n</blockquote>\n<p>webpack 的配置文件，是导出一个对象的 JavaScript 文件。此对象，由 webpack 根据对象定义的属性进行解析。<br>如果 webpack.config.js 存在，则 webpack 命令将默认选择使用它。但是在生产环境和开发环境中所需要配置的 webpack 是不一致的，所以现在将 webpack 的配置更改为一个公用文件和两个环境文件，<code>webpack.common.js</code>、<code>webpack.dev.js</code>和 <code>webpack.prod.js</code>，使用<code>webpack-merge</code>将不同的配置结合在一起。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> merge = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack-merge'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> common = <span class=\"built_in\">require</span>(<span class=\"string\">'./webpack.common'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = merge(common, &#123;</span><br><span class=\"line\">  mode: <span class=\"string\">'development'</span>,</span><br><span class=\"line\">  devtool: <span class=\"string\">'inline-source-map'</span>,</span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    contentBase: <span class=\"string\">'./dist'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"模块-modules\"><a href=\"#模块-modules\" class=\"headerlink\" title=\"模块(modules)\"></a>模块(modules)</h3><h2 id=\"项目常用配置\"><a href=\"#项目常用配置\" class=\"headerlink\" title=\"项目常用配置\"></a>项目常用配置</h2><ul>\n<li>设置静态资源的 url 路径前缀</li>\n<li>各个页面分开打包</li>\n<li>配置 favicon</li>\n<li>代码中插入环境变量</li>\n<li>简化 import 路径</li>\n<li>使用 postcss 的插件 autoprefixer 自动创建 css 的 vendor prefixes</li>\n</ul>\n<h3 id=\"设置静态资源的-URL-路径前缀\"><a href=\"#设置静态资源的-URL-路径前缀\" class=\"headerlink\" title=\"设置静态资源的 URL 路径前缀\"></a>设置静态资源的 URL 路径前缀</h3><blockquote>\n<p>一般我们的项目开发环境中，我们的资源文件都是在根目录中，8080/index.js，但是在生产环境中，需要考虑到缓存控制和 CDN，一版会给 url 加一个前缀： 8080/m/index.js</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    publicPath: <span class=\"string\">'/m/'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// webpack配置</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    代码中引用的文件（js、css、图片等）会根据配置合并为一个或多个包，我们称一个包为 chunk。</span></span><br><span class=\"line\"><span class=\"comment\">    每个 chunk 包含多个 modules。无论是否是 js，webpack 都将引入的文件视为一个 module。</span></span><br><span class=\"line\"><span class=\"comment\">    chunkFilename 用来配置这个 chunk 输出的文件名。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    [chunkhash]：这个 chunk 的 hash 值，文件发生变化时该值也会变。使用 [chunkhash] 作为文件名可以防止浏览器读取旧的缓存文件。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    还有一个占位符 [id]，编译时每个 chunk 会有一个id。</span></span><br><span class=\"line\"><span class=\"comment\">    我们在这里不使用它，因为这个 id 是个递增的数字，增加或减少一个chunk，都可能导致其他 chunk 的 id 发生改变，导致缓存失效。</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    chunkFilename: <span class=\"string\">'[id].[chunkhash].js'</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"各个页面分开打包\"><a href=\"#各个页面分开打包\" class=\"headerlink\" title=\"各个页面分开打包\"></a>各个页面分开打包</h3><p>应用路由时可以按需加载，使用 async/await 配合<code>import</code>使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Test = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">'@/views/test'</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置-favicon\"><a href=\"#配置-favicon\" class=\"headerlink\" title=\"配置 favicon\"></a>配置 favicon</h3><blockquote>\n<p>网页图标： 在 src 目录中放一张 favicon.png，然后 src/index.html 中插入</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"icon\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"image/png\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"favicon.png\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<p>webpack 配置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.html$/</span>,</span><br><span class=\"line\">        use: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            loader: <span class=\"string\">'html-loader'</span>,</span><br><span class=\"line\">            options: &#123;</span><br><span class=\"line\">              <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">              html-loader 接受 attrs 参数，表示什么标签的什么属性需要调用 webpack 的 loader 进行打包。</span></span><br><span class=\"line\"><span class=\"comment\">              比如 &lt;img&gt; 标签的 src 属性，webpack 会把 &lt;img&gt; 引用的图片打包，然后 src 的属性值替换为打包后的路径。</span></span><br><span class=\"line\"><span class=\"comment\">              使用什么 loader 代码，同样是在 module.rules 定义中使用匹配的规则。</span></span><br><span class=\"line\"><span class=\"comment\">              如果 html-loader 不指定 attrs 参数，默认值是 img:src, 意味着会默认打包 &lt;img&gt; 标签的图片。</span></span><br><span class=\"line\"><span class=\"comment\">              这里我们加上 &lt;link&gt; 标签的 href 属性，用来打包入口 index.html 引入的 favicon.png 文件。</span></span><br><span class=\"line\"><span class=\"comment\">              */</span></span><br><span class=\"line\">              attrs: [<span class=\"string\">'img:src'</span>, <span class=\"string\">'link:href'</span>]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        匹配 favicon.png</span></span><br><span class=\"line\"><span class=\"comment\">        上面的 html-loader 会把入口 index.html 引用的 favicon.png 图标文件解析出来进行打包</span></span><br><span class=\"line\"><span class=\"comment\">        打包规则就按照这里指定的 loader 执行</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        test: <span class=\"regexp\">/favicon\\.png$/</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">        use: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 使用 file-loader</span></span><br><span class=\"line\">            loader: <span class=\"string\">'file-loader'</span>,</span><br><span class=\"line\">            options: &#123;</span><br><span class=\"line\">              <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">              name：指定文件输出名</span></span><br><span class=\"line\"><span class=\"comment\">              [hash] 为源文件的hash值，[ext] 为后缀。</span></span><br><span class=\"line\"><span class=\"comment\">              */</span></span><br><span class=\"line\">              name: <span class=\"string\">'[hash].[ext]'</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 图片文件的加载配置增加一个 exclude 参数</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.(png|jpg|jpeg|gif|eot|ttf|woff|woff2|svg|svgz)(\\?.+)?$/</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 排除 favicon.png, 因为它已经由上面的 loader 处理了。如果不排除掉，它会被这个 loader 再处理一遍</span></span><br><span class=\"line\">        exclude: <span class=\"regexp\">/favicon\\.png$/</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">        use: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            loader: <span class=\"string\">'url-loader'</span>,</span><br><span class=\"line\">            options: &#123;</span><br><span class=\"line\">              limit: <span class=\"number\">10000</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>webpack 学习笔记<br>最后更改日期：2019 年 02 月 23 日</p>","more":"<p><code>webpack</code> 学习笔记，参考了官网和很多的文章，由于当时没有及时记录，参考的文章就不一一列出了</p>\n<h1 id=\"webpack-学习之路\"><a href=\"#webpack-学习之路\" class=\"headerlink\" title=\"webpack 学习之路\"></a>webpack 学习之路</h1><h2 id=\"css\"><a href=\"#css\" class=\"headerlink\" title=\"css\"></a>css</h2><p>Webpack 把所有的文件都都当做模块处理，JavaScript 代码，CSS 和 fonts 以及图片等等通过合适的 loader 都可以被处理。<br>css 有两个工具处理样式表，<code>css-loader</code> 和 <code>style-loader</code>, <code>css-loader</code>能够使用类似<code>@import</code> 和 <code>url(...)</code>的方法实现<code>require()</code>的功能，<code>style-loader</code>将所有的计算后的样式加入页面中，二者组合在一起使你能够把样式表嵌入 webpack 打包后的 JS 文件中。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 简单的css打包配置</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">  rules: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">      use: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          loader: <span class=\"string\">'style-loader'</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          loader: <span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">          options: &#123;</span><br><span class=\"line\">            modules: <span class=\"literal\">true</span>, <span class=\"comment\">// 指定启用css modules</span></span><br><span class=\"line\">            localIdentName: <span class=\"string\">'[name]__[local]--[hash:base64:5]'</span> <span class=\"comment\">// 指定css的类名格式,防止全局类名的污染</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>css 与处理器</strong><br>css 处理 loaders:</p>\n<ul>\n<li><code>Less loader</code></li>\n<li><code>Sass loader</code></li>\n<li><code>Stylus loader</code></li>\n</ul>\n<p>还有一个更大的处理平台<code>PostCSS</code>， 使用 \b 如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rules: [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">    use: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        loader: <span class=\"string\">'style-loader'</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        loader: <span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">        options: &#123;</span><br><span class=\"line\">          modules: <span class=\"literal\">true</span> <span class=\"comment\">// 指定启用css modules</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        loader: <span class=\"string\">'postcss-loader'</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h2 id=\"babel\"><a href=\"#babel\" class=\"headerlink\" title=\"babel\"></a>babel</h2><p>将 ES6 等高版本的 JS 转义成浏览器和 node 环境下可以被成功运行的 js 代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install babel-cli -g <span class=\"comment\">//全局安装</span></span><br><span class=\"line\">$ cd .....</span><br><span class=\"line\">$ pwd（li） <span class=\"comment\">// 看一下当前的环境/文件下包含的目录（防止进错目录了，最好确认一下比较稳妥）</span></span><br><span class=\"line\">$ npm init <span class=\"comment\">// 初始化项目</span></span><br><span class=\"line\">$ npm install babel-cli --save-dev <span class=\"comment\">//本地安装（当前文件夹或者环境中安装）</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"babel-环境设置\"><a href=\"#babel-环境设置\" class=\"headerlink\" title=\"babel 环境设置\"></a>babel 环境设置</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">'presets'</span>: [<span class=\"string\">'es2015'</span>], <span class=\"comment\">//预置配置， 项目的依赖和最后输出的结果</span></span><br><span class=\"line\">    <span class=\"string\">'plugins'</span>: []  <span class=\"comment\">//插件</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$ -o <span class=\"comment\">// --out-file 输出单文件</span></span><br><span class=\"line\">$ -d <span class=\"comment\">// --out-dir 输出文件夹</span></span><br><span class=\"line\">$ bable --watch src -d build <span class=\"comment\">//编译后热更新</span></span><br><span class=\"line\">$ ctrl + c <span class=\"comment\">//终止服务</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"browser-sync\"><a href=\"#browser-sync\" class=\"headerlink\" title=\"browser-sync\"></a>browser-sync</h2><p>简单的浏览器同步测试工具（起一个服务）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ browser-sync start --server</span><br><span class=\"line\">$ browser-sync start --help  <span class=\"comment\">// 了解该方法下有哪些具体的用法</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"browserify-打包\"><a href=\"#browserify-打包\" class=\"headerlink\" title=\"browserify 打包\"></a>browserify 打包</h2><p>node 在网页上三种 js 规范： commonjs \\ amd \\cmd</p>\n<ol>\n<li><code>commonjs</code>: 基于后台的规范（系统架构、系统自动化），模块化定义，允许把 js 代码抽离出来，形成一个单独的文件。特点：同步，加载完成后，但是在浏览器中会导致浏览器假死的状况（网速慢，资源不存在等）</li>\n<li><code>amd</code>:异步加载，成功和失败都有一个返回值，加载 css 后再引入模块</li>\n<li><code>cmd</code>:异步加载-按需加载</li>\n</ol>\n<h3 id=\"webpack-核心概念\"><a href=\"#webpack-核心概念\" class=\"headerlink\" title=\"webpack 核心概念\"></a>webpack 核心概念</h3><p>本质上： 静态模块打包器<br>核心概念：</p>\n<ul>\n<li>入口（entry）：内部依赖图的开始，也可以说就是需要被打包的目录</li>\n<li>输出（output）： 输出打包完成的文件，默认文件为 <code>./dist</code>, 主输出文件默认为 <code>./dist/main.js</code></li>\n<li>loader: 够让 webpack 处理那些非 JavaScript 文件，并且先将它们转换为有效 模块，然后添加到依赖图中</li>\n<li>插件（plugins）: 打包优化、资源管理和注入环境变量</li>\n<li>模式： dev、production 和 none</li>\n</ul>\n<h3 id=\"入口\"><a href=\"#入口\" class=\"headerlink\" title=\"入口\"></a>入口</h3><p>用法： <code>entry: string| Array&lt;string&gt;</code><br>使用场景：</p>\n<ol>\n<li>分离应用程序(app)和第三方库（vendor）入口</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">entry: &#123;</span><br><span class=\"line\">   app: <span class=\"string\">'./src/app.js'</span>,</span><br><span class=\"line\">   vendors: <span class=\"string\">'./src/vendors.js'</span></span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>2.多页面应用：设置多个页面入口（但是我们目前的项目都是单页面入口）</p>\n<blockquote>\n<p>对零配置来说，默认入口文件夹为当前工程的根目录 <code>src</code> 文件夹</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpackProject</span><br><span class=\"line\">│</span><br><span class=\"line\">└───src</span><br><span class=\"line\">│   │--index.js  <span class=\"comment\">//默认的入口文件</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"输出（output）\"><a href=\"#输出（output）\" class=\"headerlink\" title=\"输出（output）\"></a>输出（output）</h3><p>注意点： 虽然可以存在多个 <code>入口</code> 但是只能指定一个 <code>输出</code> 配置，输出 <code>path</code> 必须是一个绝对路径，它是 <a href=\"http://nodejs.cn/api/path.html\" target=\"_blank\" rel=\"noopener\">Node.js</a> 的一个核心模块。称之为路径模块，用于操作文件路径。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">// 简单用法</span></span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">  filename: <span class=\"string\">'bundle.js'</span>, <span class=\"comment\">//[name].js</span></span><br><span class=\"line\">  path: <span class=\"string\">'/home/proj/public/assets'</span> <span class=\"comment\">// _dirname + './dist'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 将单独的 `bundle.js` 问价输出到指定目录中</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>零配置默认的输出 v</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpackProject</span><br><span class=\"line\">│</span><br><span class=\"line\">└───dist</span><br><span class=\"line\">|   |--main.js</span><br><span class=\"line\"> <span class=\"comment\">//读取 src 目录下的 index.js文件，打包后默认输出到同级的 dist 目录下，文件名为 main.js</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"生成-Source-Maps-调试\"><a href=\"#生成-Source-Maps-调试\" class=\"headerlink\" title=\"生成 Source Maps 调试\"></a>生成 Source Maps 调试</h3><p>在 webpack 的配置文件中配置 source maps，需要配置 <code>devtool</code>，它有四种不同的配置选项:</p>\n<ol>\n<li>source-map 生成一个完整且功能完全的文件，不压缩</li>\n<li>cheap-module-source-map 在一个单独的文件中生成一个不带 \b 映射的 map，调试不能对应到具体的列</li>\n<li>eval-source-map 使用 eval 打包源文件模块，在同一个文件中生成干净的完整的 <code>source map</code>， 在开发阶段这是一个非常好的选项，在生产阶段则一定不要启用这个选项</li>\n<li>cheap-module-eval-source-map 这是在打包文件时最快的生成 source map 的方法，生成的 Source Map 会和打包后的 JavaScript 文件同行显示，没有列映射</li>\n</ol>\n<h3 id=\"热更新\"><a href=\"#热更新\" class=\"headerlink\" title=\"热更新\"></a>热更新</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev webpack-dev-server</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>配置</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">devServer: &#123;</span><br><span class=\"line\">    contentBase: <span class=\"string\">\"./dist\"</span>,<span class=\"comment\">//本地服务器所加载的页面所在的目录</span></span><br><span class=\"line\">    historyApiFallback: <span class=\"literal\">true</span>,<span class=\"comment\">//不跳转</span></span><br><span class=\"line\">    inline: <span class=\"literal\">true</span>,  <span class=\"comment\">//实时刷新</span></span><br><span class=\"line\">    port: <span class=\"number\">8080</span>   <span class=\"comment\">// 端口号： 默认8080</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"loaders\"><a href=\"#loaders\" class=\"headerlink\" title=\"loaders\"></a>loaders</h3><p>主要用于对模块的源代码进行转换。</p>\n<blockquote>\n<p>在 webpack 打包中,会对入口文件的直接依赖或者间接依赖进行解析,但是 webpack 只能解析某些文件(比如 <code>.js</code> 结尾的文件)在 4.0 之后 <code>.txt</code> 、 <code>.json</code> 文件都能支持解析。而 <code>loader</code> 做的事情就是把其它类型的所有文件转换为 <code>webpack</code> 能够处理的模块。然后你就可以利用 <code>webpack</code> 的打包能力，对它们进行处理。</p>\n</blockquote>\n<p><strong>loaders 的配置具体包括这几个方面</strong></p>\n<ul>\n<li><code>test</code>: 一个用以匹配 loaders 所处理文件的拓展名的正则表达式（必须）</li>\n<li><code>loader</code>: loader 的名称</li>\n<li><code>include/exclude</code>: 手动添加必须处理的文件（文件夹）或屏蔽不需要处理的文件（文件夹）（可选）；</li>\n<li><code>query</code>: 为 loaders 提供额外的设置选项（可选）</li>\n</ul>\n<p>推荐用法： 在<code>weboack.confing.js</code> 中配置指定 loader， <code>module.rules</code> 允许在配置中指定多个 loader。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">  rules: [</span><br><span class=\"line\">    &#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>, <span class=\"attr\">use</span>: <span class=\"string\">'css-loader'</span> &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">      use: [</span><br><span class=\"line\">        &#123; <span class=\"attr\">loader</span>: <span class=\"string\">'style-loader'</span> &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          loader: <span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">          options: &#123;</span><br><span class=\"line\">            modules: <span class=\"literal\">true</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>简单的使用方法： 在项目中添加了一个图片</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpackProject</span><br><span class=\"line\">│</span><br><span class=\"line\">└───src</span><br><span class=\"line\">|   |--image.jpeg  添加一个图片</span><br><span class=\"line\">│   │--util.js</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// util.js 文件</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> myImage <span class=\"keyword\">from</span>  <span class=\"string\">'./image.jpeg'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> img = <span class=\"keyword\">new</span> Image()</span><br><span class=\"line\">img.src = myImage</span><br><span class=\"line\">....</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>因为 <code>webpack</code> 并不支持对图片的解析,需要配置相应的 loader 做转换处理为 <code>webpack</code> 打包的文件格式, webpack 能够解析任何 import 导入的模块，比如.css, .jpg 文件等。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> config = &#123;</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;<span class=\"attr\">test</span>: <span class=\"regexp\">/\\.jpeg$/</span>, <span class=\"attr\">use</span>: <span class=\"string\">'url-loader'</span>&#125;</span><br><span class=\"line\">      <span class=\"comment\">//所有.jpg格式的图片都会被转化, use: 解析模块对应的解析器(loader)</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"插件-plugins\"><a href=\"#插件-plugins\" class=\"headerlink\" title=\"插件(plugins)\"></a>插件(plugins)</h3><p>插件目的在于解决 <code>loader</code> 无法实现的其他事。</p>\n<blockquote>\n<p>loader: 解析默写特定的文件， plugins： 几乎所有的自动化操作都通过插件来完成</p>\n</blockquote>\n<p>由于插件可以携带参数/选项，必须在 <code>webpack</code> 配置中，向 <code>plugins</code> 属性传入 <code>new</code> 实例。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins: [</span><br><span class=\"line\">  <span class=\"keyword\">new</span> webpack.optimize.UglifyJsPlugin(),</span><br><span class=\"line\">  <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123; <span class=\"attr\">template</span>: <span class=\"string\">'./src/index.html'</span> &#125;) <span class=\"comment\">//自动引用你打包后的JS文件的新index.html</span></span><br><span class=\"line\">  <span class=\"keyword\">new</span> webpack.HotModuleReplacementPlugin()<span class=\"comment\">//热加载插件</span></span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置-configuration\"><a href=\"#配置-configuration\" class=\"headerlink\" title=\"配置(configuration)\"></a>配置(configuration)</h3><blockquote>\n<p>plugin 和 loader 的区别是，loader 是在 import 时根据不同的文件名，匹配不同的 loader 对这个文件做处理，而 plugin, 关注的不是文件的格式，而是在编译的各个阶段，会触发不同的事件，让你可以干预每个编译阶段。</p>\n</blockquote>\n<p>webpack 的配置文件，是导出一个对象的 JavaScript 文件。此对象，由 webpack 根据对象定义的属性进行解析。<br>如果 webpack.config.js 存在，则 webpack 命令将默认选择使用它。但是在生产环境和开发环境中所需要配置的 webpack 是不一致的，所以现在将 webpack 的配置更改为一个公用文件和两个环境文件，<code>webpack.common.js</code>、<code>webpack.dev.js</code>和 <code>webpack.prod.js</code>，使用<code>webpack-merge</code>将不同的配置结合在一起。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> merge = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack-merge'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> common = <span class=\"built_in\">require</span>(<span class=\"string\">'./webpack.common'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = merge(common, &#123;</span><br><span class=\"line\">  mode: <span class=\"string\">'development'</span>,</span><br><span class=\"line\">  devtool: <span class=\"string\">'inline-source-map'</span>,</span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    contentBase: <span class=\"string\">'./dist'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"模块-modules\"><a href=\"#模块-modules\" class=\"headerlink\" title=\"模块(modules)\"></a>模块(modules)</h3><h2 id=\"项目常用配置\"><a href=\"#项目常用配置\" class=\"headerlink\" title=\"项目常用配置\"></a>项目常用配置</h2><ul>\n<li>设置静态资源的 url 路径前缀</li>\n<li>各个页面分开打包</li>\n<li>配置 favicon</li>\n<li>代码中插入环境变量</li>\n<li>简化 import 路径</li>\n<li>使用 postcss 的插件 autoprefixer 自动创建 css 的 vendor prefixes</li>\n</ul>\n<h3 id=\"设置静态资源的-URL-路径前缀\"><a href=\"#设置静态资源的-URL-路径前缀\" class=\"headerlink\" title=\"设置静态资源的 URL 路径前缀\"></a>设置静态资源的 URL 路径前缀</h3><blockquote>\n<p>一般我们的项目开发环境中，我们的资源文件都是在根目录中，8080/index.js，但是在生产环境中，需要考虑到缓存控制和 CDN，一版会给 url 加一个前缀： 8080/m/index.js</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    publicPath: <span class=\"string\">'/m/'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// webpack配置</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    代码中引用的文件（js、css、图片等）会根据配置合并为一个或多个包，我们称一个包为 chunk。</span></span><br><span class=\"line\"><span class=\"comment\">    每个 chunk 包含多个 modules。无论是否是 js，webpack 都将引入的文件视为一个 module。</span></span><br><span class=\"line\"><span class=\"comment\">    chunkFilename 用来配置这个 chunk 输出的文件名。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    [chunkhash]：这个 chunk 的 hash 值，文件发生变化时该值也会变。使用 [chunkhash] 作为文件名可以防止浏览器读取旧的缓存文件。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    还有一个占位符 [id]，编译时每个 chunk 会有一个id。</span></span><br><span class=\"line\"><span class=\"comment\">    我们在这里不使用它，因为这个 id 是个递增的数字，增加或减少一个chunk，都可能导致其他 chunk 的 id 发生改变，导致缓存失效。</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    chunkFilename: <span class=\"string\">'[id].[chunkhash].js'</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"各个页面分开打包\"><a href=\"#各个页面分开打包\" class=\"headerlink\" title=\"各个页面分开打包\"></a>各个页面分开打包</h3><p>应用路由时可以按需加载，使用 async/await 配合<code>import</code>使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Test = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">'@/views/test'</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置-favicon\"><a href=\"#配置-favicon\" class=\"headerlink\" title=\"配置 favicon\"></a>配置 favicon</h3><blockquote>\n<p>网页图标： 在 src 目录中放一张 favicon.png，然后 src/index.html 中插入</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"icon\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"image/png\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"favicon.png\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<p>webpack 配置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.html$/</span>,</span><br><span class=\"line\">        use: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            loader: <span class=\"string\">'html-loader'</span>,</span><br><span class=\"line\">            options: &#123;</span><br><span class=\"line\">              <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">              html-loader 接受 attrs 参数，表示什么标签的什么属性需要调用 webpack 的 loader 进行打包。</span></span><br><span class=\"line\"><span class=\"comment\">              比如 &lt;img&gt; 标签的 src 属性，webpack 会把 &lt;img&gt; 引用的图片打包，然后 src 的属性值替换为打包后的路径。</span></span><br><span class=\"line\"><span class=\"comment\">              使用什么 loader 代码，同样是在 module.rules 定义中使用匹配的规则。</span></span><br><span class=\"line\"><span class=\"comment\">              如果 html-loader 不指定 attrs 参数，默认值是 img:src, 意味着会默认打包 &lt;img&gt; 标签的图片。</span></span><br><span class=\"line\"><span class=\"comment\">              这里我们加上 &lt;link&gt; 标签的 href 属性，用来打包入口 index.html 引入的 favicon.png 文件。</span></span><br><span class=\"line\"><span class=\"comment\">              */</span></span><br><span class=\"line\">              attrs: [<span class=\"string\">'img:src'</span>, <span class=\"string\">'link:href'</span>]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        匹配 favicon.png</span></span><br><span class=\"line\"><span class=\"comment\">        上面的 html-loader 会把入口 index.html 引用的 favicon.png 图标文件解析出来进行打包</span></span><br><span class=\"line\"><span class=\"comment\">        打包规则就按照这里指定的 loader 执行</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        test: <span class=\"regexp\">/favicon\\.png$/</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">        use: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 使用 file-loader</span></span><br><span class=\"line\">            loader: <span class=\"string\">'file-loader'</span>,</span><br><span class=\"line\">            options: &#123;</span><br><span class=\"line\">              <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">              name：指定文件输出名</span></span><br><span class=\"line\"><span class=\"comment\">              [hash] 为源文件的hash值，[ext] 为后缀。</span></span><br><span class=\"line\"><span class=\"comment\">              */</span></span><br><span class=\"line\">              name: <span class=\"string\">'[hash].[ext]'</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 图片文件的加载配置增加一个 exclude 参数</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.(png|jpg|jpeg|gif|eot|ttf|woff|woff2|svg|svgz)(\\?.+)?$/</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 排除 favicon.png, 因为它已经由上面的 loader 处理了。如果不排除掉，它会被这个 loader 再处理一遍</span></span><br><span class=\"line\">        exclude: <span class=\"regexp\">/favicon\\.png$/</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">        use: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            loader: <span class=\"string\">'url-loader'</span>,</span><br><span class=\"line\">            options: &#123;</span><br><span class=\"line\">              limit: <span class=\"number\">10000</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"cropperJS -- nuxt服务端渲染","date":"2018-11-01T16:00:00.000Z","_content":"\n服务端渲染实现图片自定义裁剪和上传和一些图片上传的知识点\n最后更新日期 2018 年 11 月 02 日\n\n<!-- more -->\n\n# 裁剪组件的选择\n\n```js\n $ npm install cropperjs\n```\n\n## 服务端渲染的注意事项\n\n1.  在服务端渲染时由于不能在组件刚加载时候直接操纵 DOM，因为在加载的时候 demo 还没有渲染出来\n2.  在服务端渲染时找不到 window，所有的 DOM 操作都应当被避免\n3.  使用的组件要注意它是否是在 created 的生命周期被加载或者说被挂载的，只有他在 mounted 时被加载才能被用在服务端渲染\n\n### 必须需要使用 DOM 操作的方法\n\n```js\nmounted() {\n    this.init() // 初始化需要映入的插件或者实例化\n}\nmethods: {\n    async init() {\n        import('cropperjs').then(module => {\n        // 通过promise的then方法确保cropper是在组件mounted时被实例化，目的是能够操作DOM\n          this.Cropper = module.default\n          // 初始化canavas\n          this.url = this.information.avatar_url\n          // 初始化图片地址\n          this.$nextTick(this.initCropper)\n        // nextTick 异步更新列队，在不得不操纵DOM时应该去使用的一个方法\n        //为了在数据变化之后等待 Vue 完成更新 DOM ，可以在数据变化之后立即使用 Vue.nextTick(callback) 。\n        //这样回调函数在 DOM 更新完成后就会调用。\n        })\n      }\n}\n```\n\n### 点击图片上传（本地图片上传，被劫持转化为 base64）\n\n遇到的问题： 上传的图片没有改变初始化加载的图片\n\n```js\nasync upload() {\n        const {input} = this.$refs\n        const [file] = input.files\n        input.value = ''\n        this.name = await this.getName(file) //获取加密后的文件名\n        this.url = URL.createObjectURL(file) // 文件blob转base64格式\n        // 处理图片上传后替换原来的图片\n        if (this.cropper) {\n          this.cropper.replace(this.url)\n          // 这个插件提供的一个替换图片路径的方法\n        } else {\n          this.$nextTick(this.initCropper)\n          // 如果上传失败，初始化画布\n        }\n      },\n```\n\n### 渲染画布，实现拖拽和缩放\n\n使用 cropperJS 插件完成业务需求， 实现的原理是通过 `canvas` 来渲染画布和截取,具体的配置可以参考 [cropperjs]() `demo` 和注释如下：\n\n```js\ninitCropper() {\n        const minAspectRatio = 0.5;\n        const maxAspectRatio = 1.5;\n        // this.$refs.image取当前的图片为基准，展示容器\n        const cropper = new this.Cropper(this.$refs.image, {\n          aspectRatio: 1 / 1, //等比缩放（正方形）\n          ready: () => {\n            const minAspectRatio = 0.5; // 图片宽高比\n            const maxAspectRatio = 1.5;\n            this.cropper = cropper\n            const containerData = cropper.getContainerData();\n            // 裁剪狂大小\n            const cropBoxData = cropper.getCropBoxData();\n            // 裁剪框位置和尺寸数据\n            const aspectRatio = cropBoxData.width / cropBoxData.height;\n            let newCropBoxWidth;\n            // 限制裁剪框的最大尺寸，不能超过画布的大小\n            if (aspectRatio < minAspectRatio || aspectRatio > maxAspectRatio) {\n              newCropBoxWidth = cropBoxData.height * ((minAspectRatio + maxAspectRatio) / 2);\n\n              cropper.setCropBoxData({\n                left: (containerData.width - newCropBoxWidth) / 2,\n                width: newCropBoxWidth\n              });\n            }\n          },\n          // 移动裁剪框并获取裁剪图片的信息\n          cropmove: () => {\n            const cropBoxData = cropper.getCropBoxData();\n            const aspectRatio = cropBoxData.width / cropBoxData.height;\n            if (aspectRatio < minAspectRatio) {\n              cropper.setCropBoxData({\n                width: cropBoxData.height * minAspectRatio\n              });\n            } else if (aspectRatio > maxAspectRatio) {\n              cropper.setCropBoxData({\n                width: cropBoxData.height * maxAspectRatio\n              });\n            }\n            this.fileBas = cropper.getCroppedCanvas().toDataURL()\n            // 获取到被裁剪的图片信息转化为base64的数据\n            // console.log(this.fileBas)\n          }\n        });\n      },\n```\n\n### base64 转化为 bolb 类型\n\n> 改变文件类型，返回一个二进制的对象\n\n```js\ndataURItoBlob(base64Data) {\n        let byteString;\n        if (base64Data.split(',')[0].indexOf('base64') >= 0)\n          byteString = atob(base64Data.split(',')[1]);\n        else\n          byteString = unescape(base64Data.split(',')[1]);\n        const mimeString = base64Data.split(',')[0].split(':')[1].split(';')[0];\n        const ia = new Uint8Array(byteString.length);\n        for (let i = 0; i < byteString.length; i++) {\n          ia[i] = byteString.charCodeAt(i);\n        }\n        // 返回一个bolb二进制的对象\n        return new Blob([ia], {\n          type: mimeString\n        })\n      },\n```\n\n### 保存裁剪的图片并且上传\n\n- 遇到的问题： 首次获取到数据后如果不移动裁剪框是不能获取到裁剪内数据的，从服务端加载的数据是没法获取到文件名的，\n- 解决的思路： 可以使用时间戳命名进行上传\n\n```js\nasync save() {\n        if(!this.fileBas) {\n        // 没有移动裁剪框或者没拿到值，再次拿取当前裁剪框默认的位置\n         this.fileBas = this.cropper.getCroppedCanvas().toDataURL()\n        }\n        // base64转化为bolb\n        const file = this.dataURItoBlob(this.fileBas)\n        // 进行上传前的认证\n        if (!(await this.beforeUpload(file))) return\n        const fd = new FormData()\n        Object.entries(this.formData).forEach(([key, value]) => {\n          fd.append(key, value)\n        })\n        fd.append('file', file)\n        const { data } = await axios({\n          url: this.action,\n          data: fd,\n          method: 'post'\n        })\n        const { path } = data\n        // 从store中拿数据时，并且要修改时，最好还是解构出来赋值给一个新的属性，再进行修改，防止引用类型的存在直接修改store里的数据，导致报错\n        const d = {...this.information}\n        d.avatar = path\n        delete d.avatar_url\n        await this.$store.dispatch('userInformation/updateInformation', d)\n        Message.success('保存成功')\n      },\n```\n\n### 从 `token` 中获取上传的签名和使用 `MD5` 加密防止重名文件上传被覆盖\n\nQ： 如果直接使用文件名作为上传的文件名称， 在不同目录下的同名文件上传到服务器之后，由于上传的名称相同会导致以前的文件被覆盖，问题难以被发现\n\nA:\n\n- 文件名加上当前事件戳（毫秒级），但不够优雅\n- 使用 `MD5` 加密， 解决命名重复问题\n\n```js\nasync beforeUpload() {\n  const token = await this.$store.dispatch('getToken/getAliToken')\n  const { accessid, callback, dir, host, policy, signature } = token\n  this.action = host\n  this.formData['key'] = this.name ? `${dir}${this.name}` : (Date.now() + this.url.substr(this.url.lastIndexOf('.')).split('-')[0])\n  // (Date.now() + this.url.substr(this.url.lastIndexOf('.')).split('-')[0])服务端拿取的图片命名规则\n  // this.formData['key'] = `${dir}${md5(file.name)}${file.name.substr(file.name.indexOf('.'))}`\n  this.formData['OSSAccessKeyId'] = accessid\n  this.formData['policy'] = policy\n  this.formData['Signature'] = signature\n  this.formData['callback'] = callback\n  return true\n},\n// MD5 加密， 获取上传的文件名方法\ngetName(file) {\n    return new Promise(resolve => {\n    const { name } = file\n    // 截取文件后缀\n    const suffix = name.substr(name.lastIndexOf('.'))\n    const spark = new SparkMD5.ArrayBuffer()\n    const reader = new FileReader()\n    reader.readAsArrayBuffer(file)\n    reader.addEventListener('load', (e) => {\n      spark.append(e.target.result)\n      resolve(spark.end() + suffix) // 文件md5加密，放置重复上传\n    })\n  })\n},\n```\n","source":"_posts/2018-11-02-cropperJs.md","raw":"---\nlayout: post\ntitle: cropperJS -- nuxt服务端渲染\ndate: 2018-11-02\ncategories: nuxt\ntags:\n  - 文件上传\n  - nuxt\n  - 服务端渲染\n---\n\n服务端渲染实现图片自定义裁剪和上传和一些图片上传的知识点\n最后更新日期 2018 年 11 月 02 日\n\n<!-- more -->\n\n# 裁剪组件的选择\n\n```js\n $ npm install cropperjs\n```\n\n## 服务端渲染的注意事项\n\n1.  在服务端渲染时由于不能在组件刚加载时候直接操纵 DOM，因为在加载的时候 demo 还没有渲染出来\n2.  在服务端渲染时找不到 window，所有的 DOM 操作都应当被避免\n3.  使用的组件要注意它是否是在 created 的生命周期被加载或者说被挂载的，只有他在 mounted 时被加载才能被用在服务端渲染\n\n### 必须需要使用 DOM 操作的方法\n\n```js\nmounted() {\n    this.init() // 初始化需要映入的插件或者实例化\n}\nmethods: {\n    async init() {\n        import('cropperjs').then(module => {\n        // 通过promise的then方法确保cropper是在组件mounted时被实例化，目的是能够操作DOM\n          this.Cropper = module.default\n          // 初始化canavas\n          this.url = this.information.avatar_url\n          // 初始化图片地址\n          this.$nextTick(this.initCropper)\n        // nextTick 异步更新列队，在不得不操纵DOM时应该去使用的一个方法\n        //为了在数据变化之后等待 Vue 完成更新 DOM ，可以在数据变化之后立即使用 Vue.nextTick(callback) 。\n        //这样回调函数在 DOM 更新完成后就会调用。\n        })\n      }\n}\n```\n\n### 点击图片上传（本地图片上传，被劫持转化为 base64）\n\n遇到的问题： 上传的图片没有改变初始化加载的图片\n\n```js\nasync upload() {\n        const {input} = this.$refs\n        const [file] = input.files\n        input.value = ''\n        this.name = await this.getName(file) //获取加密后的文件名\n        this.url = URL.createObjectURL(file) // 文件blob转base64格式\n        // 处理图片上传后替换原来的图片\n        if (this.cropper) {\n          this.cropper.replace(this.url)\n          // 这个插件提供的一个替换图片路径的方法\n        } else {\n          this.$nextTick(this.initCropper)\n          // 如果上传失败，初始化画布\n        }\n      },\n```\n\n### 渲染画布，实现拖拽和缩放\n\n使用 cropperJS 插件完成业务需求， 实现的原理是通过 `canvas` 来渲染画布和截取,具体的配置可以参考 [cropperjs]() `demo` 和注释如下：\n\n```js\ninitCropper() {\n        const minAspectRatio = 0.5;\n        const maxAspectRatio = 1.5;\n        // this.$refs.image取当前的图片为基准，展示容器\n        const cropper = new this.Cropper(this.$refs.image, {\n          aspectRatio: 1 / 1, //等比缩放（正方形）\n          ready: () => {\n            const minAspectRatio = 0.5; // 图片宽高比\n            const maxAspectRatio = 1.5;\n            this.cropper = cropper\n            const containerData = cropper.getContainerData();\n            // 裁剪狂大小\n            const cropBoxData = cropper.getCropBoxData();\n            // 裁剪框位置和尺寸数据\n            const aspectRatio = cropBoxData.width / cropBoxData.height;\n            let newCropBoxWidth;\n            // 限制裁剪框的最大尺寸，不能超过画布的大小\n            if (aspectRatio < minAspectRatio || aspectRatio > maxAspectRatio) {\n              newCropBoxWidth = cropBoxData.height * ((minAspectRatio + maxAspectRatio) / 2);\n\n              cropper.setCropBoxData({\n                left: (containerData.width - newCropBoxWidth) / 2,\n                width: newCropBoxWidth\n              });\n            }\n          },\n          // 移动裁剪框并获取裁剪图片的信息\n          cropmove: () => {\n            const cropBoxData = cropper.getCropBoxData();\n            const aspectRatio = cropBoxData.width / cropBoxData.height;\n            if (aspectRatio < minAspectRatio) {\n              cropper.setCropBoxData({\n                width: cropBoxData.height * minAspectRatio\n              });\n            } else if (aspectRatio > maxAspectRatio) {\n              cropper.setCropBoxData({\n                width: cropBoxData.height * maxAspectRatio\n              });\n            }\n            this.fileBas = cropper.getCroppedCanvas().toDataURL()\n            // 获取到被裁剪的图片信息转化为base64的数据\n            // console.log(this.fileBas)\n          }\n        });\n      },\n```\n\n### base64 转化为 bolb 类型\n\n> 改变文件类型，返回一个二进制的对象\n\n```js\ndataURItoBlob(base64Data) {\n        let byteString;\n        if (base64Data.split(',')[0].indexOf('base64') >= 0)\n          byteString = atob(base64Data.split(',')[1]);\n        else\n          byteString = unescape(base64Data.split(',')[1]);\n        const mimeString = base64Data.split(',')[0].split(':')[1].split(';')[0];\n        const ia = new Uint8Array(byteString.length);\n        for (let i = 0; i < byteString.length; i++) {\n          ia[i] = byteString.charCodeAt(i);\n        }\n        // 返回一个bolb二进制的对象\n        return new Blob([ia], {\n          type: mimeString\n        })\n      },\n```\n\n### 保存裁剪的图片并且上传\n\n- 遇到的问题： 首次获取到数据后如果不移动裁剪框是不能获取到裁剪内数据的，从服务端加载的数据是没法获取到文件名的，\n- 解决的思路： 可以使用时间戳命名进行上传\n\n```js\nasync save() {\n        if(!this.fileBas) {\n        // 没有移动裁剪框或者没拿到值，再次拿取当前裁剪框默认的位置\n         this.fileBas = this.cropper.getCroppedCanvas().toDataURL()\n        }\n        // base64转化为bolb\n        const file = this.dataURItoBlob(this.fileBas)\n        // 进行上传前的认证\n        if (!(await this.beforeUpload(file))) return\n        const fd = new FormData()\n        Object.entries(this.formData).forEach(([key, value]) => {\n          fd.append(key, value)\n        })\n        fd.append('file', file)\n        const { data } = await axios({\n          url: this.action,\n          data: fd,\n          method: 'post'\n        })\n        const { path } = data\n        // 从store中拿数据时，并且要修改时，最好还是解构出来赋值给一个新的属性，再进行修改，防止引用类型的存在直接修改store里的数据，导致报错\n        const d = {...this.information}\n        d.avatar = path\n        delete d.avatar_url\n        await this.$store.dispatch('userInformation/updateInformation', d)\n        Message.success('保存成功')\n      },\n```\n\n### 从 `token` 中获取上传的签名和使用 `MD5` 加密防止重名文件上传被覆盖\n\nQ： 如果直接使用文件名作为上传的文件名称， 在不同目录下的同名文件上传到服务器之后，由于上传的名称相同会导致以前的文件被覆盖，问题难以被发现\n\nA:\n\n- 文件名加上当前事件戳（毫秒级），但不够优雅\n- 使用 `MD5` 加密， 解决命名重复问题\n\n```js\nasync beforeUpload() {\n  const token = await this.$store.dispatch('getToken/getAliToken')\n  const { accessid, callback, dir, host, policy, signature } = token\n  this.action = host\n  this.formData['key'] = this.name ? `${dir}${this.name}` : (Date.now() + this.url.substr(this.url.lastIndexOf('.')).split('-')[0])\n  // (Date.now() + this.url.substr(this.url.lastIndexOf('.')).split('-')[0])服务端拿取的图片命名规则\n  // this.formData['key'] = `${dir}${md5(file.name)}${file.name.substr(file.name.indexOf('.'))}`\n  this.formData['OSSAccessKeyId'] = accessid\n  this.formData['policy'] = policy\n  this.formData['Signature'] = signature\n  this.formData['callback'] = callback\n  return true\n},\n// MD5 加密， 获取上传的文件名方法\ngetName(file) {\n    return new Promise(resolve => {\n    const { name } = file\n    // 截取文件后缀\n    const suffix = name.substr(name.lastIndexOf('.'))\n    const spark = new SparkMD5.ArrayBuffer()\n    const reader = new FileReader()\n    reader.readAsArrayBuffer(file)\n    reader.addEventListener('load', (e) => {\n      spark.append(e.target.result)\n      resolve(spark.end() + suffix) // 文件md5加密，放置重复上传\n    })\n  })\n},\n```\n","slug":"2018-11-02-cropperJs","published":1,"updated":"2019-04-22T03:11:21.694Z","comments":1,"photos":[],"link":"","_id":"cjvbyxkil003kw0oolnr1mwn6","content":"<p>服务端渲染实现图片自定义裁剪和上传和一些图片上传的知识点<br>最后更新日期 2018 年 11 月 02 日</p>\n<a id=\"more\"></a>\n<h1 id=\"裁剪组件的选择\"><a href=\"#裁剪组件的选择\" class=\"headerlink\" title=\"裁剪组件的选择\"></a>裁剪组件的选择</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install cropperjs</span><br></pre></td></tr></table></figure>\n<h2 id=\"服务端渲染的注意事项\"><a href=\"#服务端渲染的注意事项\" class=\"headerlink\" title=\"服务端渲染的注意事项\"></a>服务端渲染的注意事项</h2><ol>\n<li>在服务端渲染时由于不能在组件刚加载时候直接操纵 DOM，因为在加载的时候 demo 还没有渲染出来</li>\n<li>在服务端渲染时找不到 window，所有的 DOM 操作都应当被避免</li>\n<li>使用的组件要注意它是否是在 created 的生命周期被加载或者说被挂载的，只有他在 mounted 时被加载才能被用在服务端渲染</li>\n</ol>\n<h3 id=\"必须需要使用-DOM-操作的方法\"><a href=\"#必须需要使用-DOM-操作的方法\" class=\"headerlink\" title=\"必须需要使用 DOM 操作的方法\"></a>必须需要使用 DOM 操作的方法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mounted() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.init() <span class=\"comment\">// 初始化需要映入的插件或者实例化</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">    <span class=\"keyword\">async</span> init() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">import</span>(<span class=\"string\">'cropperjs'</span>).then(<span class=\"function\"><span class=\"params\">module</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 通过promise的then方法确保cropper是在组件mounted时被实例化，目的是能够操作DOM</span></span><br><span class=\"line\">          <span class=\"keyword\">this</span>.Cropper = <span class=\"built_in\">module</span>.default</span><br><span class=\"line\">          <span class=\"comment\">// 初始化canavas</span></span><br><span class=\"line\">          <span class=\"keyword\">this</span>.url = <span class=\"keyword\">this</span>.information.avatar_url</span><br><span class=\"line\">          <span class=\"comment\">// 初始化图片地址</span></span><br><span class=\"line\">          <span class=\"keyword\">this</span>.$nextTick(<span class=\"keyword\">this</span>.initCropper)</span><br><span class=\"line\">        <span class=\"comment\">// nextTick 异步更新列队，在不得不操纵DOM时应该去使用的一个方法</span></span><br><span class=\"line\">        <span class=\"comment\">//为了在数据变化之后等待 Vue 完成更新 DOM ，可以在数据变化之后立即使用 Vue.nextTick(callback) 。</span></span><br><span class=\"line\">        <span class=\"comment\">//这样回调函数在 DOM 更新完成后就会调用。</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"点击图片上传（本地图片上传，被劫持转化为-base64）\"><a href=\"#点击图片上传（本地图片上传，被劫持转化为-base64）\" class=\"headerlink\" title=\"点击图片上传（本地图片上传，被劫持转化为 base64）\"></a>点击图片上传（本地图片上传，被劫持转化为 base64）</h3><p>遇到的问题： 上传的图片没有改变初始化加载的图片</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> upload() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123;input&#125; = <span class=\"keyword\">this</span>.$refs</span><br><span class=\"line\">        <span class=\"keyword\">const</span> [file] = input.files</span><br><span class=\"line\">        input.value = <span class=\"string\">''</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = <span class=\"keyword\">await</span> <span class=\"keyword\">this</span>.getName(file) <span class=\"comment\">//获取加密后的文件名</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.url = URL.createObjectURL(file) <span class=\"comment\">// 文件blob转base64格式</span></span><br><span class=\"line\">        <span class=\"comment\">// 处理图片上传后替换原来的图片</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.cropper) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.cropper.replace(<span class=\"keyword\">this</span>.url)</span><br><span class=\"line\">          <span class=\"comment\">// 这个插件提供的一个替换图片路径的方法</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.$nextTick(<span class=\"keyword\">this</span>.initCropper)</span><br><span class=\"line\">          <span class=\"comment\">// 如果上传失败，初始化画布</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br></pre></td></tr></table></figure>\n<h3 id=\"渲染画布，实现拖拽和缩放\"><a href=\"#渲染画布，实现拖拽和缩放\" class=\"headerlink\" title=\"渲染画布，实现拖拽和缩放\"></a>渲染画布，实现拖拽和缩放</h3><p>使用 cropperJS 插件完成业务需求， 实现的原理是通过 <code>canvas</code> 来渲染画布和截取,具体的配置可以参考 <a href>cropperjs</a> <code>demo</code> 和注释如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">initCropper() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> minAspectRatio = <span class=\"number\">0.5</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> maxAspectRatio = <span class=\"number\">1.5</span>;</span><br><span class=\"line\">        <span class=\"comment\">// this.$refs.image取当前的图片为基准，展示容器</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> cropper = <span class=\"keyword\">new</span> <span class=\"keyword\">this</span>.Cropper(<span class=\"keyword\">this</span>.$refs.image, &#123;</span><br><span class=\"line\">          aspectRatio: <span class=\"number\">1</span> / <span class=\"number\">1</span>, <span class=\"comment\">//等比缩放（正方形）</span></span><br><span class=\"line\">          ready: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> minAspectRatio = <span class=\"number\">0.5</span>; <span class=\"comment\">// 图片宽高比</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> maxAspectRatio = <span class=\"number\">1.5</span>;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.cropper = cropper</span><br><span class=\"line\">            <span class=\"keyword\">const</span> containerData = cropper.getContainerData();</span><br><span class=\"line\">            <span class=\"comment\">// 裁剪狂大小</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> cropBoxData = cropper.getCropBoxData();</span><br><span class=\"line\">            <span class=\"comment\">// 裁剪框位置和尺寸数据</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> aspectRatio = cropBoxData.width / cropBoxData.height;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> newCropBoxWidth;</span><br><span class=\"line\">            <span class=\"comment\">// 限制裁剪框的最大尺寸，不能超过画布的大小</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (aspectRatio &lt; minAspectRatio || aspectRatio &gt; maxAspectRatio) &#123;</span><br><span class=\"line\">              newCropBoxWidth = cropBoxData.height * ((minAspectRatio + maxAspectRatio) / <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">              cropper.setCropBoxData(&#123;</span><br><span class=\"line\">                left: (containerData.width - newCropBoxWidth) / <span class=\"number\">2</span>,</span><br><span class=\"line\">                width: newCropBoxWidth</span><br><span class=\"line\">              &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"comment\">// 移动裁剪框并获取裁剪图片的信息</span></span><br><span class=\"line\">          cropmove: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> cropBoxData = cropper.getCropBoxData();</span><br><span class=\"line\">            <span class=\"keyword\">const</span> aspectRatio = cropBoxData.width / cropBoxData.height;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (aspectRatio &lt; minAspectRatio) &#123;</span><br><span class=\"line\">              cropper.setCropBoxData(&#123;</span><br><span class=\"line\">                width: cropBoxData.height * minAspectRatio</span><br><span class=\"line\">              &#125;);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (aspectRatio &gt; maxAspectRatio) &#123;</span><br><span class=\"line\">              cropper.setCropBoxData(&#123;</span><br><span class=\"line\">                width: cropBoxData.height * maxAspectRatio</span><br><span class=\"line\">              &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.fileBas = cropper.getCroppedCanvas().toDataURL()</span><br><span class=\"line\">            <span class=\"comment\">// 获取到被裁剪的图片信息转化为base64的数据</span></span><br><span class=\"line\">            <span class=\"comment\">// console.log(this.fileBas)</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;,</span><br></pre></td></tr></table></figure>\n<h3 id=\"base64-转化为-bolb-类型\"><a href=\"#base64-转化为-bolb-类型\" class=\"headerlink\" title=\"base64 转化为 bolb 类型\"></a>base64 转化为 bolb 类型</h3><blockquote>\n<p>改变文件类型，返回一个二进制的对象</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dataURItoBlob(base64Data) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> byteString;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (base64Data.split(<span class=\"string\">','</span>)[<span class=\"number\">0</span>].indexOf(<span class=\"string\">'base64'</span>) &gt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">          byteString = atob(base64Data.split(<span class=\"string\">','</span>)[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">          byteString = <span class=\"built_in\">unescape</span>(base64Data.split(<span class=\"string\">','</span>)[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> mimeString = base64Data.split(<span class=\"string\">','</span>)[<span class=\"number\">0</span>].split(<span class=\"string\">':'</span>)[<span class=\"number\">1</span>].split(<span class=\"string\">';'</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">const</span> ia = <span class=\"keyword\">new</span> <span class=\"built_in\">Uint8Array</span>(byteString.length);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; byteString.length; i++) &#123;</span><br><span class=\"line\">          ia[i] = byteString.charCodeAt(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 返回一个bolb二进制的对象</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Blob([ia], &#123;</span><br><span class=\"line\">          type: mimeString</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;,</span><br></pre></td></tr></table></figure>\n<h3 id=\"保存裁剪的图片并且上传\"><a href=\"#保存裁剪的图片并且上传\" class=\"headerlink\" title=\"保存裁剪的图片并且上传\"></a>保存裁剪的图片并且上传</h3><ul>\n<li>遇到的问题： 首次获取到数据后如果不移动裁剪框是不能获取到裁剪内数据的，从服务端加载的数据是没法获取到文件名的，</li>\n<li>解决的思路： 可以使用时间戳命名进行上传</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> save() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!<span class=\"keyword\">this</span>.fileBas) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 没有移动裁剪框或者没拿到值，再次拿取当前裁剪框默认的位置</span></span><br><span class=\"line\">         <span class=\"keyword\">this</span>.fileBas = <span class=\"keyword\">this</span>.cropper.getCroppedCanvas().toDataURL()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// base64转化为bolb</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> file = <span class=\"keyword\">this</span>.dataURItoBlob(<span class=\"keyword\">this</span>.fileBas)</span><br><span class=\"line\">        <span class=\"comment\">// 进行上传前的认证</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!(<span class=\"keyword\">await</span> <span class=\"keyword\">this</span>.beforeUpload(file))) <span class=\"keyword\">return</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> fd = <span class=\"keyword\">new</span> FormData()</span><br><span class=\"line\">        <span class=\"built_in\">Object</span>.entries(<span class=\"keyword\">this</span>.formData).forEach(<span class=\"function\">(<span class=\"params\">[key, value]</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          fd.append(key, value)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        fd.append(<span class=\"string\">'file'</span>, file)</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123; data &#125; = <span class=\"keyword\">await</span> axios(&#123;</span><br><span class=\"line\">          url: <span class=\"keyword\">this</span>.action,</span><br><span class=\"line\">          data: fd,</span><br><span class=\"line\">          method: <span class=\"string\">'post'</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123; path &#125; = data</span><br><span class=\"line\">        <span class=\"comment\">// 从store中拿数据时，并且要修改时，最好还是解构出来赋值给一个新的属性，再进行修改，防止引用类型的存在直接修改store里的数据，导致报错</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> d = &#123;...this.information&#125;</span><br><span class=\"line\">        d.avatar = path</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> d.avatar_url</span><br><span class=\"line\">        <span class=\"keyword\">await</span> <span class=\"keyword\">this</span>.$store.dispatch(<span class=\"string\">'userInformation/updateInformation'</span>, d)</span><br><span class=\"line\">        Message.success(<span class=\"string\">'保存成功'</span>)</span><br><span class=\"line\">      &#125;,</span><br></pre></td></tr></table></figure>\n<h3 id=\"从-token-中获取上传的签名和使用-MD5-加密防止重名文件上传被覆盖\"><a href=\"#从-token-中获取上传的签名和使用-MD5-加密防止重名文件上传被覆盖\" class=\"headerlink\" title=\"从 token 中获取上传的签名和使用 MD5 加密防止重名文件上传被覆盖\"></a>从 <code>token</code> 中获取上传的签名和使用 <code>MD5</code> 加密防止重名文件上传被覆盖</h3><p>Q： 如果直接使用文件名作为上传的文件名称， 在不同目录下的同名文件上传到服务器之后，由于上传的名称相同会导致以前的文件被覆盖，问题难以被发现</p>\n<p>A:</p>\n<ul>\n<li>文件名加上当前事件戳（毫秒级），但不够优雅</li>\n<li>使用 <code>MD5</code> 加密， 解决命名重复问题</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> beforeUpload() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> token = <span class=\"keyword\">await</span> <span class=\"keyword\">this</span>.$store.dispatch(<span class=\"string\">'getToken/getAliToken'</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; accessid, callback, dir, host, policy, signature &#125; = token</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.action = host</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.formData[<span class=\"string\">'key'</span>] = <span class=\"keyword\">this</span>.name ? <span class=\"string\">`<span class=\"subst\">$&#123;dir&#125;</span><span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span>`</span> : (<span class=\"built_in\">Date</span>.now() + <span class=\"keyword\">this</span>.url.substr(<span class=\"keyword\">this</span>.url.lastIndexOf(<span class=\"string\">'.'</span>)).split(<span class=\"string\">'-'</span>)[<span class=\"number\">0</span>])</span><br><span class=\"line\">  <span class=\"comment\">// (Date.now() + this.url.substr(this.url.lastIndexOf('.')).split('-')[0])服务端拿取的图片命名规则</span></span><br><span class=\"line\">  <span class=\"comment\">// this.formData['key'] = `$&#123;dir&#125;$&#123;md5(file.name)&#125;$&#123;file.name.substr(file.name.indexOf('.'))&#125;`</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.formData[<span class=\"string\">'OSSAccessKeyId'</span>] = accessid</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.formData[<span class=\"string\">'policy'</span>] = policy</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.formData[<span class=\"string\">'Signature'</span>] = signature</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.formData[<span class=\"string\">'callback'</span>] = callback</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"comment\">// MD5 加密， 获取上传的文件名方法</span></span><br><span class=\"line\">getName(file) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; name &#125; = file</span><br><span class=\"line\">    <span class=\"comment\">// 截取文件后缀</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> suffix = name.substr(name.lastIndexOf(<span class=\"string\">'.'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">const</span> spark = <span class=\"keyword\">new</span> SparkMD5.ArrayBuffer()</span><br><span class=\"line\">    <span class=\"keyword\">const</span> reader = <span class=\"keyword\">new</span> FileReader()</span><br><span class=\"line\">    reader.readAsArrayBuffer(file)</span><br><span class=\"line\">    reader.addEventListener(<span class=\"string\">'load'</span>, (e) =&gt; &#123;</span><br><span class=\"line\">      spark.append(e.target.result)</span><br><span class=\"line\">      resolve(spark.end() + suffix) <span class=\"comment\">// 文件md5加密，放置重复上传</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>服务端渲染实现图片自定义裁剪和上传和一些图片上传的知识点<br>最后更新日期 2018 年 11 月 02 日</p>","more":"<h1 id=\"裁剪组件的选择\"><a href=\"#裁剪组件的选择\" class=\"headerlink\" title=\"裁剪组件的选择\"></a>裁剪组件的选择</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install cropperjs</span><br></pre></td></tr></table></figure>\n<h2 id=\"服务端渲染的注意事项\"><a href=\"#服务端渲染的注意事项\" class=\"headerlink\" title=\"服务端渲染的注意事项\"></a>服务端渲染的注意事项</h2><ol>\n<li>在服务端渲染时由于不能在组件刚加载时候直接操纵 DOM，因为在加载的时候 demo 还没有渲染出来</li>\n<li>在服务端渲染时找不到 window，所有的 DOM 操作都应当被避免</li>\n<li>使用的组件要注意它是否是在 created 的生命周期被加载或者说被挂载的，只有他在 mounted 时被加载才能被用在服务端渲染</li>\n</ol>\n<h3 id=\"必须需要使用-DOM-操作的方法\"><a href=\"#必须需要使用-DOM-操作的方法\" class=\"headerlink\" title=\"必须需要使用 DOM 操作的方法\"></a>必须需要使用 DOM 操作的方法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mounted() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.init() <span class=\"comment\">// 初始化需要映入的插件或者实例化</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">    <span class=\"keyword\">async</span> init() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">import</span>(<span class=\"string\">'cropperjs'</span>).then(<span class=\"function\"><span class=\"params\">module</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 通过promise的then方法确保cropper是在组件mounted时被实例化，目的是能够操作DOM</span></span><br><span class=\"line\">          <span class=\"keyword\">this</span>.Cropper = <span class=\"built_in\">module</span>.default</span><br><span class=\"line\">          <span class=\"comment\">// 初始化canavas</span></span><br><span class=\"line\">          <span class=\"keyword\">this</span>.url = <span class=\"keyword\">this</span>.information.avatar_url</span><br><span class=\"line\">          <span class=\"comment\">// 初始化图片地址</span></span><br><span class=\"line\">          <span class=\"keyword\">this</span>.$nextTick(<span class=\"keyword\">this</span>.initCropper)</span><br><span class=\"line\">        <span class=\"comment\">// nextTick 异步更新列队，在不得不操纵DOM时应该去使用的一个方法</span></span><br><span class=\"line\">        <span class=\"comment\">//为了在数据变化之后等待 Vue 完成更新 DOM ，可以在数据变化之后立即使用 Vue.nextTick(callback) 。</span></span><br><span class=\"line\">        <span class=\"comment\">//这样回调函数在 DOM 更新完成后就会调用。</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"点击图片上传（本地图片上传，被劫持转化为-base64）\"><a href=\"#点击图片上传（本地图片上传，被劫持转化为-base64）\" class=\"headerlink\" title=\"点击图片上传（本地图片上传，被劫持转化为 base64）\"></a>点击图片上传（本地图片上传，被劫持转化为 base64）</h3><p>遇到的问题： 上传的图片没有改变初始化加载的图片</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> upload() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123;input&#125; = <span class=\"keyword\">this</span>.$refs</span><br><span class=\"line\">        <span class=\"keyword\">const</span> [file] = input.files</span><br><span class=\"line\">        input.value = <span class=\"string\">''</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = <span class=\"keyword\">await</span> <span class=\"keyword\">this</span>.getName(file) <span class=\"comment\">//获取加密后的文件名</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.url = URL.createObjectURL(file) <span class=\"comment\">// 文件blob转base64格式</span></span><br><span class=\"line\">        <span class=\"comment\">// 处理图片上传后替换原来的图片</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.cropper) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.cropper.replace(<span class=\"keyword\">this</span>.url)</span><br><span class=\"line\">          <span class=\"comment\">// 这个插件提供的一个替换图片路径的方法</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.$nextTick(<span class=\"keyword\">this</span>.initCropper)</span><br><span class=\"line\">          <span class=\"comment\">// 如果上传失败，初始化画布</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br></pre></td></tr></table></figure>\n<h3 id=\"渲染画布，实现拖拽和缩放\"><a href=\"#渲染画布，实现拖拽和缩放\" class=\"headerlink\" title=\"渲染画布，实现拖拽和缩放\"></a>渲染画布，实现拖拽和缩放</h3><p>使用 cropperJS 插件完成业务需求， 实现的原理是通过 <code>canvas</code> 来渲染画布和截取,具体的配置可以参考 <a href>cropperjs</a> <code>demo</code> 和注释如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">initCropper() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> minAspectRatio = <span class=\"number\">0.5</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> maxAspectRatio = <span class=\"number\">1.5</span>;</span><br><span class=\"line\">        <span class=\"comment\">// this.$refs.image取当前的图片为基准，展示容器</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> cropper = <span class=\"keyword\">new</span> <span class=\"keyword\">this</span>.Cropper(<span class=\"keyword\">this</span>.$refs.image, &#123;</span><br><span class=\"line\">          aspectRatio: <span class=\"number\">1</span> / <span class=\"number\">1</span>, <span class=\"comment\">//等比缩放（正方形）</span></span><br><span class=\"line\">          ready: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> minAspectRatio = <span class=\"number\">0.5</span>; <span class=\"comment\">// 图片宽高比</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> maxAspectRatio = <span class=\"number\">1.5</span>;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.cropper = cropper</span><br><span class=\"line\">            <span class=\"keyword\">const</span> containerData = cropper.getContainerData();</span><br><span class=\"line\">            <span class=\"comment\">// 裁剪狂大小</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> cropBoxData = cropper.getCropBoxData();</span><br><span class=\"line\">            <span class=\"comment\">// 裁剪框位置和尺寸数据</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> aspectRatio = cropBoxData.width / cropBoxData.height;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> newCropBoxWidth;</span><br><span class=\"line\">            <span class=\"comment\">// 限制裁剪框的最大尺寸，不能超过画布的大小</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (aspectRatio &lt; minAspectRatio || aspectRatio &gt; maxAspectRatio) &#123;</span><br><span class=\"line\">              newCropBoxWidth = cropBoxData.height * ((minAspectRatio + maxAspectRatio) / <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">              cropper.setCropBoxData(&#123;</span><br><span class=\"line\">                left: (containerData.width - newCropBoxWidth) / <span class=\"number\">2</span>,</span><br><span class=\"line\">                width: newCropBoxWidth</span><br><span class=\"line\">              &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"comment\">// 移动裁剪框并获取裁剪图片的信息</span></span><br><span class=\"line\">          cropmove: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> cropBoxData = cropper.getCropBoxData();</span><br><span class=\"line\">            <span class=\"keyword\">const</span> aspectRatio = cropBoxData.width / cropBoxData.height;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (aspectRatio &lt; minAspectRatio) &#123;</span><br><span class=\"line\">              cropper.setCropBoxData(&#123;</span><br><span class=\"line\">                width: cropBoxData.height * minAspectRatio</span><br><span class=\"line\">              &#125;);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (aspectRatio &gt; maxAspectRatio) &#123;</span><br><span class=\"line\">              cropper.setCropBoxData(&#123;</span><br><span class=\"line\">                width: cropBoxData.height * maxAspectRatio</span><br><span class=\"line\">              &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.fileBas = cropper.getCroppedCanvas().toDataURL()</span><br><span class=\"line\">            <span class=\"comment\">// 获取到被裁剪的图片信息转化为base64的数据</span></span><br><span class=\"line\">            <span class=\"comment\">// console.log(this.fileBas)</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;,</span><br></pre></td></tr></table></figure>\n<h3 id=\"base64-转化为-bolb-类型\"><a href=\"#base64-转化为-bolb-类型\" class=\"headerlink\" title=\"base64 转化为 bolb 类型\"></a>base64 转化为 bolb 类型</h3><blockquote>\n<p>改变文件类型，返回一个二进制的对象</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dataURItoBlob(base64Data) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> byteString;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (base64Data.split(<span class=\"string\">','</span>)[<span class=\"number\">0</span>].indexOf(<span class=\"string\">'base64'</span>) &gt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">          byteString = atob(base64Data.split(<span class=\"string\">','</span>)[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">          byteString = <span class=\"built_in\">unescape</span>(base64Data.split(<span class=\"string\">','</span>)[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> mimeString = base64Data.split(<span class=\"string\">','</span>)[<span class=\"number\">0</span>].split(<span class=\"string\">':'</span>)[<span class=\"number\">1</span>].split(<span class=\"string\">';'</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">const</span> ia = <span class=\"keyword\">new</span> <span class=\"built_in\">Uint8Array</span>(byteString.length);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; byteString.length; i++) &#123;</span><br><span class=\"line\">          ia[i] = byteString.charCodeAt(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 返回一个bolb二进制的对象</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Blob([ia], &#123;</span><br><span class=\"line\">          type: mimeString</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;,</span><br></pre></td></tr></table></figure>\n<h3 id=\"保存裁剪的图片并且上传\"><a href=\"#保存裁剪的图片并且上传\" class=\"headerlink\" title=\"保存裁剪的图片并且上传\"></a>保存裁剪的图片并且上传</h3><ul>\n<li>遇到的问题： 首次获取到数据后如果不移动裁剪框是不能获取到裁剪内数据的，从服务端加载的数据是没法获取到文件名的，</li>\n<li>解决的思路： 可以使用时间戳命名进行上传</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> save() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!<span class=\"keyword\">this</span>.fileBas) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 没有移动裁剪框或者没拿到值，再次拿取当前裁剪框默认的位置</span></span><br><span class=\"line\">         <span class=\"keyword\">this</span>.fileBas = <span class=\"keyword\">this</span>.cropper.getCroppedCanvas().toDataURL()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// base64转化为bolb</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> file = <span class=\"keyword\">this</span>.dataURItoBlob(<span class=\"keyword\">this</span>.fileBas)</span><br><span class=\"line\">        <span class=\"comment\">// 进行上传前的认证</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!(<span class=\"keyword\">await</span> <span class=\"keyword\">this</span>.beforeUpload(file))) <span class=\"keyword\">return</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> fd = <span class=\"keyword\">new</span> FormData()</span><br><span class=\"line\">        <span class=\"built_in\">Object</span>.entries(<span class=\"keyword\">this</span>.formData).forEach(<span class=\"function\">(<span class=\"params\">[key, value]</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          fd.append(key, value)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        fd.append(<span class=\"string\">'file'</span>, file)</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123; data &#125; = <span class=\"keyword\">await</span> axios(&#123;</span><br><span class=\"line\">          url: <span class=\"keyword\">this</span>.action,</span><br><span class=\"line\">          data: fd,</span><br><span class=\"line\">          method: <span class=\"string\">'post'</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123; path &#125; = data</span><br><span class=\"line\">        <span class=\"comment\">// 从store中拿数据时，并且要修改时，最好还是解构出来赋值给一个新的属性，再进行修改，防止引用类型的存在直接修改store里的数据，导致报错</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> d = &#123;...this.information&#125;</span><br><span class=\"line\">        d.avatar = path</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> d.avatar_url</span><br><span class=\"line\">        <span class=\"keyword\">await</span> <span class=\"keyword\">this</span>.$store.dispatch(<span class=\"string\">'userInformation/updateInformation'</span>, d)</span><br><span class=\"line\">        Message.success(<span class=\"string\">'保存成功'</span>)</span><br><span class=\"line\">      &#125;,</span><br></pre></td></tr></table></figure>\n<h3 id=\"从-token-中获取上传的签名和使用-MD5-加密防止重名文件上传被覆盖\"><a href=\"#从-token-中获取上传的签名和使用-MD5-加密防止重名文件上传被覆盖\" class=\"headerlink\" title=\"从 token 中获取上传的签名和使用 MD5 加密防止重名文件上传被覆盖\"></a>从 <code>token</code> 中获取上传的签名和使用 <code>MD5</code> 加密防止重名文件上传被覆盖</h3><p>Q： 如果直接使用文件名作为上传的文件名称， 在不同目录下的同名文件上传到服务器之后，由于上传的名称相同会导致以前的文件被覆盖，问题难以被发现</p>\n<p>A:</p>\n<ul>\n<li>文件名加上当前事件戳（毫秒级），但不够优雅</li>\n<li>使用 <code>MD5</code> 加密， 解决命名重复问题</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> beforeUpload() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> token = <span class=\"keyword\">await</span> <span class=\"keyword\">this</span>.$store.dispatch(<span class=\"string\">'getToken/getAliToken'</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; accessid, callback, dir, host, policy, signature &#125; = token</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.action = host</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.formData[<span class=\"string\">'key'</span>] = <span class=\"keyword\">this</span>.name ? <span class=\"string\">`<span class=\"subst\">$&#123;dir&#125;</span><span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span>`</span> : (<span class=\"built_in\">Date</span>.now() + <span class=\"keyword\">this</span>.url.substr(<span class=\"keyword\">this</span>.url.lastIndexOf(<span class=\"string\">'.'</span>)).split(<span class=\"string\">'-'</span>)[<span class=\"number\">0</span>])</span><br><span class=\"line\">  <span class=\"comment\">// (Date.now() + this.url.substr(this.url.lastIndexOf('.')).split('-')[0])服务端拿取的图片命名规则</span></span><br><span class=\"line\">  <span class=\"comment\">// this.formData['key'] = `$&#123;dir&#125;$&#123;md5(file.name)&#125;$&#123;file.name.substr(file.name.indexOf('.'))&#125;`</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.formData[<span class=\"string\">'OSSAccessKeyId'</span>] = accessid</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.formData[<span class=\"string\">'policy'</span>] = policy</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.formData[<span class=\"string\">'Signature'</span>] = signature</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.formData[<span class=\"string\">'callback'</span>] = callback</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"comment\">// MD5 加密， 获取上传的文件名方法</span></span><br><span class=\"line\">getName(file) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; name &#125; = file</span><br><span class=\"line\">    <span class=\"comment\">// 截取文件后缀</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> suffix = name.substr(name.lastIndexOf(<span class=\"string\">'.'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">const</span> spark = <span class=\"keyword\">new</span> SparkMD5.ArrayBuffer()</span><br><span class=\"line\">    <span class=\"keyword\">const</span> reader = <span class=\"keyword\">new</span> FileReader()</span><br><span class=\"line\">    reader.readAsArrayBuffer(file)</span><br><span class=\"line\">    reader.addEventListener(<span class=\"string\">'load'</span>, (e) =&gt; &#123;</span><br><span class=\"line\">      spark.append(e.target.result)</span><br><span class=\"line\">      resolve(spark.end() + suffix) <span class=\"comment\">// 文件md5加密，放置重复上传</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"小程序登陆","date":"2018-11-24T16:00:00.000Z","_content":"\n小程序登陆的实现代码\n最后更改时间 2018 年 11 月 25 日\n\n<!-- more -->\n\n## 登陆流程的改变\n\n> 原来我们在首次进入小程序时，会通过 getUserInfo 调起用户授权的弹窗，但是根据微信小程序，最新更新解释，开发工具，体验版本将不再支持这个授权方式而是通过 button 组件让用户自主去点击已完成授权目的（这个对开发者来说真的是很蛋疼）,\n\n> 解决方案： 设置一个用户登陆的过渡页面\n\n```js\n  <button wx:if=\"{{canIUse}}\" open-type=\"getUserInfo\" bindgetuserinfo=\"bindGetUserInfo\">授权登录</button>\n  <view wx:else>请升级微信版本</view>  //让用户自己去点击这个授权登录的按钮，然后再去进行后续的业务逻辑\n```\n\n### 小程序登陆逻辑\n\n```js\nimport request from '@/utils/request/baseRequest'\nimport authority from '@/utils/authority' // 将数据存取Storage里\nimport { getCurrentOptions, getCurrentUrl } from '@/utils'\n// 小程序当前页面url和路径参数 和 获取小程序当前路由参数 方法\n\n// code 换取 session_key\n\nasync function fetchSessionKey(code) {\n  const { session_key, unionid, token, openid = '', user = {} } = await request(\n    {\n      url: '/api/app/v1/miniapp/session',\n      method: 'post',\n      data: { code }\n    }\n  )\n  user.session_key = session_key\n  user.unionid = unionid\n  user.openid = openid\n  authority.set(user)\n  if (token) {\n    user.token = token\n    authority.set(user)\n    const { back } = getCurrentOptions()\n    if (!back) return\n    wx.reLaunch({\n      url: decodeURIComponent(back)\n    })\n  } else {\n    const back = getCurrentUrl()\n    // 重定向对路页面\n    if (!back.startsWith('/pages/login/main')) {\n      wx.redirectTo({\n        url: `/pages/login/main?back=${encodeURIComponent(back)}`\n      })\n    }\n    authority.set({ session_key, unionid })\n  }\n  return true\n}\n\nexport default () => {\n  return new Promise((resolve, reject) => {\n    const user = authority.get() || {}\n    if (user.token) return resolve(user) // todo\n\n    const errorHandle = e => {\n      console.error(e)\n      wx.showToast({\n        title: '获取code失败',\n        icon: 'none'\n      })\n      reject(e)\n    }\n\n    wx.login({\n      success({ code }) {\n        fetchSessionKey(code)\n          .then(resolve)\n          .catch(errorHandle)\n      },\n      fail(e) {\n        console.log(11)\n        errorHandle(e)\n      }\n    })\n  })\n}\n```\n\n## wx.getStorageSync And wx.setStorageSync\n\n1. 读取信息的时候要使用 try/catch 捕捉错误\n2. key 要唯一\n3. 清除数据之前要保存重要的信息： 用于登陆所需的信息\n\n```javascript\nconst key = 'user_info' // 定义储存的key，一定要确保是单一的\nconst maxAge = 1000 * 60 * 60 * 24 * 60 // 设置过期时间，60天过期\n\nexport default {\n  get() {\n    // 获取存储到localStorage中的数据，一般是用户信息，使用try/catch捕捉错误\n    try {\n      const user = wx.getStorageSync(key)\n      if (!user || user.time + maxAge < Date.now()) return null\n      // 如果储存的时间过期了，直接返回null，重新发送登陆接口获取\n      return user || {}\n    } catch (e) {\n      return {}\n    }\n  },\n  set(user) {\n    if (!user) return null\n    // 存储数据，没有数据直接返回null，外部捕捉这个null来判定是否成功\n    user.time = Date.now()\n    // 设置储存时间，用来判断是否过期\n    const oldUser = this.get() || {}\n    const newUser = { ...oldUser, ...user } //将以前的数据和新的数据一起整合在一起\n    console.log(newUser, 'newuser')\n    wx.setStorageSync(key, newUser) //微信存储数据的静态方法\n    return newUser\n  },\n  clear() {\n    const user = this.get() || {}\n    const { regionCode = '', currentCity = '', shop_id = '' } = user\n    // 即使是清除数据，也保存重要的登陆信息\n    wx.clearStorageSync()\n    this.set({ regionCode, currentCity, shop_id })\n    // 清空完之后再次储存\n    return user\n  }\n}\n```\n\n### 登陆信息存储于本地\n\n```js\nconst key = 'user_info' // 定义储存的key，一定要确保是单一的\nconst maxAge = 1000 * 60 * 60 * 24 * 60 // 设置过期时间，60天过期\n\nexport default {\n  get() {\n    // 获取存储到localStorage中的数据，一般是用户信息，使用try/catch捕捉错误\n    try {\n      const user = wx.getStorageSync(key)\n      if (!user || user.time + maxAge < Date.now()) return null\n      // 如果储存的时间过期了，直接返回null，重新发送登陆接口获取\n      return user || {}\n    } catch (e) {\n      return {}\n    }\n  },\n  set(user) {\n    if (!user) return null\n    // 存储数据，没有数据直接返回null，外部捕捉这个null来判定是否成功\n    user.time = Date.now()\n    // 设置储存时间，用来判断是否过期\n    const oldUser = this.get() || {}\n    const newUser = { ...oldUser, ...user } //将以前的数据和新的数据一起整合在一起\n    console.log(newUser)\n    wx.setStorageSync(key, newUser) //微信存储数据的静态方法\n    return newUser\n  },\n  clear() {\n    const user = this.get() || {}\n    const { regionCode = '', currentCity = '', shop_id = '' } = user\n    // 即使是清除数据，也保存重要的登陆信息\n    wx.clearStorageSync()\n    this.set({ regionCode, currentCity, shop_id })\n    // 清空完之后再次储存\n    return user\n  }\n}\n```\n","source":"_posts/2018-11-25-wxLogin.md","raw":"---\nlayout: post\ntitle: 小程序登陆\ndate: 2018-11-25\ncategories: weChat\ntags:\n  - 小程序\n  - 前端\n---\n\n小程序登陆的实现代码\n最后更改时间 2018 年 11 月 25 日\n\n<!-- more -->\n\n## 登陆流程的改变\n\n> 原来我们在首次进入小程序时，会通过 getUserInfo 调起用户授权的弹窗，但是根据微信小程序，最新更新解释，开发工具，体验版本将不再支持这个授权方式而是通过 button 组件让用户自主去点击已完成授权目的（这个对开发者来说真的是很蛋疼）,\n\n> 解决方案： 设置一个用户登陆的过渡页面\n\n```js\n  <button wx:if=\"{{canIUse}}\" open-type=\"getUserInfo\" bindgetuserinfo=\"bindGetUserInfo\">授权登录</button>\n  <view wx:else>请升级微信版本</view>  //让用户自己去点击这个授权登录的按钮，然后再去进行后续的业务逻辑\n```\n\n### 小程序登陆逻辑\n\n```js\nimport request from '@/utils/request/baseRequest'\nimport authority from '@/utils/authority' // 将数据存取Storage里\nimport { getCurrentOptions, getCurrentUrl } from '@/utils'\n// 小程序当前页面url和路径参数 和 获取小程序当前路由参数 方法\n\n// code 换取 session_key\n\nasync function fetchSessionKey(code) {\n  const { session_key, unionid, token, openid = '', user = {} } = await request(\n    {\n      url: '/api/app/v1/miniapp/session',\n      method: 'post',\n      data: { code }\n    }\n  )\n  user.session_key = session_key\n  user.unionid = unionid\n  user.openid = openid\n  authority.set(user)\n  if (token) {\n    user.token = token\n    authority.set(user)\n    const { back } = getCurrentOptions()\n    if (!back) return\n    wx.reLaunch({\n      url: decodeURIComponent(back)\n    })\n  } else {\n    const back = getCurrentUrl()\n    // 重定向对路页面\n    if (!back.startsWith('/pages/login/main')) {\n      wx.redirectTo({\n        url: `/pages/login/main?back=${encodeURIComponent(back)}`\n      })\n    }\n    authority.set({ session_key, unionid })\n  }\n  return true\n}\n\nexport default () => {\n  return new Promise((resolve, reject) => {\n    const user = authority.get() || {}\n    if (user.token) return resolve(user) // todo\n\n    const errorHandle = e => {\n      console.error(e)\n      wx.showToast({\n        title: '获取code失败',\n        icon: 'none'\n      })\n      reject(e)\n    }\n\n    wx.login({\n      success({ code }) {\n        fetchSessionKey(code)\n          .then(resolve)\n          .catch(errorHandle)\n      },\n      fail(e) {\n        console.log(11)\n        errorHandle(e)\n      }\n    })\n  })\n}\n```\n\n## wx.getStorageSync And wx.setStorageSync\n\n1. 读取信息的时候要使用 try/catch 捕捉错误\n2. key 要唯一\n3. 清除数据之前要保存重要的信息： 用于登陆所需的信息\n\n```javascript\nconst key = 'user_info' // 定义储存的key，一定要确保是单一的\nconst maxAge = 1000 * 60 * 60 * 24 * 60 // 设置过期时间，60天过期\n\nexport default {\n  get() {\n    // 获取存储到localStorage中的数据，一般是用户信息，使用try/catch捕捉错误\n    try {\n      const user = wx.getStorageSync(key)\n      if (!user || user.time + maxAge < Date.now()) return null\n      // 如果储存的时间过期了，直接返回null，重新发送登陆接口获取\n      return user || {}\n    } catch (e) {\n      return {}\n    }\n  },\n  set(user) {\n    if (!user) return null\n    // 存储数据，没有数据直接返回null，外部捕捉这个null来判定是否成功\n    user.time = Date.now()\n    // 设置储存时间，用来判断是否过期\n    const oldUser = this.get() || {}\n    const newUser = { ...oldUser, ...user } //将以前的数据和新的数据一起整合在一起\n    console.log(newUser, 'newuser')\n    wx.setStorageSync(key, newUser) //微信存储数据的静态方法\n    return newUser\n  },\n  clear() {\n    const user = this.get() || {}\n    const { regionCode = '', currentCity = '', shop_id = '' } = user\n    // 即使是清除数据，也保存重要的登陆信息\n    wx.clearStorageSync()\n    this.set({ regionCode, currentCity, shop_id })\n    // 清空完之后再次储存\n    return user\n  }\n}\n```\n\n### 登陆信息存储于本地\n\n```js\nconst key = 'user_info' // 定义储存的key，一定要确保是单一的\nconst maxAge = 1000 * 60 * 60 * 24 * 60 // 设置过期时间，60天过期\n\nexport default {\n  get() {\n    // 获取存储到localStorage中的数据，一般是用户信息，使用try/catch捕捉错误\n    try {\n      const user = wx.getStorageSync(key)\n      if (!user || user.time + maxAge < Date.now()) return null\n      // 如果储存的时间过期了，直接返回null，重新发送登陆接口获取\n      return user || {}\n    } catch (e) {\n      return {}\n    }\n  },\n  set(user) {\n    if (!user) return null\n    // 存储数据，没有数据直接返回null，外部捕捉这个null来判定是否成功\n    user.time = Date.now()\n    // 设置储存时间，用来判断是否过期\n    const oldUser = this.get() || {}\n    const newUser = { ...oldUser, ...user } //将以前的数据和新的数据一起整合在一起\n    console.log(newUser)\n    wx.setStorageSync(key, newUser) //微信存储数据的静态方法\n    return newUser\n  },\n  clear() {\n    const user = this.get() || {}\n    const { regionCode = '', currentCity = '', shop_id = '' } = user\n    // 即使是清除数据，也保存重要的登陆信息\n    wx.clearStorageSync()\n    this.set({ regionCode, currentCity, shop_id })\n    // 清空完之后再次储存\n    return user\n  }\n}\n```\n","slug":"2018-11-25-wxLogin","published":1,"updated":"2019-04-24T06:18:40.886Z","comments":1,"photos":[],"link":"","_id":"cjvbyxkix003yw0oojmcxvgf7","content":"<p>小程序登陆的实现代码<br>最后更改时间 2018 年 11 月 25 日</p>\n<a id=\"more\"></a>\n<h2 id=\"登陆流程的改变\"><a href=\"#登陆流程的改变\" class=\"headerlink\" title=\"登陆流程的改变\"></a>登陆流程的改变</h2><blockquote>\n<p>原来我们在首次进入小程序时，会通过 getUserInfo 调起用户授权的弹窗，但是根据微信小程序，最新更新解释，开发工具，体验版本将不再支持这个授权方式而是通过 button 组件让用户自主去点击已完成授权目的（这个对开发者来说真的是很蛋疼）,</p>\n</blockquote>\n<blockquote>\n<p>解决方案： 设置一个用户登陆的过渡页面</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button wx:<span class=\"keyword\">if</span>=<span class=\"string\">\"&#123;&#123;canIUse&#125;&#125;\"</span> open-type=<span class=\"string\">\"getUserInfo\"</span> bindgetuserinfo=<span class=\"string\">\"bindGetUserInfo\"</span>&gt;授权登录&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;view wx:else&gt;请升级微信版本&lt;/</span>view&gt;  <span class=\"comment\">//让用户自己去点击这个授权登录的按钮，然后再去进行后续的业务逻辑</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"小程序登陆逻辑\"><a href=\"#小程序登陆逻辑\" class=\"headerlink\" title=\"小程序登陆逻辑\"></a>小程序登陆逻辑</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> request <span class=\"keyword\">from</span> <span class=\"string\">'@/utils/request/baseRequest'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> authority <span class=\"keyword\">from</span> <span class=\"string\">'@/utils/authority'</span> <span class=\"comment\">// 将数据存取Storage里</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; getCurrentOptions, getCurrentUrl &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@/utils'</span></span><br><span class=\"line\"><span class=\"comment\">// 小程序当前页面url和路径参数 和 获取小程序当前路由参数 方法</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// code 换取 session_key</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fetchSessionKey</span>(<span class=\"params\">code</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; session_key, unionid, token, openid = <span class=\"string\">''</span>, user = &#123;&#125; &#125; = <span class=\"keyword\">await</span> request(</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      url: <span class=\"string\">'/api/app/v1/miniapp/session'</span>,</span><br><span class=\"line\">      method: <span class=\"string\">'post'</span>,</span><br><span class=\"line\">      data: &#123; code &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  )</span><br><span class=\"line\">  user.session_key = session_key</span><br><span class=\"line\">  user.unionid = unionid</span><br><span class=\"line\">  user.openid = openid</span><br><span class=\"line\">  authority.set(user)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (token) &#123;</span><br><span class=\"line\">    user.token = token</span><br><span class=\"line\">    authority.set(user)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; back &#125; = getCurrentOptions()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!back) <span class=\"keyword\">return</span></span><br><span class=\"line\">    wx.reLaunch(&#123;</span><br><span class=\"line\">      url: <span class=\"built_in\">decodeURIComponent</span>(back)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> back = getCurrentUrl()</span><br><span class=\"line\">    <span class=\"comment\">// 重定向对路页面</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!back.startsWith(<span class=\"string\">'/pages/login/main'</span>)) &#123;</span><br><span class=\"line\">      wx.redirectTo(&#123;</span><br><span class=\"line\">        url: <span class=\"string\">`/pages/login/main?back=<span class=\"subst\">$&#123;<span class=\"built_in\">encodeURIComponent</span>(back)&#125;</span>`</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    authority.set(&#123; session_key, unionid &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> user = authority.get() || &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (user.token) <span class=\"keyword\">return</span> resolve(user) <span class=\"comment\">// todo</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> errorHandle = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.error(e)</span><br><span class=\"line\">      wx.showToast(&#123;</span><br><span class=\"line\">        title: <span class=\"string\">'获取code失败'</span>,</span><br><span class=\"line\">        icon: <span class=\"string\">'none'</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      reject(e)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    wx.login(&#123;</span><br><span class=\"line\">      success(&#123; code &#125;) &#123;</span><br><span class=\"line\">        fetchSessionKey(code)</span><br><span class=\"line\">          .then(resolve)</span><br><span class=\"line\">          .catch(errorHandle)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      fail(e) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">11</span>)</span><br><span class=\"line\">        errorHandle(e)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"wx-getStorageSync-And-wx-setStorageSync\"><a href=\"#wx-getStorageSync-And-wx-setStorageSync\" class=\"headerlink\" title=\"wx.getStorageSync And wx.setStorageSync\"></a>wx.getStorageSync And wx.setStorageSync</h2><ol>\n<li>读取信息的时候要使用 try/catch 捕捉错误</li>\n<li>key 要唯一</li>\n<li>清除数据之前要保存重要的信息： 用于登陆所需的信息</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> key = <span class=\"string\">'user_info'</span> <span class=\"comment\">// 定义储存的key，一定要确保是单一的</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> maxAge = <span class=\"number\">1000</span> * <span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">24</span> * <span class=\"number\">60</span> <span class=\"comment\">// 设置过期时间，60天过期</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">get</span>() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取存储到localStorage中的数据，一般是用户信息，使用try/catch捕捉错误</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> user = wx.getStorageSync(key)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!user || user.time + maxAge &lt; <span class=\"built_in\">Date</span>.now()) <span class=\"keyword\">return</span> <span class=\"literal\">null</span></span><br><span class=\"line\">      <span class=\"comment\">// 如果储存的时间过期了，直接返回null，重新发送登陆接口获取</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> user || &#123;&#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"keyword\">set</span>(user) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!user) <span class=\"keyword\">return</span> <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"comment\">// 存储数据，没有数据直接返回null，外部捕捉这个null来判定是否成功</span></span><br><span class=\"line\">    user.time = <span class=\"built_in\">Date</span>.now()</span><br><span class=\"line\">    <span class=\"comment\">// 设置储存时间，用来判断是否过期</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> oldUser = <span class=\"keyword\">this</span>.get() || &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> newUser = &#123; ...oldUser, ...user &#125; <span class=\"comment\">//将以前的数据和新的数据一起整合在一起</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(newUser, <span class=\"string\">'newuser'</span>)</span><br><span class=\"line\">    wx.setStorageSync(key, newUser) <span class=\"comment\">//微信存储数据的静态方法</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> newUser</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  clear() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> user = <span class=\"keyword\">this</span>.get() || &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; regionCode = <span class=\"string\">''</span>, currentCity = <span class=\"string\">''</span>, shop_id = <span class=\"string\">''</span> &#125; = user</span><br><span class=\"line\">    <span class=\"comment\">// 即使是清除数据，也保存重要的登陆信息</span></span><br><span class=\"line\">    wx.clearStorageSync()</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.set(&#123; regionCode, currentCity, shop_id &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// 清空完之后再次储存</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> user</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"登陆信息存储于本地\"><a href=\"#登陆信息存储于本地\" class=\"headerlink\" title=\"登陆信息存储于本地\"></a>登陆信息存储于本地</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> key = <span class=\"string\">'user_info'</span> <span class=\"comment\">// 定义储存的key，一定要确保是单一的</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> maxAge = <span class=\"number\">1000</span> * <span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">24</span> * <span class=\"number\">60</span> <span class=\"comment\">// 设置过期时间，60天过期</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">get</span>() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取存储到localStorage中的数据，一般是用户信息，使用try/catch捕捉错误</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> user = wx.getStorageSync(key)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!user || user.time + maxAge &lt; <span class=\"built_in\">Date</span>.now()) <span class=\"keyword\">return</span> <span class=\"literal\">null</span></span><br><span class=\"line\">      <span class=\"comment\">// 如果储存的时间过期了，直接返回null，重新发送登陆接口获取</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> user || &#123;&#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"keyword\">set</span>(user) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!user) <span class=\"keyword\">return</span> <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"comment\">// 存储数据，没有数据直接返回null，外部捕捉这个null来判定是否成功</span></span><br><span class=\"line\">    user.time = <span class=\"built_in\">Date</span>.now()</span><br><span class=\"line\">    <span class=\"comment\">// 设置储存时间，用来判断是否过期</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> oldUser = <span class=\"keyword\">this</span>.get() || &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> newUser = &#123; ...oldUser, ...user &#125; <span class=\"comment\">//将以前的数据和新的数据一起整合在一起</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(newUser)</span><br><span class=\"line\">    wx.setStorageSync(key, newUser) <span class=\"comment\">//微信存储数据的静态方法</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> newUser</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  clear() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> user = <span class=\"keyword\">this</span>.get() || &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; regionCode = <span class=\"string\">''</span>, currentCity = <span class=\"string\">''</span>, shop_id = <span class=\"string\">''</span> &#125; = user</span><br><span class=\"line\">    <span class=\"comment\">// 即使是清除数据，也保存重要的登陆信息</span></span><br><span class=\"line\">    wx.clearStorageSync()</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.set(&#123; regionCode, currentCity, shop_id &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// 清空完之后再次储存</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> user</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>小程序登陆的实现代码<br>最后更改时间 2018 年 11 月 25 日</p>","more":"<h2 id=\"登陆流程的改变\"><a href=\"#登陆流程的改变\" class=\"headerlink\" title=\"登陆流程的改变\"></a>登陆流程的改变</h2><blockquote>\n<p>原来我们在首次进入小程序时，会通过 getUserInfo 调起用户授权的弹窗，但是根据微信小程序，最新更新解释，开发工具，体验版本将不再支持这个授权方式而是通过 button 组件让用户自主去点击已完成授权目的（这个对开发者来说真的是很蛋疼）,</p>\n</blockquote>\n<blockquote>\n<p>解决方案： 设置一个用户登陆的过渡页面</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button wx:<span class=\"keyword\">if</span>=<span class=\"string\">\"&#123;&#123;canIUse&#125;&#125;\"</span> open-type=<span class=\"string\">\"getUserInfo\"</span> bindgetuserinfo=<span class=\"string\">\"bindGetUserInfo\"</span>&gt;授权登录&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;view wx:else&gt;请升级微信版本&lt;/</span>view&gt;  <span class=\"comment\">//让用户自己去点击这个授权登录的按钮，然后再去进行后续的业务逻辑</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"小程序登陆逻辑\"><a href=\"#小程序登陆逻辑\" class=\"headerlink\" title=\"小程序登陆逻辑\"></a>小程序登陆逻辑</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> request <span class=\"keyword\">from</span> <span class=\"string\">'@/utils/request/baseRequest'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> authority <span class=\"keyword\">from</span> <span class=\"string\">'@/utils/authority'</span> <span class=\"comment\">// 将数据存取Storage里</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; getCurrentOptions, getCurrentUrl &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@/utils'</span></span><br><span class=\"line\"><span class=\"comment\">// 小程序当前页面url和路径参数 和 获取小程序当前路由参数 方法</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// code 换取 session_key</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fetchSessionKey</span>(<span class=\"params\">code</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; session_key, unionid, token, openid = <span class=\"string\">''</span>, user = &#123;&#125; &#125; = <span class=\"keyword\">await</span> request(</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      url: <span class=\"string\">'/api/app/v1/miniapp/session'</span>,</span><br><span class=\"line\">      method: <span class=\"string\">'post'</span>,</span><br><span class=\"line\">      data: &#123; code &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  )</span><br><span class=\"line\">  user.session_key = session_key</span><br><span class=\"line\">  user.unionid = unionid</span><br><span class=\"line\">  user.openid = openid</span><br><span class=\"line\">  authority.set(user)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (token) &#123;</span><br><span class=\"line\">    user.token = token</span><br><span class=\"line\">    authority.set(user)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; back &#125; = getCurrentOptions()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!back) <span class=\"keyword\">return</span></span><br><span class=\"line\">    wx.reLaunch(&#123;</span><br><span class=\"line\">      url: <span class=\"built_in\">decodeURIComponent</span>(back)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> back = getCurrentUrl()</span><br><span class=\"line\">    <span class=\"comment\">// 重定向对路页面</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!back.startsWith(<span class=\"string\">'/pages/login/main'</span>)) &#123;</span><br><span class=\"line\">      wx.redirectTo(&#123;</span><br><span class=\"line\">        url: <span class=\"string\">`/pages/login/main?back=<span class=\"subst\">$&#123;<span class=\"built_in\">encodeURIComponent</span>(back)&#125;</span>`</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    authority.set(&#123; session_key, unionid &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> user = authority.get() || &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (user.token) <span class=\"keyword\">return</span> resolve(user) <span class=\"comment\">// todo</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> errorHandle = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.error(e)</span><br><span class=\"line\">      wx.showToast(&#123;</span><br><span class=\"line\">        title: <span class=\"string\">'获取code失败'</span>,</span><br><span class=\"line\">        icon: <span class=\"string\">'none'</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      reject(e)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    wx.login(&#123;</span><br><span class=\"line\">      success(&#123; code &#125;) &#123;</span><br><span class=\"line\">        fetchSessionKey(code)</span><br><span class=\"line\">          .then(resolve)</span><br><span class=\"line\">          .catch(errorHandle)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      fail(e) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">11</span>)</span><br><span class=\"line\">        errorHandle(e)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"wx-getStorageSync-And-wx-setStorageSync\"><a href=\"#wx-getStorageSync-And-wx-setStorageSync\" class=\"headerlink\" title=\"wx.getStorageSync And wx.setStorageSync\"></a>wx.getStorageSync And wx.setStorageSync</h2><ol>\n<li>读取信息的时候要使用 try/catch 捕捉错误</li>\n<li>key 要唯一</li>\n<li>清除数据之前要保存重要的信息： 用于登陆所需的信息</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> key = <span class=\"string\">'user_info'</span> <span class=\"comment\">// 定义储存的key，一定要确保是单一的</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> maxAge = <span class=\"number\">1000</span> * <span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">24</span> * <span class=\"number\">60</span> <span class=\"comment\">// 设置过期时间，60天过期</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">get</span>() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取存储到localStorage中的数据，一般是用户信息，使用try/catch捕捉错误</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> user = wx.getStorageSync(key)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!user || user.time + maxAge &lt; <span class=\"built_in\">Date</span>.now()) <span class=\"keyword\">return</span> <span class=\"literal\">null</span></span><br><span class=\"line\">      <span class=\"comment\">// 如果储存的时间过期了，直接返回null，重新发送登陆接口获取</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> user || &#123;&#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"keyword\">set</span>(user) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!user) <span class=\"keyword\">return</span> <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"comment\">// 存储数据，没有数据直接返回null，外部捕捉这个null来判定是否成功</span></span><br><span class=\"line\">    user.time = <span class=\"built_in\">Date</span>.now()</span><br><span class=\"line\">    <span class=\"comment\">// 设置储存时间，用来判断是否过期</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> oldUser = <span class=\"keyword\">this</span>.get() || &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> newUser = &#123; ...oldUser, ...user &#125; <span class=\"comment\">//将以前的数据和新的数据一起整合在一起</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(newUser, <span class=\"string\">'newuser'</span>)</span><br><span class=\"line\">    wx.setStorageSync(key, newUser) <span class=\"comment\">//微信存储数据的静态方法</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> newUser</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  clear() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> user = <span class=\"keyword\">this</span>.get() || &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; regionCode = <span class=\"string\">''</span>, currentCity = <span class=\"string\">''</span>, shop_id = <span class=\"string\">''</span> &#125; = user</span><br><span class=\"line\">    <span class=\"comment\">// 即使是清除数据，也保存重要的登陆信息</span></span><br><span class=\"line\">    wx.clearStorageSync()</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.set(&#123; regionCode, currentCity, shop_id &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// 清空完之后再次储存</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> user</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"登陆信息存储于本地\"><a href=\"#登陆信息存储于本地\" class=\"headerlink\" title=\"登陆信息存储于本地\"></a>登陆信息存储于本地</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> key = <span class=\"string\">'user_info'</span> <span class=\"comment\">// 定义储存的key，一定要确保是单一的</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> maxAge = <span class=\"number\">1000</span> * <span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">24</span> * <span class=\"number\">60</span> <span class=\"comment\">// 设置过期时间，60天过期</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">get</span>() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取存储到localStorage中的数据，一般是用户信息，使用try/catch捕捉错误</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> user = wx.getStorageSync(key)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!user || user.time + maxAge &lt; <span class=\"built_in\">Date</span>.now()) <span class=\"keyword\">return</span> <span class=\"literal\">null</span></span><br><span class=\"line\">      <span class=\"comment\">// 如果储存的时间过期了，直接返回null，重新发送登陆接口获取</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> user || &#123;&#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"keyword\">set</span>(user) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!user) <span class=\"keyword\">return</span> <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"comment\">// 存储数据，没有数据直接返回null，外部捕捉这个null来判定是否成功</span></span><br><span class=\"line\">    user.time = <span class=\"built_in\">Date</span>.now()</span><br><span class=\"line\">    <span class=\"comment\">// 设置储存时间，用来判断是否过期</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> oldUser = <span class=\"keyword\">this</span>.get() || &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> newUser = &#123; ...oldUser, ...user &#125; <span class=\"comment\">//将以前的数据和新的数据一起整合在一起</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(newUser)</span><br><span class=\"line\">    wx.setStorageSync(key, newUser) <span class=\"comment\">//微信存储数据的静态方法</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> newUser</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  clear() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> user = <span class=\"keyword\">this</span>.get() || &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; regionCode = <span class=\"string\">''</span>, currentCity = <span class=\"string\">''</span>, shop_id = <span class=\"string\">''</span> &#125; = user</span><br><span class=\"line\">    <span class=\"comment\">// 即使是清除数据，也保存重要的登陆信息</span></span><br><span class=\"line\">    wx.clearStorageSync()</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.set(&#123; regionCode, currentCity, shop_id &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// 清空完之后再次储存</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> user</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"杂记","date":"2019-03-06T16:00:00.000Z","_content":"\n平时记录的小知识点\n\n最后更新时间 2019-04-23\n\n<!-- more -->\n\n争取在一个月一清\n\n# 杂记\n\n## event bus\n\n不用单独在 `utils` 文件夹下建立一个 `bus.js` 文件来只挂载 `vue`，可以在 `main.js` 中全局注入 `Vue.prototype.$bus = new Vue()`\n\n## @input 和 :value\n\n`v-module` 的语法糖\n\n> 默认情况下，一个组件上的 v-model 会把 value 用作 prop 且把 input 用作 event，但是一些输入类型比如单选框和复选框按钮可能想使用 value prop 来达到不同的目的。使用 model 选项可以回避这些情况产生的冲突。\n\n```html\n<my-checkbox :checked=\"foo\" @change=\"val => { foo = val }\" value=\"some value\">\n</my-checkbox>\n```\n\n```js\n model: {\n    prop: 'checked',\n    event: 'change'\n  },\n  props: {\n    value: String,\n    checked: {\n      type: Number,\n      default: 0\n    }\n  }\n```\n\n## 为什么不用 `map` 来遍历循环验证图片 `size`，而是使用 `for-in` 来循环\n\n获得图片 size 的方法是异步的，会跑出来一个 Promise\n\n## 两个 `image` 元素之间有间隙\n\n根本原因在于 `img` 标签为 `inline` 元素，该元素默认垂直对齐方式为以父元素的 `baseline`，但是展示时又是以 `bottomline` 为对齐方式，因此造成了上下两个 `img` 标签之间的间隙。\n\n- `img` 本来是行内元素，却可以用 `width` 和 `height`,当父元素没有设置高度的时候，用子元素们的高度计算出的高度给父元素的时候就会出现 `3px` 空隙这类的问题。\n\n- `img` 图片默认排版为 `inline-block`;而所有的 `inline-block` 元素之间都会有空白。\n\n解决方法：\n\n- 给图片增加样式 `display：block`\n- `img{vertical-align:top;}` 改变其垂直对齐方式\n- `div{font-size:0}` 把父元素的文字大小设置为 0\n- `div{ margin-bottom:-3px }`\n\n## 前端安全需要注意哪几方面问题\n\nxss、csrf、arp、xff、中间人攻击、运营商劫持、防暴刷\n\n## `token` 加密和登陆验证\n\nJWT（JSON Web Tokens）用户发送登陆信息至服务器，服务器认证后，生成一个 `JSON` 对象，返回给用户，服务器完全只靠这个对象认定用户身份。为了防止用户篡改数据，服务器在生成这个对象的时候，会加上签名。\n缺点：由于服务器不保存 `session` 状态，因此无法在使用过程中废止某个 `token`，或者更改 `token` 的权限。也就是说，一旦 `JWT` 签发了，在到期之前就会始终有效。（设置较短的有效期）\n\n- 可以保存在 `localStorage` 或`sessionStorage` 中， 用户再次与服务端通信的时候，都要在`HTTP header`中 `Authorization` 字段里，携带服务器返回的 `JSON`。\n\n```js\nAuthorization: Bearer <token>\n```\n\n- 也可以储存在 `Cookie` 里面，在请求的时候自动发送，但是不能跨域\n\n** 数据格式 **\n\n`Header.Payload.Signature`\n需要使用 `Base64` 转为 字符串\n\n- Header (头部)\n- Payload (负载)\n- Signature (签名)\n\n### Header\n\nJSON 对象\n\n```js\n{\n \"alg\": \"HS256\", // 签名所用的算法，默认 `HMAC SHA256（HS256)`\n \"typ\": \"JWT\" //token 类型\n}\n```\n\n### Payload\n\nJSON 对象\n\n```js\n  {\n    \"iss\": \"签发人\",\n    \"exp\": \"过期时间\",\n    \"nbf\": \"生效时间\",\n    \"iat\": \"签发时间\",\n    \"jti\": \"编号\"\n  }\n```\n\n### Signature\n\n对 `Header` 和 `Payload` 的签名，防止被篡改\n\n简单的使用方法：\n\n- 需要一个 `secret`（随机数）\n- 后端利用 `secret` 和加密算法(如：HMAC-SHA256)对 `payload`(如账号密码)生成一个字符串(`token`)，返回给前端\n- 前端每次 `request` 在 `header` 中带上登陆返回的 `token`\n- 后端用同样的算法解密\n\n### 0.1 + 0.2 ！= 0.3\n\n浮点数比较方法：使用最小精度值\n`Math.abs(0.1+0.2-0.3) <= Number.EPSILON`\n","source":"_posts/杂记.md","raw":"---\nlayout: post\ntitle: 杂记\ndate: 2019-03-07\ncategories: blog\ntags:\n  - other\n  - 前端\n---\n\n平时记录的小知识点\n\n最后更新时间 2019-04-23\n\n<!-- more -->\n\n争取在一个月一清\n\n# 杂记\n\n## event bus\n\n不用单独在 `utils` 文件夹下建立一个 `bus.js` 文件来只挂载 `vue`，可以在 `main.js` 中全局注入 `Vue.prototype.$bus = new Vue()`\n\n## @input 和 :value\n\n`v-module` 的语法糖\n\n> 默认情况下，一个组件上的 v-model 会把 value 用作 prop 且把 input 用作 event，但是一些输入类型比如单选框和复选框按钮可能想使用 value prop 来达到不同的目的。使用 model 选项可以回避这些情况产生的冲突。\n\n```html\n<my-checkbox :checked=\"foo\" @change=\"val => { foo = val }\" value=\"some value\">\n</my-checkbox>\n```\n\n```js\n model: {\n    prop: 'checked',\n    event: 'change'\n  },\n  props: {\n    value: String,\n    checked: {\n      type: Number,\n      default: 0\n    }\n  }\n```\n\n## 为什么不用 `map` 来遍历循环验证图片 `size`，而是使用 `for-in` 来循环\n\n获得图片 size 的方法是异步的，会跑出来一个 Promise\n\n## 两个 `image` 元素之间有间隙\n\n根本原因在于 `img` 标签为 `inline` 元素，该元素默认垂直对齐方式为以父元素的 `baseline`，但是展示时又是以 `bottomline` 为对齐方式，因此造成了上下两个 `img` 标签之间的间隙。\n\n- `img` 本来是行内元素，却可以用 `width` 和 `height`,当父元素没有设置高度的时候，用子元素们的高度计算出的高度给父元素的时候就会出现 `3px` 空隙这类的问题。\n\n- `img` 图片默认排版为 `inline-block`;而所有的 `inline-block` 元素之间都会有空白。\n\n解决方法：\n\n- 给图片增加样式 `display：block`\n- `img{vertical-align:top;}` 改变其垂直对齐方式\n- `div{font-size:0}` 把父元素的文字大小设置为 0\n- `div{ margin-bottom:-3px }`\n\n## 前端安全需要注意哪几方面问题\n\nxss、csrf、arp、xff、中间人攻击、运营商劫持、防暴刷\n\n## `token` 加密和登陆验证\n\nJWT（JSON Web Tokens）用户发送登陆信息至服务器，服务器认证后，生成一个 `JSON` 对象，返回给用户，服务器完全只靠这个对象认定用户身份。为了防止用户篡改数据，服务器在生成这个对象的时候，会加上签名。\n缺点：由于服务器不保存 `session` 状态，因此无法在使用过程中废止某个 `token`，或者更改 `token` 的权限。也就是说，一旦 `JWT` 签发了，在到期之前就会始终有效。（设置较短的有效期）\n\n- 可以保存在 `localStorage` 或`sessionStorage` 中， 用户再次与服务端通信的时候，都要在`HTTP header`中 `Authorization` 字段里，携带服务器返回的 `JSON`。\n\n```js\nAuthorization: Bearer <token>\n```\n\n- 也可以储存在 `Cookie` 里面，在请求的时候自动发送，但是不能跨域\n\n** 数据格式 **\n\n`Header.Payload.Signature`\n需要使用 `Base64` 转为 字符串\n\n- Header (头部)\n- Payload (负载)\n- Signature (签名)\n\n### Header\n\nJSON 对象\n\n```js\n{\n \"alg\": \"HS256\", // 签名所用的算法，默认 `HMAC SHA256（HS256)`\n \"typ\": \"JWT\" //token 类型\n}\n```\n\n### Payload\n\nJSON 对象\n\n```js\n  {\n    \"iss\": \"签发人\",\n    \"exp\": \"过期时间\",\n    \"nbf\": \"生效时间\",\n    \"iat\": \"签发时间\",\n    \"jti\": \"编号\"\n  }\n```\n\n### Signature\n\n对 `Header` 和 `Payload` 的签名，防止被篡改\n\n简单的使用方法：\n\n- 需要一个 `secret`（随机数）\n- 后端利用 `secret` 和加密算法(如：HMAC-SHA256)对 `payload`(如账号密码)生成一个字符串(`token`)，返回给前端\n- 前端每次 `request` 在 `header` 中带上登陆返回的 `token`\n- 后端用同样的算法解密\n\n### 0.1 + 0.2 ！= 0.3\n\n浮点数比较方法：使用最小精度值\n`Math.abs(0.1+0.2-0.3) <= Number.EPSILON`\n","slug":"杂记","published":1,"updated":"2019-04-25T07:21:42.738Z","comments":1,"photos":[],"link":"","_id":"cjvbyxkiy003zw0oo3f8c3hp5","content":"<p>平时记录的小知识点</p>\n<p>最后更新时间 2019-04-23</p>\n<a id=\"more\"></a>\n<p>争取在一个月一清</p>\n<h1 id=\"杂记\"><a href=\"#杂记\" class=\"headerlink\" title=\"杂记\"></a>杂记</h1><h2 id=\"event-bus\"><a href=\"#event-bus\" class=\"headerlink\" title=\"event bus\"></a>event bus</h2><p>不用单独在 <code>utils</code> 文件夹下建立一个 <code>bus.js</code> 文件来只挂载 <code>vue</code>，可以在 <code>main.js</code> 中全局注入 <code>Vue.prototype.$bus = new Vue()</code></p>\n<h2 id=\"input-和-value\"><a href=\"#input-和-value\" class=\"headerlink\" title=\"@input 和 :value\"></a>@input 和 :value</h2><p><code>v-module</code> 的语法糖</p>\n<blockquote>\n<p>默认情况下，一个组件上的 v-model 会把 value 用作 prop 且把 input 用作 event，但是一些输入类型比如单选框和复选框按钮可能想使用 value prop 来达到不同的目的。使用 model 选项可以回避这些情况产生的冲突。</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-checkbox</span> <span class=\"attr\">:checked</span>=<span class=\"string\">\"foo\"</span> @<span class=\"attr\">change</span>=<span class=\"string\">\"val =&gt; &#123; foo = val &#125;\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"some value\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">my-checkbox</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">model: &#123;</span><br><span class=\"line\">   prop: <span class=\"string\">'checked'</span>,</span><br><span class=\"line\">   event: <span class=\"string\">'change'</span></span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> props: &#123;</span><br><span class=\"line\">   value: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">   checked: &#123;</span><br><span class=\"line\">     type: <span class=\"built_in\">Number</span>,</span><br><span class=\"line\">     <span class=\"keyword\">default</span>: <span class=\"number\">0</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"为什么不用-map-来遍历循环验证图片-size，而是使用-for-in-来循环\"><a href=\"#为什么不用-map-来遍历循环验证图片-size，而是使用-for-in-来循环\" class=\"headerlink\" title=\"为什么不用 map 来遍历循环验证图片 size，而是使用 for-in 来循环\"></a>为什么不用 <code>map</code> 来遍历循环验证图片 <code>size</code>，而是使用 <code>for-in</code> 来循环</h2><p>获得图片 size 的方法是异步的，会跑出来一个 Promise</p>\n<h2 id=\"两个-image-元素之间有间隙\"><a href=\"#两个-image-元素之间有间隙\" class=\"headerlink\" title=\"两个 image 元素之间有间隙\"></a>两个 <code>image</code> 元素之间有间隙</h2><p>根本原因在于 <code>img</code> 标签为 <code>inline</code> 元素，该元素默认垂直对齐方式为以父元素的 <code>baseline</code>，但是展示时又是以 <code>bottomline</code> 为对齐方式，因此造成了上下两个 <code>img</code> 标签之间的间隙。</p>\n<ul>\n<li><p><code>img</code> 本来是行内元素，却可以用 <code>width</code> 和 <code>height</code>,当父元素没有设置高度的时候，用子元素们的高度计算出的高度给父元素的时候就会出现 <code>3px</code> 空隙这类的问题。</p>\n</li>\n<li><p><code>img</code> 图片默认排版为 <code>inline-block</code>;而所有的 <code>inline-block</code> 元素之间都会有空白。</p>\n</li>\n</ul>\n<p>解决方法：</p>\n<ul>\n<li>给图片增加样式 <code>display：block</code></li>\n<li><code>img{vertical-align:top;}</code> 改变其垂直对齐方式</li>\n<li><code>div{font-size:0}</code> 把父元素的文字大小设置为 0</li>\n<li><code>div{ margin-bottom:-3px }</code></li>\n</ul>\n<h2 id=\"前端安全需要注意哪几方面问题\"><a href=\"#前端安全需要注意哪几方面问题\" class=\"headerlink\" title=\"前端安全需要注意哪几方面问题\"></a>前端安全需要注意哪几方面问题</h2><p>xss、csrf、arp、xff、中间人攻击、运营商劫持、防暴刷</p>\n<h2 id=\"token-加密和登陆验证\"><a href=\"#token-加密和登陆验证\" class=\"headerlink\" title=\"token 加密和登陆验证\"></a><code>token</code> 加密和登陆验证</h2><p>JWT（JSON Web Tokens）用户发送登陆信息至服务器，服务器认证后，生成一个 <code>JSON</code> 对象，返回给用户，服务器完全只靠这个对象认定用户身份。为了防止用户篡改数据，服务器在生成这个对象的时候，会加上签名。<br>缺点：由于服务器不保存 <code>session</code> 状态，因此无法在使用过程中废止某个 <code>token</code>，或者更改 <code>token</code> 的权限。也就是说，一旦 <code>JWT</code> 签发了，在到期之前就会始终有效。（设置较短的有效期）</p>\n<ul>\n<li>可以保存在 <code>localStorage</code> 或<code>sessionStorage</code> 中， 用户再次与服务端通信的时候，都要在<code>HTTP header</code>中 <code>Authorization</code> 字段里，携带服务器返回的 <code>JSON</code>。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Authorization: Bearer &lt;token&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>也可以储存在 <code>Cookie</code> 里面，在请求的时候自动发送，但是不能跨域</li>\n</ul>\n<p><strong> 数据格式 </strong></p>\n<p><code>Header.Payload.Signature</code><br>需要使用 <code>Base64</code> 转为 字符串</p>\n<ul>\n<li>Header (头部)</li>\n<li>Payload (负载)</li>\n<li>Signature (签名)</li>\n</ul>\n<h3 id=\"Header\"><a href=\"#Header\" class=\"headerlink\" title=\"Header\"></a>Header</h3><p>JSON 对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"string\">\"alg\"</span>: <span class=\"string\">\"HS256\"</span>, <span class=\"comment\">// 签名所用的算法，默认 `HMAC SHA256（HS256)`</span></span><br><span class=\"line\"> <span class=\"string\">\"typ\"</span>: <span class=\"string\">\"JWT\"</span> <span class=\"comment\">//token 类型</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Payload\"><a href=\"#Payload\" class=\"headerlink\" title=\"Payload\"></a>Payload</h3><p>JSON 对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"iss\"</span>: <span class=\"string\">\"签发人\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"exp\"</span>: <span class=\"string\">\"过期时间\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"nbf\"</span>: <span class=\"string\">\"生效时间\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"iat\"</span>: <span class=\"string\">\"签发时间\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"jti\"</span>: <span class=\"string\">\"编号\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Signature\"><a href=\"#Signature\" class=\"headerlink\" title=\"Signature\"></a>Signature</h3><p>对 <code>Header</code> 和 <code>Payload</code> 的签名，防止被篡改</p>\n<p>简单的使用方法：</p>\n<ul>\n<li>需要一个 <code>secret</code>（随机数）</li>\n<li>后端利用 <code>secret</code> 和加密算法(如：HMAC-SHA256)对 <code>payload</code>(如账号密码)生成一个字符串(<code>token</code>)，返回给前端</li>\n<li>前端每次 <code>request</code> 在 <code>header</code> 中带上登陆返回的 <code>token</code></li>\n<li>后端用同样的算法解密</li>\n</ul>\n<h3 id=\"0-1-0-2-！-0-3\"><a href=\"#0-1-0-2-！-0-3\" class=\"headerlink\" title=\"0.1 + 0.2 ！= 0.3\"></a>0.1 + 0.2 ！= 0.3</h3><p>浮点数比较方法：使用最小精度值<br><code>Math.abs(0.1+0.2-0.3) &lt;= Number.EPSILON</code></p>\n","site":{"data":{}},"excerpt":"<p>平时记录的小知识点</p>\n<p>最后更新时间 2019-04-23</p>","more":"<p>争取在一个月一清</p>\n<h1 id=\"杂记\"><a href=\"#杂记\" class=\"headerlink\" title=\"杂记\"></a>杂记</h1><h2 id=\"event-bus\"><a href=\"#event-bus\" class=\"headerlink\" title=\"event bus\"></a>event bus</h2><p>不用单独在 <code>utils</code> 文件夹下建立一个 <code>bus.js</code> 文件来只挂载 <code>vue</code>，可以在 <code>main.js</code> 中全局注入 <code>Vue.prototype.$bus = new Vue()</code></p>\n<h2 id=\"input-和-value\"><a href=\"#input-和-value\" class=\"headerlink\" title=\"@input 和 :value\"></a>@input 和 :value</h2><p><code>v-module</code> 的语法糖</p>\n<blockquote>\n<p>默认情况下，一个组件上的 v-model 会把 value 用作 prop 且把 input 用作 event，但是一些输入类型比如单选框和复选框按钮可能想使用 value prop 来达到不同的目的。使用 model 选项可以回避这些情况产生的冲突。</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-checkbox</span> <span class=\"attr\">:checked</span>=<span class=\"string\">\"foo\"</span> @<span class=\"attr\">change</span>=<span class=\"string\">\"val =&gt; &#123; foo = val &#125;\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"some value\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">my-checkbox</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">model: &#123;</span><br><span class=\"line\">   prop: <span class=\"string\">'checked'</span>,</span><br><span class=\"line\">   event: <span class=\"string\">'change'</span></span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> props: &#123;</span><br><span class=\"line\">   value: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">   checked: &#123;</span><br><span class=\"line\">     type: <span class=\"built_in\">Number</span>,</span><br><span class=\"line\">     <span class=\"keyword\">default</span>: <span class=\"number\">0</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"为什么不用-map-来遍历循环验证图片-size，而是使用-for-in-来循环\"><a href=\"#为什么不用-map-来遍历循环验证图片-size，而是使用-for-in-来循环\" class=\"headerlink\" title=\"为什么不用 map 来遍历循环验证图片 size，而是使用 for-in 来循环\"></a>为什么不用 <code>map</code> 来遍历循环验证图片 <code>size</code>，而是使用 <code>for-in</code> 来循环</h2><p>获得图片 size 的方法是异步的，会跑出来一个 Promise</p>\n<h2 id=\"两个-image-元素之间有间隙\"><a href=\"#两个-image-元素之间有间隙\" class=\"headerlink\" title=\"两个 image 元素之间有间隙\"></a>两个 <code>image</code> 元素之间有间隙</h2><p>根本原因在于 <code>img</code> 标签为 <code>inline</code> 元素，该元素默认垂直对齐方式为以父元素的 <code>baseline</code>，但是展示时又是以 <code>bottomline</code> 为对齐方式，因此造成了上下两个 <code>img</code> 标签之间的间隙。</p>\n<ul>\n<li><p><code>img</code> 本来是行内元素，却可以用 <code>width</code> 和 <code>height</code>,当父元素没有设置高度的时候，用子元素们的高度计算出的高度给父元素的时候就会出现 <code>3px</code> 空隙这类的问题。</p>\n</li>\n<li><p><code>img</code> 图片默认排版为 <code>inline-block</code>;而所有的 <code>inline-block</code> 元素之间都会有空白。</p>\n</li>\n</ul>\n<p>解决方法：</p>\n<ul>\n<li>给图片增加样式 <code>display：block</code></li>\n<li><code>img{vertical-align:top;}</code> 改变其垂直对齐方式</li>\n<li><code>div{font-size:0}</code> 把父元素的文字大小设置为 0</li>\n<li><code>div{ margin-bottom:-3px }</code></li>\n</ul>\n<h2 id=\"前端安全需要注意哪几方面问题\"><a href=\"#前端安全需要注意哪几方面问题\" class=\"headerlink\" title=\"前端安全需要注意哪几方面问题\"></a>前端安全需要注意哪几方面问题</h2><p>xss、csrf、arp、xff、中间人攻击、运营商劫持、防暴刷</p>\n<h2 id=\"token-加密和登陆验证\"><a href=\"#token-加密和登陆验证\" class=\"headerlink\" title=\"token 加密和登陆验证\"></a><code>token</code> 加密和登陆验证</h2><p>JWT（JSON Web Tokens）用户发送登陆信息至服务器，服务器认证后，生成一个 <code>JSON</code> 对象，返回给用户，服务器完全只靠这个对象认定用户身份。为了防止用户篡改数据，服务器在生成这个对象的时候，会加上签名。<br>缺点：由于服务器不保存 <code>session</code> 状态，因此无法在使用过程中废止某个 <code>token</code>，或者更改 <code>token</code> 的权限。也就是说，一旦 <code>JWT</code> 签发了，在到期之前就会始终有效。（设置较短的有效期）</p>\n<ul>\n<li>可以保存在 <code>localStorage</code> 或<code>sessionStorage</code> 中， 用户再次与服务端通信的时候，都要在<code>HTTP header</code>中 <code>Authorization</code> 字段里，携带服务器返回的 <code>JSON</code>。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Authorization: Bearer &lt;token&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>也可以储存在 <code>Cookie</code> 里面，在请求的时候自动发送，但是不能跨域</li>\n</ul>\n<p><strong> 数据格式 </strong></p>\n<p><code>Header.Payload.Signature</code><br>需要使用 <code>Base64</code> 转为 字符串</p>\n<ul>\n<li>Header (头部)</li>\n<li>Payload (负载)</li>\n<li>Signature (签名)</li>\n</ul>\n<h3 id=\"Header\"><a href=\"#Header\" class=\"headerlink\" title=\"Header\"></a>Header</h3><p>JSON 对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"string\">\"alg\"</span>: <span class=\"string\">\"HS256\"</span>, <span class=\"comment\">// 签名所用的算法，默认 `HMAC SHA256（HS256)`</span></span><br><span class=\"line\"> <span class=\"string\">\"typ\"</span>: <span class=\"string\">\"JWT\"</span> <span class=\"comment\">//token 类型</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Payload\"><a href=\"#Payload\" class=\"headerlink\" title=\"Payload\"></a>Payload</h3><p>JSON 对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"iss\"</span>: <span class=\"string\">\"签发人\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"exp\"</span>: <span class=\"string\">\"过期时间\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"nbf\"</span>: <span class=\"string\">\"生效时间\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"iat\"</span>: <span class=\"string\">\"签发时间\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"jti\"</span>: <span class=\"string\">\"编号\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Signature\"><a href=\"#Signature\" class=\"headerlink\" title=\"Signature\"></a>Signature</h3><p>对 <code>Header</code> 和 <code>Payload</code> 的签名，防止被篡改</p>\n<p>简单的使用方法：</p>\n<ul>\n<li>需要一个 <code>secret</code>（随机数）</li>\n<li>后端利用 <code>secret</code> 和加密算法(如：HMAC-SHA256)对 <code>payload</code>(如账号密码)生成一个字符串(<code>token</code>)，返回给前端</li>\n<li>前端每次 <code>request</code> 在 <code>header</code> 中带上登陆返回的 <code>token</code></li>\n<li>后端用同样的算法解密</li>\n</ul>\n<h3 id=\"0-1-0-2-！-0-3\"><a href=\"#0-1-0-2-！-0-3\" class=\"headerlink\" title=\"0.1 + 0.2 ！= 0.3\"></a>0.1 + 0.2 ！= 0.3</h3><p>浮点数比较方法：使用最小精度值<br><code>Math.abs(0.1+0.2-0.3) &lt;= Number.EPSILON</code></p>"},{"title":"Nuxt","_content":"\nnuxt 使用总结\n最后更新日期： 2019-04-24\n\n<!-- more -->\n\n## 配置主机和端口\n\n## 错误页面\n\n`layouts` 文件的 `error.vue`\n\n## 引入插件\n\n在开发的过程中有时候需要引入自己的方法库或者一些第三方的插件，服务端渲染不同于简单的 `SPA` 项目，在引入插件的过程中有一些需要值得注意\n\n> 在注册的时候最好还是要判断一下 `type window === 'undefined'`，是否是客户端\n> 第三方插件凡是 mounted 中实例化的，是不可以直接使用的，在 vue 的生命周期内，只有`beforeCreate` 和 `created` 这两个方法会在 客户端和服务端被调用。其他生命周期函数仅在客户端被调用。\n\n### 使用第三方包的方法\n\n- 自定义头像： [cropperJS](https://hewaller.github.io/blog/2018/11/02/cropperJs/)\n- 使用 `nuxt` 配置，使第三方包只在客服端被调用，在服务端不被调用\n\n  > 有些插件只需在浏览器里使用，这种情况下，可以用 `ssr: false` ，使得插件只会在客户端运行。\n\n  ```js\n  // nuxt.config.js 配置\n  plugins: [{ src: '~plugins/vue-awesome-swiper.js', ssr: false }]\n\n  // plugins/vue-awesome-swiper.js 注册组件\n  import Vue from 'vue'\n  // require styles\n  import 'swiper/dist/css/swiper.css'\n  if (process.browser) {\n    const VueAwesomeSwiper = require('vue-awesome-swiper/dist/ssr')\n    Vue.use(VueAwesomeSwiper)\n  }\n  ```\n\n** 官网介绍 **\n可以通过检测 `process.server` 这个变量来控制插件中的某些脚本库只在服务端使用。当值为 `true` 表示是当前执行环境为服务器中。 此外，可以通过检查 `process.static` 是否为 `true` 来判断应用是否通过 `nuxt generator` 生成。也可以组合 `process.server` 和 `process.static` 这两个选项，确定当前状态为服务器端渲染且使用 `nuxt generate` 命令运行。\n** 个人理解 **\n`type window === 'undefined'` 可以作为判断是否只需要在客户端运行\n","source":"_posts/2019-04-18-Nuxt.md","raw":"---\ntitle: 'Nuxt'\n# date: 2019-04-18\ncategories: nuxt # 分类只能有1个\ntags: # 标签可以有多个\n  - nuxt\n  - 插件\n  - 服务端渲染\n---\n\nnuxt 使用总结\n最后更新日期： 2019-04-24\n\n<!-- more -->\n\n## 配置主机和端口\n\n## 错误页面\n\n`layouts` 文件的 `error.vue`\n\n## 引入插件\n\n在开发的过程中有时候需要引入自己的方法库或者一些第三方的插件，服务端渲染不同于简单的 `SPA` 项目，在引入插件的过程中有一些需要值得注意\n\n> 在注册的时候最好还是要判断一下 `type window === 'undefined'`，是否是客户端\n> 第三方插件凡是 mounted 中实例化的，是不可以直接使用的，在 vue 的生命周期内，只有`beforeCreate` 和 `created` 这两个方法会在 客户端和服务端被调用。其他生命周期函数仅在客户端被调用。\n\n### 使用第三方包的方法\n\n- 自定义头像： [cropperJS](https://hewaller.github.io/blog/2018/11/02/cropperJs/)\n- 使用 `nuxt` 配置，使第三方包只在客服端被调用，在服务端不被调用\n\n  > 有些插件只需在浏览器里使用，这种情况下，可以用 `ssr: false` ，使得插件只会在客户端运行。\n\n  ```js\n  // nuxt.config.js 配置\n  plugins: [{ src: '~plugins/vue-awesome-swiper.js', ssr: false }]\n\n  // plugins/vue-awesome-swiper.js 注册组件\n  import Vue from 'vue'\n  // require styles\n  import 'swiper/dist/css/swiper.css'\n  if (process.browser) {\n    const VueAwesomeSwiper = require('vue-awesome-swiper/dist/ssr')\n    Vue.use(VueAwesomeSwiper)\n  }\n  ```\n\n** 官网介绍 **\n可以通过检测 `process.server` 这个变量来控制插件中的某些脚本库只在服务端使用。当值为 `true` 表示是当前执行环境为服务器中。 此外，可以通过检查 `process.static` 是否为 `true` 来判断应用是否通过 `nuxt generator` 生成。也可以组合 `process.server` 和 `process.static` 这两个选项，确定当前状态为服务器端渲染且使用 `nuxt generate` 命令运行。\n** 个人理解 **\n`type window === 'undefined'` 可以作为判断是否只需要在客户端运行\n","slug":"2019-04-18-Nuxt","published":1,"date":"2019-04-18T09:34:18.738Z","updated":"2019-04-24T06:15:07.565Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvbyxkiz0042w0oognmv8xp3","content":"<p>nuxt 使用总结<br>最后更新日期： 2019-04-24</p>\n<a id=\"more\"></a>\n<h2 id=\"配置主机和端口\"><a href=\"#配置主机和端口\" class=\"headerlink\" title=\"配置主机和端口\"></a>配置主机和端口</h2><h2 id=\"错误页面\"><a href=\"#错误页面\" class=\"headerlink\" title=\"错误页面\"></a>错误页面</h2><p><code>layouts</code> 文件的 <code>error.vue</code></p>\n<h2 id=\"引入插件\"><a href=\"#引入插件\" class=\"headerlink\" title=\"引入插件\"></a>引入插件</h2><p>在开发的过程中有时候需要引入自己的方法库或者一些第三方的插件，服务端渲染不同于简单的 <code>SPA</code> 项目，在引入插件的过程中有一些需要值得注意</p>\n<blockquote>\n<p>在注册的时候最好还是要判断一下 <code>type window === &#39;undefined&#39;</code>，是否是客户端<br>第三方插件凡是 mounted 中实例化的，是不可以直接使用的，在 vue 的生命周期内，只有<code>beforeCreate</code> 和 <code>created</code> 这两个方法会在 客户端和服务端被调用。其他生命周期函数仅在客户端被调用。</p>\n</blockquote>\n<h3 id=\"使用第三方包的方法\"><a href=\"#使用第三方包的方法\" class=\"headerlink\" title=\"使用第三方包的方法\"></a>使用第三方包的方法</h3><ul>\n<li>自定义头像： <a href=\"https://hewaller.github.io/blog/2018/11/02/cropperJs/\">cropperJS</a></li>\n<li><p>使用 <code>nuxt</code> 配置，使第三方包只在客服端被调用，在服务端不被调用</p>\n<blockquote>\n<p>有些插件只需在浏览器里使用，这种情况下，可以用 <code>ssr: false</code> ，使得插件只会在客户端运行。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// nuxt.config.js 配置</span></span><br><span class=\"line\">plugins: [&#123; <span class=\"attr\">src</span>: <span class=\"string\">'~plugins/vue-awesome-swiper.js'</span>, <span class=\"attr\">ssr</span>: <span class=\"literal\">false</span> &#125;]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// plugins/vue-awesome-swiper.js 注册组件</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"comment\">// require styles</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'swiper/dist/css/swiper.css'</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (process.browser) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> VueAwesomeSwiper = <span class=\"built_in\">require</span>(<span class=\"string\">'vue-awesome-swiper/dist/ssr'</span>)</span><br><span class=\"line\">  Vue.use(VueAwesomeSwiper)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong> 官网介绍 </strong><br>可以通过检测 <code>process.server</code> 这个变量来控制插件中的某些脚本库只在服务端使用。当值为 <code>true</code> 表示是当前执行环境为服务器中。 此外，可以通过检查 <code>process.static</code> 是否为 <code>true</code> 来判断应用是否通过 <code>nuxt generator</code> 生成。也可以组合 <code>process.server</code> 和 <code>process.static</code> 这两个选项，确定当前状态为服务器端渲染且使用 <code>nuxt generate</code> 命令运行。<br><strong> 个人理解 </strong><br><code>type window === &#39;undefined&#39;</code> 可以作为判断是否只需要在客户端运行</p>\n","site":{"data":{}},"excerpt":"<p>nuxt 使用总结<br>最后更新日期： 2019-04-24</p>","more":"<h2 id=\"配置主机和端口\"><a href=\"#配置主机和端口\" class=\"headerlink\" title=\"配置主机和端口\"></a>配置主机和端口</h2><h2 id=\"错误页面\"><a href=\"#错误页面\" class=\"headerlink\" title=\"错误页面\"></a>错误页面</h2><p><code>layouts</code> 文件的 <code>error.vue</code></p>\n<h2 id=\"引入插件\"><a href=\"#引入插件\" class=\"headerlink\" title=\"引入插件\"></a>引入插件</h2><p>在开发的过程中有时候需要引入自己的方法库或者一些第三方的插件，服务端渲染不同于简单的 <code>SPA</code> 项目，在引入插件的过程中有一些需要值得注意</p>\n<blockquote>\n<p>在注册的时候最好还是要判断一下 <code>type window === &#39;undefined&#39;</code>，是否是客户端<br>第三方插件凡是 mounted 中实例化的，是不可以直接使用的，在 vue 的生命周期内，只有<code>beforeCreate</code> 和 <code>created</code> 这两个方法会在 客户端和服务端被调用。其他生命周期函数仅在客户端被调用。</p>\n</blockquote>\n<h3 id=\"使用第三方包的方法\"><a href=\"#使用第三方包的方法\" class=\"headerlink\" title=\"使用第三方包的方法\"></a>使用第三方包的方法</h3><ul>\n<li>自定义头像： <a href=\"https://hewaller.github.io/blog/2018/11/02/cropperJs/\">cropperJS</a></li>\n<li><p>使用 <code>nuxt</code> 配置，使第三方包只在客服端被调用，在服务端不被调用</p>\n<blockquote>\n<p>有些插件只需在浏览器里使用，这种情况下，可以用 <code>ssr: false</code> ，使得插件只会在客户端运行。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// nuxt.config.js 配置</span></span><br><span class=\"line\">plugins: [&#123; <span class=\"attr\">src</span>: <span class=\"string\">'~plugins/vue-awesome-swiper.js'</span>, <span class=\"attr\">ssr</span>: <span class=\"literal\">false</span> &#125;]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// plugins/vue-awesome-swiper.js 注册组件</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"comment\">// require styles</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'swiper/dist/css/swiper.css'</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (process.browser) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> VueAwesomeSwiper = <span class=\"built_in\">require</span>(<span class=\"string\">'vue-awesome-swiper/dist/ssr'</span>)</span><br><span class=\"line\">  Vue.use(VueAwesomeSwiper)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong> 官网介绍 </strong><br>可以通过检测 <code>process.server</code> 这个变量来控制插件中的某些脚本库只在服务端使用。当值为 <code>true</code> 表示是当前执行环境为服务器中。 此外，可以通过检查 <code>process.static</code> 是否为 <code>true</code> 来判断应用是否通过 <code>nuxt generator</code> 生成。也可以组合 <code>process.server</code> 和 <code>process.static</code> 这两个选项，确定当前状态为服务器端渲染且使用 <code>nuxt generate</code> 命令运行。<br><strong> 个人理解 </strong><br><code>type window === &#39;undefined&#39;</code> 可以作为判断是否只需要在客户端运行</p>"},{"title":"computed、methods 和 watch","date":"2019-04-24T16:00:00.000Z","_content":"\n`Vue` 知识点： computed、methods 和 watch\n最后更新日期 2019-04-25\n\n<!-- more -->\n\n## computed、methods 和 watch\n\n** 参考官网 **\n\n> - 计算属性： 是基于它的响应式依赖进行缓存的。只在相关响应式依赖发生改变时它们才会重新求值。这就意味着只要所依赖的属性还没有发生改变，多次访问计算属性会立即返回之前的计算结果，而不必再次执行函数。但是 **不能够动态的去给这个计算属性传值**\n>   默认的计算属性都是读取的`getter` 函数， 但是需要时也可以提供一个 `setter`\n\n```js\n  computed: {\n    fullName: {\n      // getter\n      get: function () {\n        return this.firstName + ' ' + this.lastName\n      },\n      // setter\n      set: function (newValue) {\n        var names = newValue.split(' ')\n        this.firstName = names[0]\n        this.lastName = names[names.length - 1]\n      }\n    }\n  }\n```\n\n> - 方法(methods)： 每次访问都会调用，不会缓存数据，可以动态的接受不同值。\n> - 监听属性(watch): 允许我们执行异步操作 (访问一个 API)，限制我们执行该操作的频率，并在我们得到最终结果前，设置中间状态。这些都是计算属性无法做到的。\n\n## watch\n\n`handler`方法，`watch` 方法中默认写的就是这个 handler，`Vue`会自己去处理这个逻辑，`watch` 方法中最终编译出来其实就是这个 `handler`。\n\n### immediate 和 deep 属性\n\n- `deep` 属性： 为了发现对象内部值的变化，默认值是 false，代表是否深度监听，可以在选项参数中指定 `deep: true`。(注意监听数组的变动不需要这么做。)\n\n```js\n data() {\n    return {\n     obj: {\n        test: 1\n      }\n    }\n  },\n  watch: {\n    obj(e) {\n      console.log(e, 'change)\n    }\n  }\n\n  // handler\n  watch: {\n    obj: {\n       handler(new, old) {\n        console.log(new, 'change');\n      },\n    }\n  }\n```\n\n> 当`obj.a`的值改变，`watch` 并没有监听到变化。受现代 `JavaScript` 的限制，`Vue` 不能检测到对象属性的添加或删除。由于 `Vue` 会在实例初始化时对属性执行 `getter/setter` 转化过程，所有属性必须在 `data` 对象上存在， `Vue` 才能转换它，这就是响应式的远离。\n> 默认情况下 `watch` 只监听 obj 这个属性引用的变化，而不能坚定到对象属性的改变，我们只有给`obj`重新整体赋值的时候它才会监听到\n\n- `deep` 深层遍历\n  > 监听器会一层层的往下遍历，给对象的所有属性都加上监听器，任何修改 `obj` 里面任何一个属性都会触发这个监听器里的 `handler`，性能开销太大。\n\n```js\nwatch: {\n  obj: {\n    handler(new, old) {\n      console.log('change');\n    },\n    deep: true // 深层遍历\n  }\n}\n```\n\n- 日程使用\n  > 只监听我们所需要\n\n```js\nwatch: {\n    'obj.test'(e) {\n      console.log(e, 'change)\n    }\n  }\n```\n\n- immediate\n  在选项参数中指定 `immediate: true` 将立即以表达式的当前值触发回调：\n\n```js\nwatch: {\n  'obj.test': {\n    handler(new, old) {\n      console.log(new, 'change');\n    },\n    immediate: true, // 立即执行 obj.test 变化就执行 watch\n  }\n}\n```\n\n## `vm.$watch`\n\n`vm.$watch` 返回一个取消观察函数，用来停止触发回调\n\n```js\nvar unwatch = vm.$watch('a', cb)\n// 之后取消观察\nunwatch()\n```\n\n> 组件是经常要被销毁的，应该注销掉原来的 `watch` 的，否则可能会导致内置溢出。但是我们平时 `watch` 都是写在组件的选项中的，他会随着组件的销毁而销毁,不需要手动取消。\n","source":"_posts/Vue/2019-04-25-computed-methods和watch.md","raw":"---\ntitle: 'computed、methods 和 watch'\ndate: 2019-04-25\ncategories: vue # 分类只能有1个\ntags: # 标签可以有多个\n  - vue\n  - 前端\n---\n\n`Vue` 知识点： computed、methods 和 watch\n最后更新日期 2019-04-25\n\n<!-- more -->\n\n## computed、methods 和 watch\n\n** 参考官网 **\n\n> - 计算属性： 是基于它的响应式依赖进行缓存的。只在相关响应式依赖发生改变时它们才会重新求值。这就意味着只要所依赖的属性还没有发生改变，多次访问计算属性会立即返回之前的计算结果，而不必再次执行函数。但是 **不能够动态的去给这个计算属性传值**\n>   默认的计算属性都是读取的`getter` 函数， 但是需要时也可以提供一个 `setter`\n\n```js\n  computed: {\n    fullName: {\n      // getter\n      get: function () {\n        return this.firstName + ' ' + this.lastName\n      },\n      // setter\n      set: function (newValue) {\n        var names = newValue.split(' ')\n        this.firstName = names[0]\n        this.lastName = names[names.length - 1]\n      }\n    }\n  }\n```\n\n> - 方法(methods)： 每次访问都会调用，不会缓存数据，可以动态的接受不同值。\n> - 监听属性(watch): 允许我们执行异步操作 (访问一个 API)，限制我们执行该操作的频率，并在我们得到最终结果前，设置中间状态。这些都是计算属性无法做到的。\n\n## watch\n\n`handler`方法，`watch` 方法中默认写的就是这个 handler，`Vue`会自己去处理这个逻辑，`watch` 方法中最终编译出来其实就是这个 `handler`。\n\n### immediate 和 deep 属性\n\n- `deep` 属性： 为了发现对象内部值的变化，默认值是 false，代表是否深度监听，可以在选项参数中指定 `deep: true`。(注意监听数组的变动不需要这么做。)\n\n```js\n data() {\n    return {\n     obj: {\n        test: 1\n      }\n    }\n  },\n  watch: {\n    obj(e) {\n      console.log(e, 'change)\n    }\n  }\n\n  // handler\n  watch: {\n    obj: {\n       handler(new, old) {\n        console.log(new, 'change');\n      },\n    }\n  }\n```\n\n> 当`obj.a`的值改变，`watch` 并没有监听到变化。受现代 `JavaScript` 的限制，`Vue` 不能检测到对象属性的添加或删除。由于 `Vue` 会在实例初始化时对属性执行 `getter/setter` 转化过程，所有属性必须在 `data` 对象上存在， `Vue` 才能转换它，这就是响应式的远离。\n> 默认情况下 `watch` 只监听 obj 这个属性引用的变化，而不能坚定到对象属性的改变，我们只有给`obj`重新整体赋值的时候它才会监听到\n\n- `deep` 深层遍历\n  > 监听器会一层层的往下遍历，给对象的所有属性都加上监听器，任何修改 `obj` 里面任何一个属性都会触发这个监听器里的 `handler`，性能开销太大。\n\n```js\nwatch: {\n  obj: {\n    handler(new, old) {\n      console.log('change');\n    },\n    deep: true // 深层遍历\n  }\n}\n```\n\n- 日程使用\n  > 只监听我们所需要\n\n```js\nwatch: {\n    'obj.test'(e) {\n      console.log(e, 'change)\n    }\n  }\n```\n\n- immediate\n  在选项参数中指定 `immediate: true` 将立即以表达式的当前值触发回调：\n\n```js\nwatch: {\n  'obj.test': {\n    handler(new, old) {\n      console.log(new, 'change');\n    },\n    immediate: true, // 立即执行 obj.test 变化就执行 watch\n  }\n}\n```\n\n## `vm.$watch`\n\n`vm.$watch` 返回一个取消观察函数，用来停止触发回调\n\n```js\nvar unwatch = vm.$watch('a', cb)\n// 之后取消观察\nunwatch()\n```\n\n> 组件是经常要被销毁的，应该注销掉原来的 `watch` 的，否则可能会导致内置溢出。但是我们平时 `watch` 都是写在组件的选项中的，他会随着组件的销毁而销毁,不需要手动取消。\n","slug":"Vue/2019-04-25-computed-methods和watch","published":1,"updated":"2019-04-25T04:33:43.907Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvbyxkj5004fw0oob6oiyb4q","content":"<p><code>Vue</code> 知识点： computed、methods 和 watch<br>最后更新日期 2019-04-25</p>\n<a id=\"more\"></a>\n<h2 id=\"computed、methods-和-watch\"><a href=\"#computed、methods-和-watch\" class=\"headerlink\" title=\"computed、methods 和 watch\"></a>computed、methods 和 watch</h2><p><strong> 参考官网 </strong></p>\n<blockquote>\n<ul>\n<li>计算属性： 是基于它的响应式依赖进行缓存的。只在相关响应式依赖发生改变时它们才会重新求值。这就意味着只要所依赖的属性还没有发生改变，多次访问计算属性会立即返回之前的计算结果，而不必再次执行函数。但是 <strong>不能够动态的去给这个计算属性传值</strong><br>默认的计算属性都是读取的<code>getter</code> 函数， 但是需要时也可以提供一个 <code>setter</code></li>\n</ul>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  fullName: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// getter</span></span><br><span class=\"line\">    <span class=\"keyword\">get</span>: function () &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.firstName + <span class=\"string\">' '</span> + <span class=\"keyword\">this</span>.lastName</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// setter</span></span><br><span class=\"line\">    <span class=\"keyword\">set</span>: function (newValue) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> names = newValue.split(<span class=\"string\">' '</span>)</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.firstName = names[<span class=\"number\">0</span>]</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.lastName = names[names.length - <span class=\"number\">1</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>方法(methods)： 每次访问都会调用，不会缓存数据，可以动态的接受不同值。</li>\n<li>监听属性(watch): 允许我们执行异步操作 (访问一个 API)，限制我们执行该操作的频率，并在我们得到最终结果前，设置中间状态。这些都是计算属性无法做到的。</li>\n</ul>\n</blockquote>\n<h2 id=\"watch\"><a href=\"#watch\" class=\"headerlink\" title=\"watch\"></a>watch</h2><p><code>handler</code>方法，<code>watch</code> 方法中默认写的就是这个 handler，<code>Vue</code>会自己去处理这个逻辑，<code>watch</code> 方法中最终编译出来其实就是这个 <code>handler</code>。</p>\n<h3 id=\"immediate-和-deep-属性\"><a href=\"#immediate-和-deep-属性\" class=\"headerlink\" title=\"immediate 和 deep 属性\"></a>immediate 和 deep 属性</h3><ul>\n<li><code>deep</code> 属性： 为了发现对象内部值的变化，默认值是 false，代表是否深度监听，可以在选项参数中指定 <code>deep: true</code>。(注意监听数组的变动不需要这么做。)</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data() &#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    obj: &#123;</span><br><span class=\"line\">       test: <span class=\"number\">1</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> watch: &#123;</span><br><span class=\"line\">   obj(e) &#123;</span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(e, <span class=\"string\">'change)</span></span><br><span class=\"line\"><span class=\"string\">   &#125;</span></span><br><span class=\"line\"><span class=\"string\"> &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"> // handler</span></span><br><span class=\"line\"><span class=\"string\"> watch: &#123;</span></span><br><span class=\"line\"><span class=\"string\">   obj: &#123;</span></span><br><span class=\"line\"><span class=\"string\">      handler(new, old) &#123;</span></span><br><span class=\"line\"><span class=\"string\">       console.log(new, '</span>change<span class=\"string\">');</span></span><br><span class=\"line\"><span class=\"string\">     &#125;,</span></span><br><span class=\"line\"><span class=\"string\">   &#125;</span></span><br><span class=\"line\"><span class=\"string\"> &#125;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>当<code>obj.a</code>的值改变，<code>watch</code> 并没有监听到变化。受现代 <code>JavaScript</code> 的限制，<code>Vue</code> 不能检测到对象属性的添加或删除。由于 <code>Vue</code> 会在实例初始化时对属性执行 <code>getter/setter</code> 转化过程，所有属性必须在 <code>data</code> 对象上存在， <code>Vue</code> 才能转换它，这就是响应式的远离。<br>默认情况下 <code>watch</code> 只监听 obj 这个属性引用的变化，而不能坚定到对象属性的改变，我们只有给<code>obj</code>重新整体赋值的时候它才会监听到</p>\n</blockquote>\n<ul>\n<li><code>deep</code> 深层遍历<blockquote>\n<p>监听器会一层层的往下遍历，给对象的所有属性都加上监听器，任何修改 <code>obj</code> 里面任何一个属性都会触发这个监听器里的 <code>handler</code>，性能开销太大。</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch: &#123;</span><br><span class=\"line\">  obj: &#123;</span><br><span class=\"line\">    handler(<span class=\"keyword\">new</span>, old) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'change'</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    deep: <span class=\"literal\">true</span> <span class=\"comment\">// 深层遍历</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>日程使用<blockquote>\n<p>只监听我们所需要</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch: &#123;</span><br><span class=\"line\">    <span class=\"string\">'obj.test'</span>(e) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(e, <span class=\"string\">'change)</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>immediate<br>在选项参数中指定 <code>immediate: true</code> 将立即以表达式的当前值触发回调：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch: &#123;</span><br><span class=\"line\">  <span class=\"string\">'obj.test'</span>: &#123;</span><br><span class=\"line\">    handler(<span class=\"keyword\">new</span>, old) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span>, <span class=\"string\">'change'</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    immediate: <span class=\"literal\">true</span>, <span class=\"comment\">// 立即执行 obj.test 变化就执行 watch</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"vm-watch\"><a href=\"#vm-watch\" class=\"headerlink\" title=\"vm.$watch\"></a><code>vm.$watch</code></h2><p><code>vm.$watch</code> 返回一个取消观察函数，用来停止触发回调</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> unwatch = vm.$watch(<span class=\"string\">'a'</span>, cb)</span><br><span class=\"line\"><span class=\"comment\">// 之后取消观察</span></span><br><span class=\"line\">unwatch()</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>组件是经常要被销毁的，应该注销掉原来的 <code>watch</code> 的，否则可能会导致内置溢出。但是我们平时 <code>watch</code> 都是写在组件的选项中的，他会随着组件的销毁而销毁,不需要手动取消。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p><code>Vue</code> 知识点： computed、methods 和 watch<br>最后更新日期 2019-04-25</p>","more":"<h2 id=\"computed、methods-和-watch\"><a href=\"#computed、methods-和-watch\" class=\"headerlink\" title=\"computed、methods 和 watch\"></a>computed、methods 和 watch</h2><p><strong> 参考官网 </strong></p>\n<blockquote>\n<ul>\n<li>计算属性： 是基于它的响应式依赖进行缓存的。只在相关响应式依赖发生改变时它们才会重新求值。这就意味着只要所依赖的属性还没有发生改变，多次访问计算属性会立即返回之前的计算结果，而不必再次执行函数。但是 <strong>不能够动态的去给这个计算属性传值</strong><br>默认的计算属性都是读取的<code>getter</code> 函数， 但是需要时也可以提供一个 <code>setter</code></li>\n</ul>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  fullName: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// getter</span></span><br><span class=\"line\">    <span class=\"keyword\">get</span>: function () &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.firstName + <span class=\"string\">' '</span> + <span class=\"keyword\">this</span>.lastName</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// setter</span></span><br><span class=\"line\">    <span class=\"keyword\">set</span>: function (newValue) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> names = newValue.split(<span class=\"string\">' '</span>)</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.firstName = names[<span class=\"number\">0</span>]</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.lastName = names[names.length - <span class=\"number\">1</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>方法(methods)： 每次访问都会调用，不会缓存数据，可以动态的接受不同值。</li>\n<li>监听属性(watch): 允许我们执行异步操作 (访问一个 API)，限制我们执行该操作的频率，并在我们得到最终结果前，设置中间状态。这些都是计算属性无法做到的。</li>\n</ul>\n</blockquote>\n<h2 id=\"watch\"><a href=\"#watch\" class=\"headerlink\" title=\"watch\"></a>watch</h2><p><code>handler</code>方法，<code>watch</code> 方法中默认写的就是这个 handler，<code>Vue</code>会自己去处理这个逻辑，<code>watch</code> 方法中最终编译出来其实就是这个 <code>handler</code>。</p>\n<h3 id=\"immediate-和-deep-属性\"><a href=\"#immediate-和-deep-属性\" class=\"headerlink\" title=\"immediate 和 deep 属性\"></a>immediate 和 deep 属性</h3><ul>\n<li><code>deep</code> 属性： 为了发现对象内部值的变化，默认值是 false，代表是否深度监听，可以在选项参数中指定 <code>deep: true</code>。(注意监听数组的变动不需要这么做。)</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data() &#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    obj: &#123;</span><br><span class=\"line\">       test: <span class=\"number\">1</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> watch: &#123;</span><br><span class=\"line\">   obj(e) &#123;</span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(e, <span class=\"string\">'change)</span></span><br><span class=\"line\"><span class=\"string\">   &#125;</span></span><br><span class=\"line\"><span class=\"string\"> &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"> // handler</span></span><br><span class=\"line\"><span class=\"string\"> watch: &#123;</span></span><br><span class=\"line\"><span class=\"string\">   obj: &#123;</span></span><br><span class=\"line\"><span class=\"string\">      handler(new, old) &#123;</span></span><br><span class=\"line\"><span class=\"string\">       console.log(new, '</span>change<span class=\"string\">');</span></span><br><span class=\"line\"><span class=\"string\">     &#125;,</span></span><br><span class=\"line\"><span class=\"string\">   &#125;</span></span><br><span class=\"line\"><span class=\"string\"> &#125;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>当<code>obj.a</code>的值改变，<code>watch</code> 并没有监听到变化。受现代 <code>JavaScript</code> 的限制，<code>Vue</code> 不能检测到对象属性的添加或删除。由于 <code>Vue</code> 会在实例初始化时对属性执行 <code>getter/setter</code> 转化过程，所有属性必须在 <code>data</code> 对象上存在， <code>Vue</code> 才能转换它，这就是响应式的远离。<br>默认情况下 <code>watch</code> 只监听 obj 这个属性引用的变化，而不能坚定到对象属性的改变，我们只有给<code>obj</code>重新整体赋值的时候它才会监听到</p>\n</blockquote>\n<ul>\n<li><code>deep</code> 深层遍历<blockquote>\n<p>监听器会一层层的往下遍历，给对象的所有属性都加上监听器，任何修改 <code>obj</code> 里面任何一个属性都会触发这个监听器里的 <code>handler</code>，性能开销太大。</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch: &#123;</span><br><span class=\"line\">  obj: &#123;</span><br><span class=\"line\">    handler(<span class=\"keyword\">new</span>, old) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'change'</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    deep: <span class=\"literal\">true</span> <span class=\"comment\">// 深层遍历</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>日程使用<blockquote>\n<p>只监听我们所需要</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch: &#123;</span><br><span class=\"line\">    <span class=\"string\">'obj.test'</span>(e) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(e, <span class=\"string\">'change)</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>immediate<br>在选项参数中指定 <code>immediate: true</code> 将立即以表达式的当前值触发回调：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch: &#123;</span><br><span class=\"line\">  <span class=\"string\">'obj.test'</span>: &#123;</span><br><span class=\"line\">    handler(<span class=\"keyword\">new</span>, old) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span>, <span class=\"string\">'change'</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    immediate: <span class=\"literal\">true</span>, <span class=\"comment\">// 立即执行 obj.test 变化就执行 watch</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"vm-watch\"><a href=\"#vm-watch\" class=\"headerlink\" title=\"vm.$watch\"></a><code>vm.$watch</code></h2><p><code>vm.$watch</code> 返回一个取消观察函数，用来停止触发回调</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> unwatch = vm.$watch(<span class=\"string\">'a'</span>, cb)</span><br><span class=\"line\"><span class=\"comment\">// 之后取消观察</span></span><br><span class=\"line\">unwatch()</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>组件是经常要被销毁的，应该注销掉原来的 <code>watch</code> 的，否则可能会导致内置溢出。但是我们平时 <code>watch</code> 都是写在组件的选项中的，他会随着组件的销毁而销毁,不需要手动取消。</p>\n</blockquote>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjvbyxkh70001w0oo9za9fcro","category_id":"cjvbyxkhe0005w0oozymcwhas","_id":"cjvbyxkho000hw0ooh9vn5ii3"},{"post_id":"cjvbyxkhb0003w0oow0ytqjpx","category_id":"cjvbyxkhk000cw0oo9zg4o76e","_id":"cjvbyxkhr000mw0oozx3qxp7q"},{"post_id":"cjvbyxkhf0007w0oopzll33nc","category_id":"cjvbyxkho000iw0oo0x60wnx1","_id":"cjvbyxkhu000tw0oom7g7to2k"},{"post_id":"cjvbyxkhh0009w0oowt7ar3kt","category_id":"cjvbyxkhr000nw0oo7jgazjzm","_id":"cjvbyxkhy000zw0oo8fxah8wr"},{"post_id":"cjvbyxkhj000bw0ool8leoct3","category_id":"cjvbyxkhv000uw0oo4m6qbndt","_id":"cjvbyxki20017w0ood65emkaq"},{"post_id":"cjvbyxkhm000fw0ooqqrrz6yn","category_id":"cjvbyxkhz0012w0ood0d37nxb","_id":"cjvbyxki3001aw0oogk3wl4c3"},{"post_id":"cjvbyxkhn000gw0oooebrf85h","category_id":"cjvbyxki20018w0ooknll3887","_id":"cjvbyxki4001dw0ooff15ynfx"},{"post_id":"cjvbyxkhp000kw0oox0n6j989","category_id":"cjvbyxki3001bw0oo45260uid","_id":"cjvbyxki5001jw0ooz2ix9kuk"},{"post_id":"cjvbyxkhq000lw0oon6l174a1","category_id":"cjvbyxki4001fw0oo58r15m3o","_id":"cjvbyxki5001nw0ooj2j740mi"},{"post_id":"cjvbyxkhs000pw0oodosk8q11","category_id":"cjvbyxki5001kw0oojwddi4m1","_id":"cjvbyxki6001rw0oo460hs434"},{"post_id":"cjvbyxkht000rw0ookwo401fi","category_id":"cjvbyxki5001ow0oo8n22v5q2","_id":"cjvbyxki7001uw0oovvcptc0m"},{"post_id":"cjvbyxkhv000ww0oo7i8mh7pm","category_id":"cjvbyxki6001sw0ooi6g2lut3","_id":"cjvbyxki7001yw0oovnzleky5"},{"post_id":"cjvbyxkhx000yw0oorzvp3ncf","category_id":"cjvbyxki7001vw0oozg9t38ud","_id":"cjvbyxki90024w0oo74bt6ofc"},{"post_id":"cjvbyxkhz0011w0oogbul2tm7","category_id":"cjvbyxki20018w0ooknll3887","_id":"cjvbyxkia0027w0oobs41opnd"},{"post_id":"cjvbyxki00014w0ooacglb7z4","category_id":"cjvbyxki20018w0ooknll3887","_id":"cjvbyxkia002bw0ooxfjce8js"},{"post_id":"cjvbyxkik003hw0oos3qsygjw","category_id":"cjvbyxkhe0005w0oozymcwhas","_id":"cjvbyxkio003ow0oocu35vaja"},{"post_id":"cjvbyxkil003kw0oolnr1mwn6","category_id":"cjvbyxki7001vw0oozg9t38ud","_id":"cjvbyxkip003pw0oon2chipk5"},{"post_id":"cjvbyxkik003iw0oob44j0p2a","category_id":"cjvbyxkim003lw0oorz4svj8t","_id":"cjvbyxkiq003tw0oo8yhmkfr6"},{"post_id":"cjvbyxkiz0042w0oognmv8xp3","category_id":"cjvbyxki7001vw0oozg9t38ud","_id":"cjvbyxkj20046w0oo3xyblhw5"},{"post_id":"cjvbyxkix003yw0oojmcxvgf7","category_id":"cjvbyxkiz0040w0oo7vlw5pbg","_id":"cjvbyxkj30049w0ooh4gh261o"},{"post_id":"cjvbyxkiy003zw0oo3f8c3hp5","category_id":"cjvbyxkj20045w0oojevz8sny","_id":"cjvbyxkj4004cw0oolv8f5f2s"},{"post_id":"cjvbyxkj5004fw0oob6oiyb4q","category_id":"cjvbyxkj7004gw0ood7tceoox","_id":"cjvbyxkj7004jw0ooyiiub0hy"}],"PostTag":[{"post_id":"cjvbyxkh70001w0oo9za9fcro","tag_id":"cjvbyxkhf0006w0oofgnit4iw","_id":"cjvbyxkht000qw0ooyxlbdndw"},{"post_id":"cjvbyxkh70001w0oo9za9fcro","tag_id":"cjvbyxkhl000dw0ooam29hfyq","_id":"cjvbyxkhu000sw0oomxcdhhyj"},{"post_id":"cjvbyxkh70001w0oo9za9fcro","tag_id":"cjvbyxkho000jw0ooobi8ecln","_id":"cjvbyxkhw000xw0oovega7647"},{"post_id":"cjvbyxkhb0003w0oow0ytqjpx","tag_id":"cjvbyxkhr000ow0oog2wwag9w","_id":"cjvbyxki00013w0oofk9vzfjq"},{"post_id":"cjvbyxkhb0003w0oow0ytqjpx","tag_id":"cjvbyxkhl000dw0ooam29hfyq","_id":"cjvbyxki10015w0oorhswksuv"},{"post_id":"cjvbyxkhf0007w0oopzll33nc","tag_id":"cjvbyxkhf0006w0oofgnit4iw","_id":"cjvbyxki4001ew0ooxv7y2hv9"},{"post_id":"cjvbyxkhf0007w0oopzll33nc","tag_id":"cjvbyxkhl000dw0ooam29hfyq","_id":"cjvbyxki4001gw0oo4w1rm7r5"},{"post_id":"cjvbyxkhf0007w0oopzll33nc","tag_id":"cjvbyxkho000jw0ooobi8ecln","_id":"cjvbyxki5001iw0oo8qwvxkl8"},{"post_id":"cjvbyxkhh0009w0oowt7ar3kt","tag_id":"cjvbyxki4001cw0ooml982k3u","_id":"cjvbyxki5001mw0oo4bffkuuh"},{"post_id":"cjvbyxkhh0009w0oowt7ar3kt","tag_id":"cjvbyxkhl000dw0ooam29hfyq","_id":"cjvbyxki6001pw0oo9182lwan"},{"post_id":"cjvbyxkhj000bw0ool8leoct3","tag_id":"cjvbyxki5001lw0oof5ul10oo","_id":"cjvbyxki7001xw0oohmj1mqtz"},{"post_id":"cjvbyxkhj000bw0ool8leoct3","tag_id":"cjvbyxki6001qw0oodhyj3w51","_id":"cjvbyxki80020w0ooo6rvwd6y"},{"post_id":"cjvbyxkhj000bw0ool8leoct3","tag_id":"cjvbyxkhl000dw0ooam29hfyq","_id":"cjvbyxki90022w0ooe7kxzpig"},{"post_id":"cjvbyxkhm000fw0ooqqrrz6yn","tag_id":"cjvbyxki7001ww0ooswa7n2sj","_id":"cjvbyxkia0026w0oo8djjxn4i"},{"post_id":"cjvbyxkhm000fw0ooqqrrz6yn","tag_id":"cjvbyxki90021w0ooqxrqy5wf","_id":"cjvbyxkia0028w0oollgdziej"},{"post_id":"cjvbyxkhm000fw0ooqqrrz6yn","tag_id":"cjvbyxkhf0006w0oofgnit4iw","_id":"cjvbyxkia002aw0ooahbhg15a"},{"post_id":"cjvbyxkhn000gw0oooebrf85h","tag_id":"cjvbyxkia0025w0oopn1ronvx","_id":"cjvbyxkib002dw0ookf78k5mv"},{"post_id":"cjvbyxkhn000gw0oooebrf85h","tag_id":"cjvbyxkia0029w0ooo5t1hz89","_id":"cjvbyxkib002ew0oos4d1ojwy"},{"post_id":"cjvbyxkhn000gw0oooebrf85h","tag_id":"cjvbyxkhl000dw0ooam29hfyq","_id":"cjvbyxkib002gw0oos0zva8pv"},{"post_id":"cjvbyxkhp000kw0oox0n6j989","tag_id":"cjvbyxkib002cw0ooj0mk9u02","_id":"cjvbyxkib002iw0oo93o2hszg"},{"post_id":"cjvbyxkhp000kw0oox0n6j989","tag_id":"cjvbyxkib002fw0oorgpaqjcf","_id":"cjvbyxkic002jw0ooc0b0hstb"},{"post_id":"cjvbyxkhq000lw0oon6l174a1","tag_id":"cjvbyxkib002hw0oo1hpq5lfr","_id":"cjvbyxkic002mw0ootxtr2vdh"},{"post_id":"cjvbyxkhq000lw0oon6l174a1","tag_id":"cjvbyxkic002kw0oo6pzukml6","_id":"cjvbyxkic002nw0ooc4fieg3h"},{"post_id":"cjvbyxkhs000pw0oodosk8q11","tag_id":"cjvbyxkic002lw0oohoa7d46o","_id":"cjvbyxkid002rw0ooqept7eco"},{"post_id":"cjvbyxkhs000pw0oodosk8q11","tag_id":"cjvbyxkic002ow0oo8mx6n8dm","_id":"cjvbyxkid002sw0oocrznzbln"},{"post_id":"cjvbyxkhs000pw0oodosk8q11","tag_id":"cjvbyxkic002pw0oocbailed8","_id":"cjvbyxkid002uw0ooblhhfkp3"},{"post_id":"cjvbyxkht000rw0ookwo401fi","tag_id":"cjvbyxkid002qw0oogkyod17n","_id":"cjvbyxkie002ww0ooi6133den"},{"post_id":"cjvbyxkht000rw0ookwo401fi","tag_id":"cjvbyxkid002tw0ooyhezuhqe","_id":"cjvbyxkie002xw0oo39ozeha3"},{"post_id":"cjvbyxkhv000ww0oo7i8mh7pm","tag_id":"cjvbyxkid002vw0oo2keu5gkn","_id":"cjvbyxkie0031w0oocwxprphu"},{"post_id":"cjvbyxkhv000ww0oo7i8mh7pm","tag_id":"cjvbyxkie002yw0oo6zw5sg1c","_id":"cjvbyxkif0032w0oov68gunwl"},{"post_id":"cjvbyxkhv000ww0oo7i8mh7pm","tag_id":"cjvbyxkie002zw0oof55ktbek","_id":"cjvbyxkif0034w0oogjnh1aa1"},{"post_id":"cjvbyxkhx000yw0oorzvp3ncf","tag_id":"cjvbyxkie0030w0oolbq578jt","_id":"cjvbyxkif0036w0ooca2f4bc8"},{"post_id":"cjvbyxkhx000yw0oorzvp3ncf","tag_id":"cjvbyxkif0033w0oo4ij6sqie","_id":"cjvbyxkif0037w0oo22buff3s"},{"post_id":"cjvbyxkhz0011w0oogbul2tm7","tag_id":"cjvbyxkhf0006w0oofgnit4iw","_id":"cjvbyxkig003aw0oomka0oid5"},{"post_id":"cjvbyxkhz0011w0oogbul2tm7","tag_id":"cjvbyxkif0035w0oo5oexbrc6","_id":"cjvbyxkig003bw0oo6axw5lyq"},{"post_id":"cjvbyxkhz0011w0oogbul2tm7","tag_id":"cjvbyxkif0038w0oowrreopsn","_id":"cjvbyxkig003dw0oo0d46kblx"},{"post_id":"cjvbyxki00014w0ooacglb7z4","tag_id":"cjvbyxkhf0006w0oofgnit4iw","_id":"cjvbyxkih003ew0ooio9do336"},{"post_id":"cjvbyxki00014w0ooacglb7z4","tag_id":"cjvbyxki4001cw0ooml982k3u","_id":"cjvbyxkih003fw0oom5ygh30s"},{"post_id":"cjvbyxki00014w0ooacglb7z4","tag_id":"cjvbyxkig003cw0ooc1sw0rdq","_id":"cjvbyxkih003gw0oohmjg7ayt"},{"post_id":"cjvbyxkik003hw0oos3qsygjw","tag_id":"cjvbyxkhf0006w0oofgnit4iw","_id":"cjvbyxkil003jw0oorghyvmte"},{"post_id":"cjvbyxkik003hw0oos3qsygjw","tag_id":"cjvbyxkhl000dw0ooam29hfyq","_id":"cjvbyxkin003nw0ooonf1uxta"},{"post_id":"cjvbyxkik003iw0oob44j0p2a","tag_id":"cjvbyxki90021w0ooqxrqy5wf","_id":"cjvbyxkiq003rw0ooglpubj9n"},{"post_id":"cjvbyxkik003iw0oob44j0p2a","tag_id":"cjvbyxkin003mw0oo8er2id5k","_id":"cjvbyxkiq003sw0ooc0c4xs07"},{"post_id":"cjvbyxkil003kw0oolnr1mwn6","tag_id":"cjvbyxkip003qw0oocssugdo5","_id":"cjvbyxkiq003vw0oocw4e0tc4"},{"post_id":"cjvbyxkil003kw0oolnr1mwn6","tag_id":"cjvbyxkie0030w0oolbq578jt","_id":"cjvbyxkir003ww0ooyspdyvt9"},{"post_id":"cjvbyxkil003kw0oolnr1mwn6","tag_id":"cjvbyxkiq003uw0ood77piwdr","_id":"cjvbyxkir003xw0oo2xgs3kd6"},{"post_id":"cjvbyxkix003yw0oojmcxvgf7","tag_id":"cjvbyxkie002zw0oof55ktbek","_id":"cjvbyxkiz0041w0oost62w2oa"},{"post_id":"cjvbyxkix003yw0oojmcxvgf7","tag_id":"cjvbyxkhl000dw0ooam29hfyq","_id":"cjvbyxkj10044w0ootjied6hc"},{"post_id":"cjvbyxkiy003zw0oo3f8c3hp5","tag_id":"cjvbyxkj00043w0ool673xjsx","_id":"cjvbyxkj30048w0oo5qxt9ie2"},{"post_id":"cjvbyxkiy003zw0oo3f8c3hp5","tag_id":"cjvbyxkhl000dw0ooam29hfyq","_id":"cjvbyxkj4004aw0oovtuptrec"},{"post_id":"cjvbyxkiz0042w0oognmv8xp3","tag_id":"cjvbyxkie0030w0oolbq578jt","_id":"cjvbyxkj4004bw0oout7snbxm"},{"post_id":"cjvbyxkiz0042w0oognmv8xp3","tag_id":"cjvbyxkj30047w0ooc63g6roa","_id":"cjvbyxkj4004dw0oo6yxmdy8c"},{"post_id":"cjvbyxkiz0042w0oognmv8xp3","tag_id":"cjvbyxkiq003uw0ood77piwdr","_id":"cjvbyxkj4004ew0oo1vavhxz5"},{"post_id":"cjvbyxkj5004fw0oob6oiyb4q","tag_id":"cjvbyxkie002yw0oo6zw5sg1c","_id":"cjvbyxkj7004hw0ooo5cloqe4"},{"post_id":"cjvbyxkj5004fw0oob6oiyb4q","tag_id":"cjvbyxkhl000dw0ooam29hfyq","_id":"cjvbyxkj7004iw0oow4eyiz88"}],"Tag":[{"name":"JavaScript","_id":"cjvbyxkhf0006w0oofgnit4iw"},{"name":"前端","_id":"cjvbyxkhl000dw0ooam29hfyq"},{"name":"ES6","_id":"cjvbyxkho000jw0ooobi8ecln"},{"name":"视频播放器","_id":"cjvbyxkhr000ow0oog2wwag9w"},{"name":"css","_id":"cjvbyxki4001cw0ooml982k3u"},{"name":"SDK","_id":"cjvbyxki5001lw0oof5ul10oo"},{"name":"云呼叫","_id":"cjvbyxki6001qw0oodhyj3w51"},{"name":"vuex","_id":"cjvbyxki7001ww0ooswa7n2sj"},{"name":"webpack","_id":"cjvbyxki90021w0ooqxrqy5wf"},{"name":"cookie","_id":"cjvbyxkia0025w0oopn1ronvx"},{"name":"token","_id":"cjvbyxkia0029w0ooo5t1hz89"},{"name":"Charles","_id":"cjvbyxkib002cw0ooj0mk9u02"},{"name":"抓包工具","_id":"cjvbyxkib002fw0oorgpaqjcf"},{"name":"H5","_id":"cjvbyxkib002hw0oo1hpq5lfr"},{"name":"移动端","_id":"cjvbyxkic002kw0oo6pzukml6"},{"name":"400","_id":"cjvbyxkic002lw0oohoa7d46o"},{"name":"CRM","_id":"cjvbyxkic002ow0oo8mx6n8dm"},{"name":"Promise","_id":"cjvbyxkic002pw0oocbailed8"},{"name":"AntD","_id":"cjvbyxkid002qw0oogkyod17n"},{"name":"前端框架","_id":"cjvbyxkid002tw0ooyhezuhqe"},{"name":"MPVue","_id":"cjvbyxkid002vw0oo2keu5gkn"},{"name":"vue","_id":"cjvbyxkie002yw0oo6zw5sg1c"},{"name":"小程序","_id":"cjvbyxkie002zw0oof55ktbek"},{"name":"nuxt","_id":"cjvbyxkie0030w0oolbq578jt"},{"name":"公共组件","_id":"cjvbyxkif0033w0oo4ij6sqie"},{"name":"动态插入","_id":"cjvbyxkif0035w0oo5oexbrc6"},{"name":"html-webpack-plugin","_id":"cjvbyxkif0038w0oowrreopsn"},{"name":"工具类","_id":"cjvbyxkig003cw0ooc1sw0rdq"},{"name":"Javascript","_id":"cjvbyxkin003mw0oo8er2id5k"},{"name":"文件上传","_id":"cjvbyxkip003qw0oocssugdo5"},{"name":"服务端渲染","_id":"cjvbyxkiq003uw0ood77piwdr"},{"name":"other","_id":"cjvbyxkj00043w0ool673xjsx"},{"name":"插件","_id":"cjvbyxkj30047w0ooc63g6roa"}]}}